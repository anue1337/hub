--// SevereLib //--

--// Presets para facilitar o uso
local Game = Game or {}
local Workspace = findfirstchildofclass(Game, "Workspace")
local Players = findfirstchildofclass(Game, "Players")
local LocalPlayer = getlocalplayer()
local Mouse = getmouseposition()

local Screen = {
    x = getscreendimensions().x,
    y = getscreendimensions().y
}

--// Iniciando a biblioteca
if _G.svl == nil then
    _G.svl = {
        --// Console Vars
        Location = {1000, 150}, -- Dinâmico
        Size = {Screen.x / 2.95, Screen.y / 1.21}, -- Estático
        FontColor = {255,255,255}, -- Estático + [Alterável]
        MainColor = {25,25,25}, -- Estático + [Alterável]
        BackgroundColor = {15,15,15}, -- Estático + [Alterável]
        AccentColor = {255,100,255}, -- Estático + [Alterável]
        OutlineColor = {40,40,40}, -- Estático + [Alterável]
        Black = {0,0,0}, -- Estático
        
        ErrorColor = {255,100,100},
        
        Open = true,
        Hovering = false,
        Dragging = false,
        WinMouseOffset = nil,
        
        StoredLogs = {},
        
        --// Rainbow
        CurrentRainbowColor = {255,255,255},
        RainbowHue = 0,
    };
end

--// Rainbow Tick
function svl_updateRainbow()
    if svl.RainbowHue > 1530 then
        svl.RainbowHue = 0  
    else
        svl.RainbowHue = svl.RainbowHue + 3
    end

    if svl.RainbowHue <= 255 then
        svl.CurrentRainbowColor = {255, svl.RainbowHue, 0}
    elseif svl.RainbowHue <= 510 then
        svl.CurrentRainbowColor = {510 - svl.RainbowHue, 255, 0}
    elseif svl.RainbowHue <= 765 then
        svl.CurrentRainbowColor = {0, 255, svl.RainbowHue - 510}
    elseif svl.RainbowHue <= 1020 then
        svl.CurrentRainbowColor = {0, 1020 - svl.RainbowHue, 255}
    elseif svl.RainbowHue <= 1275 then
        svl.CurrentRainbowColor = {svl.RainbowHue - 1020, 0, 255}
    elseif svl.RainbowHue <= 1530 then
        svl.CurrentRainbowColor = {255, 0, 1530 - svl.RainbowHue}
    end
end

--// Funções Básicas
function svl.GetCoords(wts)
    assert(type(wts) == "table" and #wts == 2, "[SVL Error] GetCoords: First Argument needs to be a table with 2 values!")
    return {(Screen.x / (1920 / wts[1])), (Screen.y / (1017 / wts[2]))}
end

function svl.isMouseInArea(area)
    assert(type(area) == "table" and #area == 4, "[SVL Error] isMouseInArea: First Argument needs to be a table with 4 values!")
    local mouse = getmouseposition()
    if mouse.x > area[1] and mouse.y > area[2] and mouse.x < area[3] and mouse.y < area[4] then
        return true
    else
        return false
    end
end

function svl.GetDistance(v1, v2)
    local pos1 = {}
    local pos2 = {}
    
    -- Processar v1
    if type(v1) == "table" then
        if v1['x'] ~= nil and v1['y'] ~= nil and v1['z'] ~= nil then
            pos1 = v1
        else
            assert(type(v1) == "table" and #v1 == 3, "[SVL Error] GetDistance: First Argument needs to be a table with 3 values!")
            pos1 = {x = v1[1], y = v1[2], z = v1[3]}
        end
    elseif type(v1) == "number" then
        pos1 = getposition(v1)
    else
        error("[SVL Error] GetDistance: First Argument needs to be a table or number!")
        return
    end
    
    -- Processar v2
    if type(v2) == "table" then
        if v2['x'] ~= nil and v2['y'] ~= nil and v2['z'] ~= nil then
            pos2 = v2
        else
            assert(type(v2) == "table" and #v2 == 3, "[SVL Error] GetDistance: Second Argument needs to be a table with 3 values!")
            pos2 = {x = v2[1], y = v2[2], z = v2[3]}
        end
    elseif type(v2) == "number" then
        pos2 = getposition(v2)
    else
        error("[SVL Error] GetDistance: Second Argument needs to be a table or number!")
        return
    end

    local a = (pos1.x-pos2.x)*(pos1.x-pos2.x)
    local b = (pos1.y-pos2.y)*(pos1.y-pos2.y)
    local c = (pos1.z-pos2.z)*(pos1.z-pos2.z)

    return math.floor(math.sqrt(a+b+c)+0.5)
end

function svl.GetDistanceFromPlayer(v)
    local localChar = getcharacter(getlocalplayer())
    if not localChar then return 9999 end
    
    local part = findfirstchild(localChar, "HumanoidRootPart")
    if not part then return 9999 end
    
    local playerPos = getposition(part)
    return svl.GetDistance(v, playerPos)
end

--// Drawing Functions
function svl.HealthBar(params)
    -- Validação de parâmetros
    assert(params.TargetPosition, "[SVL Error] HealthBar: TargetPosition required!")
    assert(params.HP, "[SVL Error] HealthBar: HP required!")
    
    -- Ajustar parâmetros default
    local size = params.Size or {120, 5}
    local size_x = size[1]
    local size_y = size[2]
    local maxhp = params.MaxHP or 100
    local scale = params.Scale or false
    local offset = params.Offset or {0,0}
    local hp = params.HP
    
    -- Processar posição
    local pos = {}
    if params.TargetPosition.x and params.TargetPosition.y and params.TargetPosition.z then
        pos = {params.TargetPosition.x, params.TargetPosition.y, params.TargetPosition.z}
    elseif params.TargetPosition[1] and params.TargetPosition[2] and params.TargetPosition[3] then
        pos = {params.TargetPosition[1], params.TargetPosition[2], params.TargetPosition[3]}
    else
        error("[SVL Error] HealthBar: TargetPosition needs to contain 3 number values!")
        return
    end

    -- Converter posição 3D para tela
    local wts = worldtoscreenpoint(pos)
    if not wts then return end

    local x = wts.x
    local y = wts.y

    -- Criar os objetos de desenho
    local background = Drawing.new("Square")
    background.Position = {x - (size_x/2) + offset[1], y + offset[2]}
    background.Size = {size_x, size_y}
    background.Color = {0, 0, 0}
    background.Filled = true
    background.Visible = true

    local healthFill = Drawing.new("Square")
    local temp = ((size_x - 2) / (maxhp/math.max(0, math.min(maxhp, hp))))
    healthFill.Position = {x - ((size_x/2) - 1) + offset[1], y - 1 + offset[2]}
    healthFill.Size = {temp, size_y - 2}
    healthFill.Color = {255 - 255 / (maxhp / hp), 255 / (maxhp / hp), 0}
    healthFill.Filled = true
    healthFill.Visible = true
    
    return {background, healthFill} -- Retornar os objetos para que possam ser removidos depois
end

-- Função auxiliar para criar linhas
function createLine(point1, point2, color)
    local line = Drawing.new("Line")
    line.From = {point1[1], point1[2]}
    line.To = {point2[1], point2[2]}
    line.Color = color
    line.Thickness = 1
    line.Visible = true
    return line
end

--// Box3D Function
function svl.Box3d(pos1, pos2, box_color)
    assert(type(pos1) == "table" and #pos1 == 3, "[SVL Error] Box3d: First Argument needs to be a table with 3 position values!")
    assert(type(pos2) == "table" and #pos2 == 3, "[SVL Error] Box3d: Second Argument needs to be a table with 3 position values!")
    assert(type(box_color) == "table" and #box_color == 3, "[SVL Error] Box3d: Third Argument needs to be a table with 3 RGB values!")
    
    local size = {
        pos1[1] - pos2[1],
        pos1[2] - pos2[2],
        pos1[3] - pos2[3]
    }
    
    local center = {
        (pos1[1] + pos2[1]) / 2,
        (pos1[2] + pos2[2]) / 2,
        (pos1[3] + pos2[3]) / 2
    }
    
    -- Criar os 8 pontos do cubo 3D
    local points = {
        {center[1] - size[1]/2, center[2] - size[2]/2, center[3] - size[3]/2}, -- 1: Bottom-Back-Left
        {center[1] + size[1]/2, center[2] - size[2]/2, center[3] - size[3]/2}, -- 2: Bottom-Back-Right
        {center[1] + size[1]/2, center[2] + size[2]/2, center[3] - size[3]/2}, -- 3: Top-Back-Right
        {center[1] - size[1]/2, center[2] + size[2]/2, center[3] - size[3]/2}, -- 4: Top-Back-Left
        {center[1] - size[1]/2, center[2] - size[2]/2, center[3] + size[3]/2}, -- 5: Bottom-Front-Left
        {center[1] + size[1]/2, center[2] - size[2]/2, center[3] + size[3]/2}, -- 6: Bottom-Front-Right
        {center[1] + size[1]/2, center[2] + size[2]/2, center[3] + size[3]/2}, -- 7: Top-Front-Right
        {center[1] - size[1]/2, center[2] + size[2]/2, center[3] + size[3]/2}  -- 8: Top-Front-Left
    }
    
    -- Converter pontos 3D para 2D
    local points2D = {}
    for i, point in ipairs(points) do
        local wts = worldtoscreenpoint(point)
        if wts then
            points2D[i] = {wts.x, wts.y}
        else
            return -- Se algum ponto não estiver visível, não desenha a caixa
        end
    end
    
    -- Criar linhas de desenho para cada aresta
    local lines = {}
    
    -- Face traseira
    table.insert(lines, createLine(points2D[1], points2D[2], box_color))
    table.insert(lines, createLine(points2D[2], points2D[3], box_color))
    table.insert(lines, createLine(points2D[3], points2D[4], box_color))
    table.insert(lines, createLine(points2D[4], points2D[1], box_color))
    
    -- Face frontal
    table.insert(lines, createLine(points2D[5], points2D[6], box_color))
    table.insert(lines, createLine(points2D[6], points2D[7], box_color))
    table.insert(lines, createLine(points2D[7], points2D[8], box_color))
    table.insert(lines, createLine(points2D[8], points2D[5], box_color))
    
    -- Conexões
    table.insert(lines, createLine(points2D[1], points2D[5], box_color))
    table.insert(lines, createLine(points2D[2], points2D[6], box_color))
    table.insert(lines, createLine(points2D[3], points2D[7], box_color))
    table.insert(lines, createLine(points2D[4], points2D[8], box_color))
    
    return lines -- Retornar as linhas para que possam ser removidas depois
end

--// BoxESP Function
function svl.BoxESP(params)
    local target = params.Target or nil
    local box_color = params.Color or {255,255,255}
    local healthbar = params.Healthbar or false
    local distance = params.Distance or false
    local nametag = params.Nametag or false
    local tracer = params.Tracer or false
    local tracertype = params.TracerType or 1 --// 1 = near-bottom, 2 = bottom, 3 = top, 4 = mouse
    local box_type = params.BoxType or 1 --// 1 = corners, 2 = 2d box, 3 = 3d box

    -- Verificação corrigida: não chama getchildren() na validação
    if type(target) ~= "number" then
        warn("[SVL Error] BoxESP: Target Argument needs to be a valid instance!")
        return
    end
    
    assert(type(box_color) == "table" and #box_color == 3, "[SVL Error] BoxESP: Color Argument needs to be a table with 3 RGB values!")
    
    local torso = findfirstchild(target, "HumanoidRootPart")
    if not torso then return end
    
    local rootPos = getposition(torso)
    
    local HeadPosY = rootPos.y + 2.5
    local LegPosY = rootPos.y - 3.5

    local Top = worldtoscreenpoint({rootPos.x, HeadPosY, rootPos.z})
    local Bottom = worldtoscreenpoint({rootPos.x, LegPosY, rootPos.z})
    
    if not Top or not Bottom then return end
    
    local height = Top.y - Bottom.y
    local width = (height / 2) / 1.2
    
    local elements = {}
    
    -- Desenhar caixa
    if box_type == 1 then -- cantos
        -- Superior esquerdo
        table.insert(elements, createLine({Top.x + width + 2, Top.y}, {Top.x + (width/2) + 2, Top.y}, box_color))
        table.insert(elements, createLine({Top.x + width + 2, Top.y}, {Top.x + width + 2, Top.y - (height/4)}, box_color))
        
        -- Superior direito
        table.insert(elements, createLine({Bottom.x - width, Top.y}, {Bottom.x - (width/2), Top.y}, box_color))
        table.insert(elements, createLine({Bottom.x - width, Top.y}, {Bottom.x - width, Top.y - (height/4)}, box_color))
        
        -- Inferior esquerdo
        table.insert(elements, createLine({Top.x + width + 2, Bottom.y}, {Top.x + (width/2) + 2, Bottom.y}, box_color))
        table.insert(elements, createLine({Top.x + width + 2, Bottom.y}, {Top.x + width + 2, Bottom.y + (height/4)}, box_color))
        
        -- Inferior direito
        table.insert(elements, createLine({Bottom.x - width, Bottom.y}, {Bottom.x - (width/2), Bottom.y}, box_color))
        table.insert(elements, createLine({Bottom.x - width, Bottom.y}, {Bottom.x - width, Bottom.y + (height/4)}, box_color))
        
    elseif box_type == 2 then -- caixa 2d
        local box = Drawing.new("Square")
        box.Position = {Bottom.x - width, Top.y}
        box.Size = {width * 2, Bottom.y - Top.y}
        box.Color = box_color
        box.Thickness = 1
        box.Filled = false
        box.Visible = true
        table.insert(elements, box)
        
    elseif box_type == 3 then -- caixa 3d
        local boxElements = svl.Box3d(
            {rootPos.x - 2, HeadPosY, rootPos.z - 2},
            {rootPos.x + 2, LegPosY, rootPos.z + 2},
            box_color
        )
        if boxElements then
            for _, element in ipairs(boxElements) do
                table.insert(elements, element)
            end
        end
    end
    
    -- Healthbar (opcional)
    if healthbar then
        local humanoid = findfirstchild(target, "Humanoid")
        if humanoid then
            local hp = gethealth(humanoid)
            local maxhp = getmaxhealth(humanoid)
            
            local tl = {Top.x + width - 5, Top.y + 1}
            local br = {Top.x + width - 1, Bottom.y - 1}
            
            -- Fundo preto
            local hbg = Drawing.new("Square")
            hbg.Position = {tl[1] - 1, tl[2] - 1}
            hbg.Size = {br[1] - tl[1] + 2, br[2] - tl[2] + 2}
            hbg.Color = box_color
            hbg.Filled = false
            hbg.Visible = true
            table.insert(elements, hbg)
            
            -- Fundo interno preto
            local hbgInner = Drawing.new("Square")
            hbgInner.Position = {tl[1], tl[2]}
            hbgInner.Size = {br[1] - tl[1], br[2] - tl[2]}
            hbgInner.Color = {0, 0, 0}
            hbgInner.Filled = true
            hbgInner.Visible = true
            table.insert(elements, hbgInner)
            
            -- Barra de vida
            local addon = (height + 2) / (maxhp/math.max(0, math.min(maxhp, hp)))
            local hbFill = Drawing.new("Square")
            hbFill.Position = {tl[1] + 1, br[2] - addon}
            hbFill.Size = {br[1] - tl[1] - 2, addon + 1}
            hbFill.Color = {255 - 255 / (maxhp / hp), 255 / (maxhp / hp), 0}
            hbFill.Filled = true
            hbFill.Visible = true
            table.insert(elements, hbFill)
        end
    end
    
    -- Distância (opcional)
    if distance then
        local dist = tostring(svl.GetDistanceFromPlayer(rootPos))
        local text = Drawing.new("Text")
        text.Text = dist
        text.Position = {Bottom.x - (dist:len() * 4), Bottom.y + 5}
        text.Color = box_color
        text.Size = 13
        text.Center = true
        text.Visible = true
        table.insert(elements, text)
    end
    
    -- Nametag (opcional)
    if nametag then
        local name = getname(target)
        local text = Drawing.new("Text")
        text.Text = name
        text.Position = {Top.x - (name:len() * 2), Top.y - 20}
        text.Color = box_color
        text.Size = 13
        text.Center = true
        text.Visible = true
        table.insert(elements, text)
    end
    
    -- Tracer (opcional)
    if tracer then
        local loc
        local screen = getscreendimensions()
        
        if tracertype == 1 then
            loc = {screen.x / 2, screen.y / 1.1}
        elseif tracertype == 2 then
            loc = {screen.x / 2, screen.y}
        elseif tracertype == 3 then
            loc = {screen.x / 2, 1}
        elseif tracertype == 4 then
            local mouse = getmouseposition()
            loc = {mouse.x, mouse.y}
        end
        
        local line = Drawing.new("Line")
        line.From = {loc[1], loc[2]}
        line.To = {Top.x + width + (((Bottom.x - width) - (Top.x + width)) / 2), Bottom.y}
        line.Color = box_color
        line.Thickness = 1
        line.Visible = true
        table.insert(elements, line)
    end
    
    return elements
end

--// Função para console
function svl.ShowConsole()
    local mouse = getmouseposition()
    
    if svl.isMouseInArea({svl.Location[1] + svl.Size[1] - 27, svl.Location[2] + 3, svl.Location[1] + svl.Size[1] - 5, svl.Location[2] + 19}) then
        if isleftclicked() then
            svl.Open = not svl.Open
        end
        svl.Hovering = true
    else
        svl.Hovering = false
    end

    -- Lógica de arrastar
    if isleftpressed() then
        if svl.Dragging or svl.isMouseInArea({svl.Location[1] - 5, svl.Location[2] - 10, svl.Location[1] + svl.Size[1] + 5, svl.Location[2] + 30}) then
            if not svl.Dragging then svl.Dragging = true end 

            if svl.WinMouseOffset == nil then
                svl.WinMouseOffset = {mouse.x - svl.Location[1], mouse.y - svl.Location[2]}
            end
            svl.Location = {mouse.x - svl.WinMouseOffset[1], mouse.y - svl.WinMouseOffset[2]}
        end
    else
        svl.Dragging = false
        svl.WinMouseOffset = nil
    end
    
    -- Interface do console
    local consoleElements = {}
    
    if svl.Open then
        -- Criar elementos do console via Drawing API
        local outline = Drawing.new("Square")
        outline.Position = {svl.Location[1] - 1, svl.Location[2] - 1}
        outline.Size = {svl.Size[1] + 2, svl.Size[2] + 2}
        outline.Color = svl.Black
        outline.Filled = true
        outline.Visible = true
        table.insert(consoleElements, outline)
        
        local accent = Drawing.new("Square")
        accent.Position = {svl.Location[1], svl.Location[2]}
        accent.Size = {svl.Size[1], svl.Size[2]}
        accent.Color = svl.AccentColor
        accent.Filled = true
        accent.Visible = true
        table.insert(consoleElements, accent)
        
        local mainOuter = Drawing.new("Square")
        mainOuter.Position = {svl.Location[1] + 1, svl.Location[2] + 1}
        mainOuter.Size = {svl.Size[1] - 2, svl.Size[2] - 2}
        mainOuter.Color = svl.MainColor
        mainOuter.Filled = true
        mainOuter.Visible = true
        table.insert(consoleElements, mainOuter)
        
        local mainInner = Drawing.new("Square")
        mainInner.Position = {svl.Location[1] + 5, svl.Location[2] + 20}
        mainInner.Size = {svl.Size[1] - 10, svl.Size[2] - 25}
        mainInner.Color = svl.BackgroundColor
        mainInner.Filled = true
        mainInner.Visible = true
        table.insert(consoleElements, mainInner)
        
        local mainInnerOutline = Drawing.new("Square")
        mainInnerOutline.Position = {svl.Location[1] + 5, svl.Location[2] + 20}
        mainInnerOutline.Size = {svl.Size[1] - 10, svl.Size[2] - 25}
        mainInnerOutline.Color = svl.OutlineColor
        mainInnerOutline.Filled = false
        mainInnerOutline.Visible = true
        table.insert(consoleElements, mainInnerOutline)
        
        local title = Drawing.new("Text")
        title.Text = "SevereLib Console | Mouse: " .. mouse.x .. ", " .. mouse.y
        title.Position = {svl.Location[1], svl.Location[2]}
        title.Color = svl.FontColor
        title.Size = 13
        title.Visible = true
        table.insert(consoleElements, title)
        
        -- Mostrar logs
        for i, v in pairs(svl.StoredLogs) do
            local logText = Drawing.new("Text")
            if string.sub(v, 1, 9) == "ERROR_TAG" then
                logText.Color = svl.ErrorColor
                logText.Text = string.sub(v, 10, -1)
            else
                logText.Color = svl.FontColor
                logText.Text = v
            end
            logText.Position = {svl.Location[1] + 10, svl.Location[2] + 25 + (i-1)*18}
            logText.Size = 13
            logText.Visible = true
            table.insert(consoleElements, logText)
        end
    else
        -- Versão minimizada do console
        local minimizedOutline = Drawing.new("Square")
        minimizedOutline.Position = {svl.Location[1] + 300, svl.Location[2] - 1}
        minimizedOutline.Size = {svl.Size[1] - 300 + 1, 23}
        minimizedOutline.Color = svl.Black
        minimizedOutline.Filled = true
        minimizedOutline.Visible = true
        table.insert(consoleElements, minimizedOutline)
        
        local minimizedAccent = Drawing.new("Square")
        minimizedAccent.Position = {svl.Location[1] + 301, svl.Location[2]}
        minimizedAccent.Size = {svl.Size[1] - 301 - 1, 22}
        minimizedAccent.Color = svl.AccentColor
        minimizedAccent.Filled = true
        minimizedAccent.Visible = true
        table.insert(consoleElements, minimizedAccent)
        
        local minimizedMain = Drawing.new("Square")
        minimizedMain.Position = {svl.Location[1] + 302, svl.Location[2] + 1}
        minimizedMain.Size = {svl.Size[1] - 303, 20}
        minimizedMain.Color = svl.MainColor
        minimizedMain.Filled = true
        minimizedMain.Visible = true
        table.insert(consoleElements, minimizedMain)
        
        local minimizedTitle = Drawing.new("Text")
        minimizedTitle.Text = "SevereLib Console"
        minimizedTitle.Position = {svl.Location[1] + 305, svl.Location[2] + 2}
        minimizedTitle.Color = svl.FontColor
        minimizedTitle.Size = 13
        minimizedTitle.Visible = true
        table.insert(consoleElements, minimizedTitle)
    end
    
    -- Botão de toggle
    local toggleBg = Drawing.new("Square")
    if svl.Hovering then
        toggleBg.Color = svl.AccentColor
    else
        toggleBg.Color = svl.Black
    end
    toggleBg.Position = {svl.Location[1] + svl.Size[1] - 27, svl.Location[2] + 3}
    toggleBg.Size = {22, 16}
    toggleBg.Filled = true
    toggleBg.Visible = true
    table.insert(consoleElements, toggleBg)
    
    local toggleInner = Drawing.new("Square")
    toggleInner.Position = {svl.Location[1] + svl.Size[1] - 26, svl.Location[2] + 4}
    toggleInner.Size = {20, 14}
    toggleInner.Color = svl.OutlineColor
    toggleInner.Filled = true
    toggleInner.Visible = true
    table.insert(consoleElements, toggleInner)
    
    local toggleMain = Drawing.new("Square")
    toggleMain.Position = {svl.Location[1] + svl.Size[1] - 25, svl.Location[2] + 5}
    toggleMain.Size = {18, 12}
    toggleMain.Color = svl.MainColor
    toggleMain.Filled = true
    toggleMain.Visible = true
    table.insert(consoleElements, toggleMain)
    
    local toggleText = Drawing.new("Text")
    toggleText.Text = "_"
    toggleText.Position = {svl.Location[1] + svl.Size[1] - 20, svl.Location[2] + 1}
    toggleText.Color = svl.FontColor
    toggleText.Size = 13
    toggleText.Visible = true
    table.insert(consoleElements, toggleText)
    
    return consoleElements
end

--// Funções de log
function svl.print(...)
    local message = ""
    for i, v in pairs({...}) do
        message = message .. tostring(v) .. " "
    end
    
    if #svl.StoredLogs >= 45 then
        table.remove(svl.StoredLogs, 1)
    end
    
    table.insert(svl.StoredLogs, message)
    print(message) -- Também usar o print nativo
end

function svl.error(...)
    local message = ""
    for i, v in pairs({...}) do
        message = message .. tostring(v) .. " "
    end
    
    if #svl.StoredLogs >= 45 then
        table.remove(svl.StoredLogs, 1)
    end
    
    table.insert(svl.StoredLogs, "ERROR_TAG" .. message)
    warn(message) -- Usar o warn nativo
end

--// Funções utilitárias
function svl.GetDescendants(instance)
    -- Verificação corrigida: não chama getchildren() na validação
    if type(instance) ~= "number" then
        warn("[SVL Error] GetDescendants: First Argument needs to be a valid instance!")
        return {}
    end
    
    local children = {}
    local instance_children = getchildren(instance)
    
    -- Verificar se instance_children não é nil antes de proceder
    if not instance_children then
        return children
    end
    
    for _, child in ipairs(instance_children) do
        table.insert(children, child)
        local descendants = svl.GetDescendants(child)
        for _, descendant in ipairs(descendants) do
            table.insert(children, descendant)
        end
    end
    
    return children
end

function svl.GetLocalPlayerName()
    return getname(getlocalplayer())
end

function svl.GetLocalCharacter()
    return getcharacter(getlocalplayer())
end

-- Exportar a biblioteca
_G.svl = svl
print("SevereLib iniciada com sucesso!")

-- Atualização da cor do arco-íris (a ser chamada em um loop)
spawn(function()
    while true do
        svl_updateRainbow()
        wait(0.03)
    end
end)
