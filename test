-- SevereLib by anue
-- ESP, Aimbot, and Debug Library for Roblox exploits

local SevereLib = {}

-- Library configuration
SevereLib.Config = {
    ESP = {
        Enabled = true,
        MaxDistance = 2000,
        ShowDistance = true,
        ShowName = true,
        ShowHealth = true,
        ShowTeam = true,
        BoxEnabled = true,
        BoxType = "2D", -- "2D", "3D", "Corners"
        BoxColor = {255, 255, 255},
        BoxThickness = 1,
        TextSize = 14,
        TextFont = 2, -- 0: UI, 1: System, 2: Plex, 3: Monospace, 4: Bold
        TracerEnabled = false,
        TracerOrigin = "Bottom", -- "Bottom", "Center", "Mouse"
        TracerThickness = 1,
    },
    Aimbot = {
        Enabled = false,
        TargetPart = "Head", -- "Head", "Torso", "HumanoidRootPart"
        Sensitivity = 0.5,
        MaxDistance = 500,
        TeamCheck = true,
        VisibilityCheck = true,
        TriggerKey = "MouseButton2",
        FOV = 400,
        ShowFOV = true,
        FOVColor = {255, 255, 255},
        FOVThickness = 1,
    },
    Debug = {
        Enabled = true,
        ShowFPS = true,
        LogLevel = 3, -- 1: Error, 2: Warning, 3: Info, 4: Debug
        SaveLogs = false,
        LogFilePath = "SevereLib.log"
    },
    Advanced = {
        ValidationRetries = 3,
        ValidationDelay = 0.2, -- seconds
        RefreshRate = 1/30, -- seconds
        ObjectCheckInterval = 1, -- seconds
        SafeMode = true -- Use pcall around all API calls
    }
}

-- Internal variables
local Services = {}
local Utils = {}
local Drawing = Drawing
local Players = {}
local Camera = nil
local LocalPlayer = nil
local RunService = nil
local UserInputService = nil
local Workspace = nil

local EspObjects = {}
local AimbotData = {
    Target = nil,
    FOVCircle = nil,
}
local DebugInfo = {
    StartTime = os.time(),
    FrameCount = 0,
    LastFPS = 0,
    LastFPSUpdate = os.clock(),
    ErrorCount = 0,
    WarningCount = 0,
}

-- Debug functions
local function LogMessage(level, message)
    local levels = {
        [1] = "ERROR",
        [2] = "WARNING",
        [3] = "INFO",
        [4] = "DEBUG"
    }
    
    if level <= SevereLib.Config.Debug.LogLevel then
        local timestamp = os.date("%H:%M:%S")
        local formatted = string.format("[%s][SevereLib][%s] %s", timestamp, levels[level], message)
        print(formatted)
        
        if level == 1 then DebugInfo.ErrorCount = DebugInfo.ErrorCount + 1 end
        if level == 2 then DebugInfo.WarningCount = DebugInfo.WarningCount + 1 end
        
        if SevereLib.Config.Debug.SaveLogs then
            -- Implement log saving
        end
    end
end

local function LogError(message) LogMessage(1, message) end
local function LogWarning(message) LogMessage(2, message) end
local function LogInfo(message) LogMessage(3, message) end
local function LogDebug(message) LogMessage(4, message) end

-- Safe API wrappers with validation
local function SafeGetService(serviceName)
    local success, result = pcall(function()
        return game:GetService(serviceName)
    end)
    
    if success then
        return result
    else
        LogError("Failed to get service: " .. serviceName)
        return nil
    end
end

local function IsValidInstance(obj)
    if obj == nil then return false end
    
    local success = pcall(function()
        -- Just accessing a property will throw if the instance is invalid
        local _ = obj.ClassName
    end)
    
    return success
end

local function SafeWaitForChild(parent, childName, timeout)
    timeout = timeout or 5
    
    if not IsValidInstance(parent) then
        LogError("SafeWaitForChild: Invalid parent")
        return nil
    end
    
    local startTime = os.clock()
    local child = nil
    
    -- Try the standard WaitForChild first
    local success, result = pcall(function()
        return parent:WaitForChild(childName, timeout)
    end)
    
    if success and result then
        return result
    end
    
    -- Fallback to polling if WaitForChild fails
    while os.clock() - startTime < timeout do
        child = parent:FindFirstChild(childName)
        if child then 
            return child 
        end
        wait(0.1)
    end
    
    LogWarning("SafeWaitForChild: Failed to find " .. childName)
    return nil
end

local function SafeFindFirstChild(parent, childName)
    if not IsValidInstance(parent) then
        return nil
    end
    
    local success, result = pcall(function()
        return parent:FindFirstChild(childName)
    end)
    
    if success then
        return result
    else
        return nil
    end
end

local function SafeGetChildren(parent)
    if not IsValidInstance(parent) then
        return {}
    end
    
    local success, children = pcall(function()
        return parent:GetChildren()
    end)
    
    if success then
        return children
    else
        LogWarning("SafeGetChildren failed: " .. tostring(parent))
        return {}
    end
end

local function SafeGetPosition(obj)
    if not IsValidInstance(obj) then
        return Vector3.new(0, 0, 0)
    end
    
    local success, position = pcall(function()
        if obj:IsA("BasePart") then
            return obj.Position
        elseif obj:IsA("Model") and obj.PrimaryPart then
            return obj.PrimaryPart.Position
        elseif obj:IsA("Model") then
            -- Try to find HumanoidRootPart or other primary parts
            local hrp = obj:FindFirstChild("HumanoidRootPart")
            local torso = obj:FindFirstChild("Torso") or obj:FindFirstChild("UpperTorso")
            local head = obj:FindFirstChild("Head")
            
            if hrp and hrp:IsA("BasePart") then
                return hrp.Position
            elseif torso and torso:IsA("BasePart") then
                return torso.Position
            elseif head and head:IsA("BasePart") then
                return head.Position
            end
            
            -- Last resort: average position of all parts
            local parts = {}
            for _, child in ipairs(SafeGetChildren(obj)) do
                if child:IsA("BasePart") then
                    table.insert(parts, child)
                end
            end
            
            if #parts > 0 then
                local sum = Vector3.new(0, 0, 0)
                for _, part in ipairs(parts) do
                    sum = sum + part.Position
                end
                return sum / #parts
            end
        end
        
        return Vector3.new(0, 0, 0)
    end)
    
    if success then
        return position
    else
        return Vector3.new(0, 0, 0)
    end
end

local function SafeIsDescendantOf(obj, ancestor)
    if not IsValidInstance(obj) or not IsValidInstance(ancestor) then
        return false
    end
    
    local success, result = pcall(function()
        return obj:IsDescendantOf(ancestor)
    end)
    
    if success then
        return result
    else
        return false
    end
end

local function SafeWorldToScreenPoint(worldPoint)
    if not IsValidInstance(Camera) then
        return Vector2.new(0, 0), false
    end
    
    local success, result, onScreen = pcall(function()
        return Camera:WorldToScreenPoint(worldPoint)
    end)
    
    if success then
        return Vector2.new(result.X, result.Y), onScreen
    else
        return Vector2.new(0, 0), false
    end
end

local function SafeGetPlayerFromCharacter(character)
    if not IsValidInstance(character) then
        return nil
    end
    
    local success, player = pcall(function()
        return Players:GetPlayerFromCharacter(character)
    end)
    
    if success then
        return player
    else
        return nil
    end
end

local function SafeGetHumanoid(character)
    if not IsValidInstance(character) then
        return nil
    end
    
    local humanoid = SafeFindFirstChild(character, "Humanoid")
    if IsValidInstance(humanoid) then
        return humanoid
    end
    
    return nil
end

local function SafeGetHealth(humanoid)
    if not IsValidInstance(humanoid) then
        return 0, 0
    end
    
    local success, health, maxHealth = pcall(function()
        return humanoid.Health, humanoid.MaxHealth
    end)
    
    if success then
        return health, maxHealth
    else
        return 0, 0
    end
end

-- Extended validation functions for specific object types
local function IsValidCharacter(char)
    if not IsValidInstance(char) then return false end
    
    local humanoid = SafeFindFirstChild(char, "Humanoid")
    local rootPart = SafeFindFirstChild(char, "HumanoidRootPart")
    
    return IsValidInstance(humanoid) and IsValidInstance(rootPart)
end

local function IsPlayerAlive(player)
    if not IsValidInstance(player) then return false end
    
    local success, result = pcall(function()
        local char = player.Character
        if not IsValidCharacter(char) then return false end
        
        local humanoid = char:FindFirstChild("Humanoid")
        return humanoid and humanoid.Health > 0
    end)
    
    return success and result
end

local function IsValidTeam(team)
    if not IsValidInstance(team) then return false end
    
    local success = pcall(function()
        local _ = team.TeamColor
    end)
    
    return success
end

-- Drawing utilities
local function CreateDrawingObject(type, properties)
    local obj = Drawing.new(type)
    
    for prop, value in pairs(properties) do
        obj[prop] = value
    end
    
    return obj
end

local function UpdateDrawingObject(obj, properties)
    if not obj then return end
    
    for prop, value in pairs(properties) do
        obj[prop] = value
    end
end

local function RemoveDrawingObject(obj)
    if obj then
        obj.Visible = false
        obj:Remove()
    end
end

-- Core ESP functionality
local function CreateESPForPlayer(player)
    if not IsValidInstance(player) then return end
    
    local espData = {
        Player = player,
        Character = nil,
        Box = CreateDrawingObject("Square", {
            Visible = false,
            Color = Color3.fromRGB(unpack(SevereLib.Config.ESP.BoxColor)),
            Thickness = SevereLib.Config.ESP.BoxThickness,
            Filled = false,
            Transparency = 1
        }),
        Name = CreateDrawingObject("Text", {
            Visible = false,
            Color = Color3.fromRGB(255, 255, 255),
            Size = SevereLib.Config.ESP.TextSize,
            Font = SevereLib.Config.ESP.TextFont,
            Center = true,
            Outline = true,
            Transparency = 1
        }),
        Distance = CreateDrawingObject("Text", {
            Visible = false,
            Color = Color3.fromRGB(255, 255, 255),
            Size = SevereLib.Config.ESP.TextSize,
            Font = SevereLib.Config.ESP.TextFont,
            Center = true,
            Outline = true,
            Transparency = 1
        }),
        Tracer = CreateDrawingObject("Line", {
            Visible = false,
            Color = Color3.fromRGB(255, 255, 255),
            Thickness = SevereLib.Config.ESP.TracerThickness,
            Transparency = 1
        }),
        HealthBar = CreateDrawingObject("Square", {
            Visible = false,
            Color = Color3.fromRGB(0, 255, 0),
            Thickness = 1,
            Filled = true,
            Transparency = 1
        }),
        HealthBarOutline = CreateDrawingObject("Square", {
            Visible = false,
            Color = Color3.fromRGB(0, 0, 0),
            Thickness = 1,
            Filled = false,
            Transparency = 1
        }),
        Corners = {
            TopLeft = CreateDrawingObject("Line", {
                Visible = false,
                Color = Color3.fromRGB(255, 255, 255),
                Thickness = SevereLib.Config.ESP.BoxThickness,
                Transparency = 1
            }),
            TopRight = CreateDrawingObject("Line", {
                Visible = false,
                Color = Color3.fromRGB(255, 255, 255),
                Thickness = SevereLib.Config.ESP.BoxThickness,
                Transparency = 1
            }),
            BottomLeft = CreateDrawingObject("Line", {
                Visible = false,
                Color = Color3.fromRGB(255, 255, 255),
                Thickness = SevereLib.Config.ESP.BoxThickness,
                Transparency = 1
            }),
            BottomRight = CreateDrawingObject("Line", {
                Visible = false,
                Color = Color3.fromRGB(255, 255, 255),
                Thickness = SevereLib.Config.ESP.BoxThickness,
                Transparency = 1
            }),
        },
        LastUpdate = os.clock(),
        IsValid = true
    }
    
    EspObjects[player] = espData
end

local function RemoveESPForPlayer(player)
    local espData = EspObjects[player]
    if not espData then return end
    
    RemoveDrawingObject(espData.Box)
    RemoveDrawingObject(espData.Name)
    RemoveDrawingObject(espData.Distance)
    RemoveDrawingObject(espData.Tracer)
    RemoveDrawingObject(espData.HealthBar)
    RemoveDrawingObject(espData.HealthBarOutline)
    
    RemoveDrawingObject(espData.Corners.TopLeft)
    RemoveDrawingObject(espData.Corners.TopRight)
    RemoveDrawingObject(espData.Corners.BottomLeft)
    RemoveDrawingObject(espData.Corners.BottomRight)
    
    EspObjects[player] = nil
end

local function UpdateESP()
    if not SevereLib.Config.ESP.Enabled then
        for player, espData in pairs(EspObjects) do
            espData.Box.Visible = false
            espData.Name.Visible = false
            espData.Distance.Visible = false
            espData.Tracer.Visible = false
            espData.HealthBar.Visible = false
            espData.HealthBarOutline.Visible = false
            
            espData.Corners.TopLeft.Visible = false
            espData.Corners.TopRight.Visible = false
            espData.Corners.BottomLeft.Visible = false
            espData.Corners.BottomRight.Visible = false
        end
        return
    end

    local cameraPos = SafeGetPosition(Camera)
    local viewportSize = Camera.ViewportSize
    
    for player, espData in pairs(EspObjects) do
        if not IsValidInstance(player) then
            RemoveESPForPlayer(player)
            continue
        end
        
        -- Get character and check validity
        local character = player.Character
        espData.Character = character
        
        if not IsValidCharacter(character) or not IsPlayerAlive(player) then
            espData.Box.Visible = false
            espData.Name.Visible = false
            espData.Distance.Visible = false
            espData.Tracer.Visible = false
            espData.HealthBar.Visible = false
            espData.HealthBarOutline.Visible = false
            
            espData.Corners.TopLeft.Visible = false
            espData.Corners.TopRight.Visible = false
            espData.Corners.BottomLeft.Visible = false
            espData.Corners.BottomRight.Visible = false
            
            continue
        end
        
        -- Check if the player is on the same team as the local player
        local teamCheck = true
        if SevereLib.Config.ESP.TeamCheck and IsValidInstance(LocalPlayer) then
            local playerTeam = player.Team
            local localTeam = LocalPlayer.Team
            
            if IsValidTeam(playerTeam) and IsValidTeam(localTeam) and playerTeam == localTeam then
                teamCheck = false
            end
        end
        
        if not teamCheck and player ~= LocalPlayer then
            espData.Box.Visible = false
            espData.Name.Visible = false
            espData.Distance.Visible = false
            espData.Tracer.Visible = false
            espData.HealthBar.Visible = false
            espData.HealthBarOutline.Visible = false
            
            espData.Corners.TopLeft.Visible = false
            espData.Corners.TopRight.Visible = false
            espData.Corners.BottomLeft.Visible = false
            espData.Corners.BottomRight.Visible = false
            
            continue
        end
        
        -- Ignore local player for ESP
        if player == LocalPlayer then
            espData.Box.Visible = false
            espData.Name.Visible = false
            espData.Distance.Visible = false
            espData.Tracer.Visible = false
            espData.HealthBar.Visible = false
            espData.HealthBarOutline.Visible = false
            
            espData.Corners.TopLeft.Visible = false
            espData.Corners.TopRight.Visible = false
            espData.Corners.BottomLeft.Visible = false
            espData.Corners.BottomRight.Visible = false
            
            continue
        end
        
        -- Get positions for box calculation
        local rootPart = SafeFindFirstChild(character, "HumanoidRootPart")
        local head = SafeFindFirstChild(character, "Head")
        
        if not IsValidInstance(rootPart) or not IsValidInstance(head) then
            continue
        end
        
        local rootPos = SafeGetPosition(rootPart)
        local distance = (rootPos - cameraPos).Magnitude
        
        -- Check if the player is within the distance limit
        if distance > SevereLib.Config.ESP.MaxDistance then
            espData.Box.Visible = false
            espData.Name.Visible = false
            espData.Distance.Visible = false
            espData.Tracer.Visible = false
            espData.HealthBar.Visible = false
            espData.HealthBarOutline.Visible = false
            
            espData.Corners.TopLeft.Visible = false
            espData.Corners.TopRight.Visible = false
            espData.Corners.BottomLeft.Visible = false
            espData.Corners.BottomRight.Visible = false
            
            continue
        end
        
        -- Calculate 3D positions for the box
        local topPos = rootPos + Vector3.new(0, 3, 0)
        local bottomPos = rootPos - Vector3.new(0, 3, 0)
        
        -- Convert 3D positions to screen positions
        local topScreen, topOnScreen = SafeWorldToScreenPoint(topPos)
        local bottomScreen, bottomOnScreen = SafeWorldToScreenPoint(bottomPos)
        
        -- Check if the player is on screen
        if not (topOnScreen or bottomOnScreen) then
            espData.Box.Visible = false
            espData.Name.Visible = false
            espData.Distance.Visible = false
            espData.Tracer.Visible = false
            espData.HealthBar.Visible = false
            espData.HealthBarOutline.Visible = false
            
            espData.Corners.TopLeft.Visible = false
            espData.Corners.TopRight.Visible = false
            espData.Corners.BottomLeft.Visible = false
            espData.Corners.BottomRight.Visible = false
            
            continue
        end
        
        -- Calculate box dimensions
        local height = math.abs(topScreen.Y - bottomScreen.Y)
        local width = height * 0.6
        local boxX = topScreen.X - width / 2
        local boxY = topScreen.Y
        
        -- Update box
        if SevereLib.Config.ESP.BoxEnabled then
            if SevereLib.Config.ESP.BoxType == "2D" then
                espData.Box.Visible = true
                espData.Box.Size = Vector2.new(width, height)
                espData.Box.Position = Vector2.new(boxX, boxY)
                
                espData.Corners.TopLeft.Visible = false
                espData.Corners.TopRight.Visible = false
                espData.Corners.BottomLeft.Visible = false
                espData.Corners.BottomRight.Visible = false
            elseif SevereLib.Config.ESP.BoxType == "Corners" then
                espData.Box.Visible = false
                
                -- Corner calculations
                local cornerSize = math.min(width, height) * 0.2
                
                -- Top left corner
                espData.Corners.TopLeft.Visible = true
                espData.Corners.TopLeft.From = Vector2.new(boxX, boxY)
                espData.Corners.TopLeft.To = Vector2.new(boxX + cornerSize, boxY)
                
                -- Top right corner
                espData.Corners.TopRight.Visible = true
                espData.Corners.TopRight.From = Vector2.new(boxX + width, boxY)
                espData.Corners.TopRight.To = Vector2.new(boxX + width - cornerSize, boxY)
                
                -- Bottom left corner
                espData.Corners.BottomLeft.Visible = true
                espData.Corners.BottomLeft.From = Vector2.new(boxX, boxY + height)
                espData.Corners.BottomLeft.To = Vector2.new(boxX + cornerSize, boxY + height)
                
                -- Bottom right corner
                espData.Corners.BottomRight.Visible = true
                espData.Corners.BottomRight.From = Vector2.new(boxX + width, boxY + height)
                espData.Corners.BottomRight.To = Vector2.new(boxX + width - cornerSize, boxY + height)
            else
                espData.Box.Visible = false
                
                espData.Corners.TopLeft.Visible = false
                espData.Corners.TopRight.Visible = false
                espData.Corners.BottomLeft.Visible = false
                espData.Corners.BottomRight.Visible = false
            end
        else
            espData.Box.Visible = false
            
            espData.Corners.TopLeft.Visible = false
            espData.Corners.TopRight.Visible = false
            espData.Corners.BottomLeft.Visible = false
            espData.Corners.BottomRight.Visible = false
        end
        
        -- Update name
        if SevereLib.Config.ESP.ShowName then
            espData.Name.Visible = true
            espData.Name.Text = player.Name
            espData.Name.Position = Vector2.new(boxX + width / 2, boxY - 20)
            
            -- Set color based on team
            local nameColor = Color3.fromRGB(255, 255, 255)
            if IsValidTeam(player.Team) then
                nameColor = player.TeamColor.Color
            end
            
            espData.Name.Color = nameColor
        else
            espData.Name.Visible = false
        end
        
        -- Update distance
        if SevereLib.Config.ESP.ShowDistance then
            espData.Distance.Visible = true
            espData.Distance.Text = math.floor(distance) .. "m"
            espData.Distance.Position = Vector2.new(boxX + width / 2, boxY + height + 5)
        else
            espData.Distance.Visible = false
        end
        
        -- Update tracer
        if SevereLib.Config.ESP.TracerEnabled then
            espData.Tracer.Visible = true
            
            local tracerOrigin = Vector2.new(viewportSize.X / 2, viewportSize.Y)
            if SevereLib.Config.ESP.TracerOrigin == "Center" then
                tracerOrigin = Vector2.new(viewportSize.X / 2, viewportSize.Y / 2)
            elseif SevereLib.Config.ESP.TracerOrigin == "Mouse" then
                tracerOrigin = UserInputService:GetMouseLocation()
            end
            
            espData.Tracer.From = tracerOrigin
            espData.Tracer.To = Vector2.new(boxX + width / 2, boxY + height)
        else
            espData.Tracer.Visible = false
        end
        
        -- Update health bar
        if SevereLib.Config.ESP.ShowHealth then
            local humanoid = SafeGetHumanoid(character)
            if humanoid then
                local health, maxHealth = SafeGetHealth(humanoid)
                local healthPercent = math.clamp(health / maxHealth, 0, 1)
                
                espData.HealthBar.Visible = true
                espData.HealthBarOutline.Visible = true
                
                local barWidth = 4
                local barHeight = height
                local barX = boxX - barWidth * 2
                
                espData.HealthBarOutline.Size = Vector2.new(barWidth, barHeight)
                espData.HealthBarOutline.Position = Vector2.new(barX, boxY)
                
                espData.HealthBar.Size = Vector2.new(barWidth, barHeight * healthPercent)
                espData.HealthBar.Position = Vector2.new(barX, boxY + barHeight * (1 - healthPercent))
                
                -- Set color based on health
                local r = math.floor(255 * (1 - healthPercent))
                local g = math.floor(255 * healthPercent)
                espData.HealthBar.Color = Color3.fromRGB(r, g, 0)
            else
                espData.HealthBar.Visible = false
                espData.HealthBarOutline.Visible = false
            end
        else
            espData.HealthBar.Visible = false
            espData.HealthBarOutline.Visible = false
        end
        
        espData.LastUpdate = os.clock()
    end
end

-- Initialization functions
local function InitializeServices()
    Services.RunService = SafeGetService("RunService")
    Services.UserInputService = SafeGetService("UserInputService")
    Services.Players = SafeGetService("Players")
    Services.Workspace = SafeGetService("Workspace")
    
    -- Store references to commonly used services
    RunService = Services.RunService
    UserInputService = Services.UserInputService
    Players = Services.Players
    Workspace = Services.Workspace
    
    -- Initialize camera and local player
    Camera = Workspace.CurrentCamera
    LocalPlayer = Players.LocalPlayer
    
    if not Camera then
        LogError("Failed to get camera")
    end
    
    if not LocalPlayer then
        LogError("Failed to get local player")
    end
end

local function SetupConnections()
    -- Player connections
    Players.PlayerAdded:Connect(function(player)
        CreateESPForPlayer(player)
    end)
    
    Players.PlayerRemoving:Connect(function(player)
        RemoveESPForPlayer(player)
    end)
    
    -- Camera connection
    if Workspace then
        Workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
            Camera = Workspace.CurrentCamera
        end)
    end
    
    -- Initialize ESP for all players
    for _, player in ipairs(Players:GetPlayers()) do
        CreateESPForPlayer(player)
    end
    
    -- Main update loop
    RunService.RenderStepped:Connect(function(deltaTime)
        -- Update FPS counter
        DebugInfo.FrameCount = DebugInfo.FrameCount + 1
        
        local currentTime = os.clock()
        if currentTime - DebugInfo.LastFPSUpdate >= 1 then
            DebugInfo.LastFPS = DebugInfo.FrameCount
            DebugInfo.FrameCount = 0
            DebugInfo.LastFPSUpdate = currentTime
        end
        
        -- Update ESP
        UpdateESP()
        
        -- Update Aimbot
        -- UpdateAimbot() -- Not implemented yet
    end)
end

-- Public API functions
function SevereLib.Initialize()
    LogInfo("Initializing SevereLib...")
    
    -- Initialize services and connections
    InitializeServices()
    SetupConnections()
    
    -- Create Aimbot FOV circle
    AimbotData.FOVCircle = CreateDrawingObject("Circle", {
        Visible = SevereLib.Config.Aimbot.ShowFOV,
        Color = Color3.fromRGB(unpack(SevereLib.Config.Aimbot.FOVColor)),
        Thickness = SevereLib.Config.Aimbot.FOVThickness,
        NumSides = 36,
        Radius = SevereLib.Config.Aimbot.FOV,
        Filled = false,
        Transparency = 1
    })
    
    LogInfo("SevereLib initialized successfully!")
    return true
end

function SevereLib.Uninitialize()
    LogInfo("Uninitializing SevereLib...")
    
    -- Remove all ESP objects
    for player, _ in pairs(EspObjects) do
        RemoveESPForPlayer(player)
    end
    
    -- Remove aimbot objects
    if AimbotData.FOVCircle then
        RemoveDrawingObject(AimbotData.FOVCircle)
    end
    
    LogInfo("SevereLib uninitialized successfully!")
    
    -- Clear references
    EspObjects = {}
    AimbotData = {
        Target = nil,
        FOVCircle = nil,
    }
    
    return true
end

function SevereLib.ToggleESP(enabled)
    if enabled ~= nil then
        SevereLib.Config.ESP.Enabled = enabled
    else
        SevereLib.Config.ESP.Enabled = not SevereLib.Config.ESP.Enabled
    end
    
    return SevereLib.Config.ESP.Enabled
end

function SevereLib.ToggleAimbot(enabled)
    if enabled ~= nil then
        SevereLib.Config.Aimbot.Enabled = enabled
    else
        SevereLib.Config.Aimbot.Enabled = not SevereLib.Config.Aimbot.Enabled
    end
    
    return SevereLib.Config.Aimbot.Enabled
end

function SevereLib.GetDebugInfo()
    return {
        FPS = DebugInfo.LastFPS,
        RunTime = os.time() - DebugInfo.StartTime,
        ErrorCount = DebugInfo.ErrorCount,
        WarningCount = DebugInfo.WarningCount,
        ESPObjectCount = #EspObjects,
        ConfigSettings = SevereLib.Config
    }
end

function SevereLib.IsValid(obj)
    return IsValidInstance(obj)
end

function SevereLib.SafeGetPosition(obj)
    return SafeGetPosition(obj)
end

function SevereLib.SafeGetChildren(parent)
    return SafeGetChildren(parent)
end

function SevereLib.SafeFindFirstChild(parent, childName)
    return SafeFindFirstChild(parent, childName)
end

function SevereLib.UpdateConfig(newConfig)
    -- Deep merge the configs
    for category, settings in pairs(newConfig) do
        if SevereLib.Config[category] then
            for setting, value in pairs(settings) do
                SevereLib.Config[category][setting] = value
            end
        end
    end
end

-- Return the library
return SevereLib
