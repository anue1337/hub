local sgl_loader_url = "https://raw.githubusercontent.com/anue1337/hub/refs/heads/main/test"
local success_get, script_content = pcall(game.HttpGet, game, sgl_loader_url)

if success_get and script_content then
    local success_load, sgl_main_func = pcall(loadstring, script_content)
    if success_load and type(sgl_main_func) == "function" then
        local success_run, result = pcall(sgl_main_func)
        if success_run then
            print("SGL Addon loaded successfully.")
            -- _G.sgl should now be available
        else
            warn("SGL Addon: Error during execution: ", result)
        end
    else
        warn("SGL Addon: Failed to loadstring script: ", sgl_main_func)
    end
else
    warn("SGL Addon: Failed to HttpGet script from URL: ", script_content)
end

-- SGL Demo UI using kingbob's UI Library
-- IMPORTANT: Ensure severe_addon_lib.lua (populating _G.sgl) is loaded BEFORE this script.

if not _G.sgl or not _G.sgl.print then
    warn("SGL (_G.sgl) not found or incomplete. Please load severe_addon_lib.lua first.")
    return
end

local sgl = _G.sgl

-- Load Kingbob's UI Library
local kingbob_ui_lib_url = "https://raw.githubusercontent.com/DCHARLESAKAMRGREEN/Severe-Luas/refs/heads/main/Severe%20UI%20Library.lua"
local success, Library = pcall(function()
    return loadstring(game:HttpGet(kingbob_ui_lib_url))()
end)

if not success or not Library then
    sgl.error("[SGL Demo] Failed to load Kingbob\'s UI Library from: " .. kingbob_ui_lib_url)
    sgl.error("[SGL Demo] Error: ", Library) -- Library here would be the error message
    return
end

sgl.print("[SGL Demo] Kingbob UI Library loaded.")

-- Demo Configuration Table
local demo_config = {
    rainbow_enabled = true,
    esp = {
        enabled = true,
        healthbar = true,
        nametag = true,
        distance = true,
        tracer = true,
        box_type_str = "Corners", -- "Corners", "2D Box", "3D Box"
        tracer_type_str = "Near Bottom", -- "Near Bottom", "Bottom", "Top", "Mouse"
        color = {255, 255, 255} -- Default ESP color if rainbow is off
    },
    esp_keybind = "LeftAlt" -- Example keybind for ESP toggle (uses string names for keys, check Severe key names)
}

local box_type_map = {["Corners"] = 1, ["2D Box"] = 2, ["3D Box"] = 3}
local tracer_type_map = {["Near Bottom"] = 1, ["Bottom"] = 2, ["Top"] = 3, ["Mouse"] = 4}

-- Create the UI Window
local UI = Library:Create({
    Name = "SGL Demo Controls"
})

if not UI then
    sgl.error("[SGL Demo] Failed to create UI Window.")
    return
end

-- Tab: General
local general_tab = UI:Tab({ Name = "General" })
if general_tab then
    local console_section = general_tab:Section({ Name = "SGL Console", Side = "Left" })
    if console_section then
        console_section:Toggle({
            Name = "Console Visible",
            Default = sgl.Open, -- Initial state from SGL
            Tooltip = "Show or hide the SGL debug console",
            Callback = function(state)
                sgl.Open = state
                sgl.print("[SGL Demo] Console visibility set to: " .. tostring(state))
            end
        })
        console_section:Button({
            Name = "Clear SGL Logs",
            Tooltip = "Clears all messages from the SGL console",
            Callback = function()
                sgl.StoredLogs = {}
                sgl.print("[SGL Demo] SGL console logs cleared.")
            end
        })
        console_section:Button({
            Name = "Print Test to SGL",
            Tooltip = "Prints a test message to the SGL console",
            Callback = function()
                sgl.print("[SGL Test Message] Time: " .. tostring(tick()), {nested = {key = "value"}})
            end
        })
    end

    local rainbow_section = general_tab:Section({ Name = "Rainbow Effect", Side = "Right" })
    if rainbow_section then
        rainbow_section:Toggle({
            Name = "Enable Rainbow Tick",
            Default = demo_config.rainbow_enabled,
            Tooltip = "Enable to make certain elements use sgl.CurrentRainbowColor",
            Callback = function(state)
                demo_config.rainbow_enabled = state
                sgl.print("[SGL Demo] Rainbow tick set to: " .. tostring(state))
            end
        })
        -- TODO: Display current rainbow color (e.g., as text or color patch if UI lib supports)
    end
else
    sgl.error("[SGL Demo] Failed to create General tab.")
end

-- Tab: ESP Settings
local esp_tab = UI:Tab({ Name = "ESP Settings" })
if esp_tab then
    local esp_global_section = esp_tab:Section({ Name = "Global ESP", Side = "Left" })
    if esp_global_section then
        local esp_toggle = esp_global_section:Toggle({
            Name = "Enable Player ESP",
            Default = demo_config.esp.enabled,
            Tooltip = "Master toggle for drawing ESP on players",
            Callback = function(state)
                demo_config.esp.enabled = state
                sgl.print("[SGL Demo] Player ESP set to: " .. tostring(state))
            end
        })
        if esp_toggle and esp_toggle.Keybind then -- Check if Keybind method exists
            esp_toggle:Keybind({
                Default = demo_config.esp_keybind, -- Key name as string (e.g., "LeftAlt", "F1")
                Callback = function(key_state) -- state might be key name or true/false
                    -- Kingbob UI keybind callback for toggles typically changes the toggle state directly.
                    -- The toggle's main callback will then fire.
                    -- If it provides state, you can use it: demo_config.esp.enabled = new_state_from_keybind
                    sgl.print("[SGL Demo] ESP Toggle Keybind pressed. New state: " .. tostring(demo_config.esp.enabled))
                end
            })
        else
             sgl.print("[SGL Demo] ESP Toggle Keybind method not found on toggle object.")
        end
    end

    local visuals_section = esp_tab:Section({ Name = "Visuals", Side = "Left" })
    if visuals_section then
        visuals_section:Toggle({ Name = "Healthbar", Default = demo_config.esp.healthbar, Tooltip = "Show health bar", Callback = function(s) demo_config.esp.healthbar = s end })
        visuals_section:Toggle({ Name = "Nametag", Default = demo_config.esp.nametag, Tooltip = "Show player name", Callback = function(s) demo_config.esp.nametag = s end })
        visuals_section:Toggle({ Name = "Distance", Default = demo_config.esp.distance, Tooltip = "Show distance to player", Callback = function(s) demo_config.esp.distance = s end })
    end

    local box_style_section = esp_tab:Section({ Name = "Box Style", Side = "Right" })
    if box_style_section then
        box_style_section:Dropdown({
            Name = "Box Type",
            Default = demo_config.esp.box_type_str,
            Options = {"Corners", "2D Box", "3D Box"},
            Tooltip = "Select the ESP box style",
            Callback = function(selected)
                demo_config.esp.box_type_str = selected
                sgl.print("[SGL Demo] ESP Box Type set to: " .. selected)
            end
        })
    end

    local tracer_section = esp_tab:Section({ Name = "Tracer", Side = "Right" })
    if tracer_section then
        tracer_section:Toggle({ Name = "Tracer", Default = demo_config.esp.tracer, Tooltip = "Draw tracer line to players", Callback = function(s) demo_config.esp.tracer = s end })
        tracer_section:Dropdown({
            Name = "Tracer Type",
            Default = demo_config.esp.tracer_type_str,
            Options = {"Near Bottom", "Bottom", "Top", "Mouse"},
            Tooltip = "Select tracer line origin",
            Callback = function(selected)
                demo_config.esp.tracer_type_str = selected
                sgl.print("[SGL Demo] ESP Tracer Type set to: " .. selected)
            end
        })
    end
else
    sgl.error("[SGL Demo] Failed to create ESP Settings tab.")
end

-- Tab: Utilities
local utils_tab = UI:Tab({ Name = "Utilities" })
if utils_tab then
    local info_section = utils_tab:Section({ Name = "Info Dump", Side = "Left" })
    if info_section then
        info_section:Button({ Name = "Log LocalPlayer Name", Tooltip = "Prints local player name to SGL console",
            Callback = function() sgl.print("[SGL Demo] LocalPlayer Name: ", sgl.GetLocalPlayerName()) end
        })
        info_section:Button({ Name = "Log LP Character Descendants", Tooltip = "Prints LocalPlayer character descendants to SGL console",
            Callback = function()
                if LocalPlayerCharacter then 
                    sgl.print("[SGL Demo] LP Character Descendants: ", sgl.GetDescendants(LocalPlayerCharacter))
                else sgl.print("[SGL Demo] LocalPlayerCharacter not found.") end
            end
        })
    end
    local targeting_section = utils_tab:Section({ Name = "Targeting Utils", Side = "Right" })
    if targeting_section then
        targeting_section:Button({ Name = "Log Closest Part (Self)", Tooltip = "Finds and logs closest part on your own character",
            Callback = function()
                if LocalPlayerCharacter then
                    local part = sgl.GetClosestPartToPlayer(LocalPlayerCharacter)
                    sgl.print("[SGL Demo] Closest part on self: ", (part and getname(part) or "None"))
                else sgl.print("[SGL Demo] LocalPlayerCharacter not found.") end
            end
        })
    end
else
    sgl.error("[SGL Demo] Failed to create Utilities tab.")
end

sgl.print("[SGL Demo] UI Setup Complete.")

-- ESP Drawing Management
local active_esp_drawings = {} -- Stores { player_name = {drawing_obj1, ...}, ... }

-- Main Update Loop
local function on_update()
    -- Update SGL core features
    sgl.UpdateScreenDimensions()
    if demo_config.rainbow_enabled then
        sgl.RainbowTick()
    end
    sgl.ShowConsole() -- Render SGL's own console

    -- Clear previous ESP drawings
    for player_name_key, obj_list in pairs(active_esp_drawings) do
        for _, obj in ipairs(obj_list) do
            if obj and obj.Remove then -- Check if object exists and has Remove method
                 pcall(obj.Remove, obj) -- Use pcall for safety with drawing objects
            end
        end
    end
    active_esp_drawings = {}

    -- Player ESP Logic
    if demo_config.esp.enabled and Players and LocalPlayer then
        local esp_color_to_use = demo_config.rainbow_enabled and sgl.CurrentRainbowColor or demo_config.esp.color
        local all_players = getchildren(Players)
        if all_players then
            for _, player_obj in ipairs(all_players) do
                if player_obj ~= LocalPlayer then
                    local char = getcharacter(player_obj)
                    if char then
                        local player_name = getname(player_obj) or tostring(player_obj) -- Fallback name
                        local esp_params = {
                            Target = char,
                            Color = esp_color_to_use,
                            Healthbar = demo_config.esp.healthbar,
                            Nametag = demo_config.esp.nametag,
                            Distance = demo_config.esp.distance,
                            Tracer = demo_config.esp.tracer,
                            BoxType = box_type_map[demo_config.esp.box_type_str] or 1,
                            TracerType = tracer_type_map[demo_config.esp.tracer_type_str] or 1
                        }
                        local new_drawings = sgl.BoxESP(esp_params)
                        if #new_drawings > 0 then
                           active_esp_drawings[player_name] = new_drawings
                        end
                    end
                end
            end
        end
    end
end

-- Run the update loop
-- Severe might have a RenderStepped or Heartbeat equivalent.
-- Using task.spawn with wait() for a generic loop.
if spawn then
    spawn(function()
        sgl.print("[SGL Demo] Update loop started.")
        while wait(0.016) do -- Aim for ~60 FPS update rate
            local success_update, err_update = pcall(on_update)
            if not success_update then
                sgl.error("[SGL Demo] Error in on_update loop: ", err_update)
                -- Potentially stop the loop or add a cooldown if it errors repeatedly
                wait(1) -- Wait a bit longer if there was an error
            end
        end
    end)
else
    sgl.error("[SGL Demo] spawn not available. Cannot start update loop.")
end

-- Optional: Function to unload the UI if script is stopped or re-run
-- function OnScriptClose() -- if Severe has such a callback
--    if UI and UI.Unload then UI:Unload() end
--    sgl.print("[SGL Demo] UI Unloaded.")
--    -- Also clear any persistent drawings if not handled by UI:Unload
--    for player_name_key, obj_list in pairs(active_esp_drawings) do
--        for _, obj in ipairs(obj_list) do sgl.internal_RemoveDrawing(obj) end
--    end
--    active_esp_drawings = {}
-- end

sgl.print("[SGL Demo] Demo script initialized. UI should be visible.") 
