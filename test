--// Severe Library Demo Script //--
-- Demonstração da biblioteca corrigida

-- Carregar biblioteca
local slib = loadstring(httpget("https://raw.githubusercontent.com/anue1337/hub/refs/heads/main/test"))()

-- Carregar UI Library de KingBob
local kingbob = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()

-- Criar UI
local window = kingbob:CreateWindow({
    Title = "Severe Library Demo",
    Theme = "Dark",
    SizeX = 550,
    SizeY = 350
})

local mainTab = window:CreateTab("Principal")
local espTab = window:CreateTab("ESP")
local aimTab = window:CreateTab("Aimbot")

-- Seção de informações
local infoSection = mainTab:CreateSection("Informações")
local statusLabel = mainTab:CreateLabel("Status: Inicializando...")

-- Seção de controles gerais
local controlSection = mainTab:CreateSection("Controles")
local debugToggle = mainTab:CreateToggle({
    Name = "Modo Debug",
    CurrentValue = false,
    Flag = "DebugMode",
    Callback = function(Value)
        slib.Debug.Enabled = Value
        print("Modo Debug: " .. (Value and "Ativado" or "Desativado"))
    end
})

-- Seção de utilitários
local utilSection = mainTab:CreateSection("Utilitários")
mainTab:CreateButton({
    Name = "Limpar Desenhos",
    Callback = function()
        slib.ClearDrawings()
        print("Desenhos limpos")
    end
})

-- Configurações de ESP
local espSection = espTab:CreateSection("Configurações de ESP")

-- Variáveis de configuração do ESP
local espSettings = {
    Enabled = false,
    BoxType = "2D",
    ShowNames = true,
    ShowDistance = true,
    ShowHealth = true,
    ShowTracers = false,
    RainbowMode = false,
    TracerOrigin = "Bottom",
    TeamCheck = false,
    UpdateInterval = 0.1,
    MaxDistance = 2000
}

-- Toggles de ESP
local espToggle = espTab:CreateToggle({
    Name = "ESP Habilitado",
    CurrentValue = false,
    Flag = "ESPEnabled",
    Callback = function(Value)
        espSettings.Enabled = Value
        print("ESP: " .. (Value and "Ativado" or "Desativado"))
    end
})

local rainbowToggle = espTab:CreateToggle({
    Name = "Modo Rainbow",
    CurrentValue = false,
    Flag = "RainbowMode",
    Callback = function(Value)
        espSettings.RainbowMode = Value
        print("Modo Rainbow: " .. (Value and "Ativado" or "Desativado"))
    end
})

local namesToggle = espTab:CreateToggle({
    Name = "Mostrar Nomes",
    CurrentValue = true,
    Flag = "ShowNames",
    Callback = function(Value)
        espSettings.ShowNames = Value
    end
})

local distanceToggle = espTab:CreateToggle({
    Name = "Mostrar Distância",
    CurrentValue = true,
    Flag = "ShowDistance",
    Callback = function(Value)
        espSettings.ShowDistance = Value
    end
})

local healthToggle = espTab:CreateToggle({
    Name = "Mostrar Vida",
    CurrentValue = true,
    Flag = "ShowHealth",
    Callback = function(Value)
        espSettings.ShowHealth = Value
    end
})

local tracerToggle = espTab:CreateToggle({
    Name = "Mostrar Tracers",
    CurrentValue = false,
    Flag = "ShowTracers",
    Callback = function(Value)
        espSettings.ShowTracers = Value
    end
})

local teamToggle = espTab:CreateToggle({
    Name = "Verificar Time",
    CurrentValue = false,
    Flag = "TeamCheck",
    Callback = function(Value)
        espSettings.TeamCheck = Value
    end
})

-- Dropdowns
local boxTypeDropdown = espTab:CreateDropdown({
    Name = "Tipo de Box",
    Options = {"2D", "Corners"},
    CurrentOption = "2D",
    Flag = "BoxType",
    Callback = function(Value)
        espSettings.BoxType = Value
    end
})

local tracerOriginDropdown = espTab:CreateDropdown({
    Name = "Origem do Tracer",
    Options = {"Bottom", "Top", "Center", "Mouse"},
    CurrentOption = "Bottom",
    Flag = "TracerOrigin",
    Callback = function(Value)
        espSettings.TracerOrigin = Value
    end
})

-- Sliders
local updateSlider = espTab:CreateSlider({
    Name = "Intervalo de Atualização",
    Range = {0.01, 1},
    Increment = 0.01,
    CurrentValue = 0.1,
    Flag = "UpdateInterval",
    Callback = function(Value)
        espSettings.UpdateInterval = Value
    end
})

local distanceSlider = espTab:CreateSlider({
    Name = "Distância Máxima",
    Range = {100, 5000},
    Increment = 100,
    CurrentValue = 2000,
    Flag = "MaxDistance",
    Callback = function(Value)
        espSettings.MaxDistance = Value
    end
})

-- Função para checar se um jogador está em nosso time
local function isTeammate(player)
    if not espSettings.TeamCheck then
        return false
    end
    
    local localPlayer = getlocalplayer()
    if not localPlayer then return false end
    
    local team1 = getteam(localPlayer)
    local team2 = getteam(player)
    
    return team1 and team2 and team1 == team2
end

-- Função para atualizar o ESP
local espObjects = {}
local function updateESP()
    -- Limpar ESP anterior
    slib.ClearDrawings()
    espObjects = {}
    
    if not espSettings.Enabled then
        return
    end
    
    local localPlayerData = slib.GetLocalPlayerData()
    local players = slib.GetPlayers()
    
    for _, player in pairs(players) do
        -- Pular o jogador local
        if player ~= localPlayerData.Player and not isTeammate(player) then
            local character = getcharacter(player)
            
            if character then
                local rootPart = findfirstchild(character, "HumanoidRootPart")
                
                if rootPart then
                    -- Verificar distância máxima
                    local distance = 0
                    if localPlayerData.RootPart then
                        distance = slib.GetDistance(localPlayerData.RootPart, rootPart)
                        if distance > espSettings.MaxDistance then
                            continue
                        end
                    end
                    
                    -- Aplicar ESP
                    local espObj
                    if espSettings.RainbowMode then
                        espObj = slib.RainbowESP({
                            Target = character,
                            BoxType = espSettings.BoxType,
                            Nametag = espSettings.ShowNames,
                            Distance = espSettings.ShowDistance,
                            Healthbar = espSettings.ShowHealth,
                            Tracer = espSettings.ShowTracers,
                            TracerOrigin = espSettings.TracerOrigin
                        })
                    else
                        espObj = slib.CompleteESP({
                            Target = character,
                            BoxType = espSettings.BoxType,
                            Nametag = espSettings.ShowNames,
                            Distance = espSettings.ShowDistance,
                            Healthbar = espSettings.ShowHealth,
                            Tracer = espSettings.ShowTracers,
                            TracerOrigin = espSettings.TracerOrigin,
                            Color = {255, 255, 255}
                        })
                    end
                    
                    if espObj then
                        table.insert(espObjects, espObj)
                    end
                end
            end
        end
    end
end

-- Loop de atualização do ESP
local espLoop
espLoop = spawn(function()
    while true do
        if espSettings.Enabled then
            updateESP()
        end
        wait(espSettings.UpdateInterval)
    end
end)

-- Finalizar
statusLabel:Set("Status: Inicializado com sucesso!")
print("Severe Library Demo iniciado!")

-- Loop de processamento de tarefas sleep
spawn(function()
    while true do
        slib.ProcessSleepTasks()
        wait(0.01)
    end
end)

-- Exibir mensagem de boas-vindas
local welcome = Drawing.new("Text")
welcome.Text = "Severe Library Demo inicializado"
welcome.Size = 20
welcome.Color = slib.Colors.Green
welcome.Center = true
welcome.Position = {slib.GetCoords({50, 10})[1], 40}
welcome.Visible = true

-- Esconder a mensagem após 5 segundos
slib.Sleep(5, function()
    welcome.Visible = false
    welcome:Remove()
end)

print("Severe Library Demo initialized")
