--[[
    Severe Helper Library (SevereLib)
    Criado para facilitar o desenvolvimento de scripts com funções úteis e otimizadas
    Foco em estabilidade e performance para sistemas ESP
]]

local SevereLib = {}

-- Cache para evitar chamadas repetidas
SevereLib.Cache = {
    LocalPlayer = nil,
    Camera = nil,
    ESPObjects = {},
    DrawingObjects = {}
}

-- Configurações
SevereLib.Settings = {
    UpdateRate = 1/60, -- Taxa de atualização padrão para o ESP
    MaxESPDistance = 1000, -- Distância máxima para renderizar ESP
    DefaultESPColor = {255, 255, 255},
    DefaultTracerColor = {255, 0, 0},
    DefaultBoxColor = {0, 255, 0},
    DefaultTextColor = {255, 255, 255},
    DefaultCircleColor = {255, 255, 0},
    DefaultTextSize = 13,
    DefaultFont = 2, -- Plex
    DefaultCircleRadius = 3,
    DefaultBoxThickness = 1,
    DefaultTracerThickness = 1,
    DefaultTextOutlined = true,
}

-- Utilitários matemáticos
SevereLib.Math = {
    floor = math.floor,
    ceil = math.ceil,
    sqrt = math.sqrt,
    abs = math.abs,
    clamp = function(x, min, max)
        return x < min and min or (x > max and max or x)
    end
}

-- Utilitários de cores
SevereLib.Color = {
    RGB = function(r, g, b)
        return {
            r = SevereLib.Math.clamp(r, 0, 255),
            g = SevereLib.Math.clamp(g, 0, 255),
            b = SevereLib.Math.clamp(b, 0, 255)
        }
    end,
    
    Rainbow = function(speed)
        speed = speed or 1
        local time = tick() * speed
        local r = SevereLib.Math.abs(math.sin(time) * 255)
        local g = SevereLib.Math.abs(math.sin(time + 2) * 255)
        local b = SevereLib.Math.abs(math.sin(time + 4) * 255)
        return {r, g, b}
    end,
    
    Lerp = function(c1, c2, t)
        return {
            SevereLib.Math.floor(c1[1] + (c2[1] - c1[1]) * t),
            SevereLib.Math.floor(c1[2] + (c2[2] - c1[2]) * t),
            SevereLib.Math.floor(c1[3] + (c2[3] - c1[3]) * t)
        }
    end
}

-- Funções de auxiliares
SevereLib.Util = {
    -- Verifica se um objeto é descendente de outro
    IsDescendantOf = function(instance, ancestor)
        return isdescendantof(instance, ancestor)
    end,
    
    -- Pega todos os filhos de uma instância com uma determinada classe
    GetChildrenOfClass = function(parent, className)
        local results = {}
        for _, child in pairs(getchildren(parent)) do
            if getclassname(child) == className then
                table.insert(results, child)
            end
        end
        return results
    end,
    
    -- Pega todos os descendentes de uma instância
    GetDescendants = function(instance)
        local descendants = {}
        local function addDescendants(parent)
            local children = getchildren(parent)
            for _, child in pairs(children) do
                table.insert(descendants, child)
                addDescendants(child)
            end
        end
        addDescendants(instance)
        return descendants
    end,
    
    -- Pega todos os descendentes de uma instância com uma determinada classe
    GetDescendantsOfClass = function(instance, className)
        local results = {}
        local descendants = SevereLib.Util.GetDescendants(instance)
        for _, descendant in pairs(descendants) do
            if getclassname(descendant) == className then
                table.insert(results, descendant)
            end
        end
        return results
    end,
    
    -- Obtém a distância entre dois vetores
    GetDistance = function(v1, v2)
        local dx, dy, dz
        
        if type(v1) == "table" and v1.x and v1.y and v1.z then
            if type(v2) == "table" and v2.x and v2.y and v2.z then
                dx, dy, dz = v1.x - v2.x, v1.y - v2.y, v1.z - v2.z
            else
                return 0
            end
        elseif type(v1) == "number" and type(v2) == "number" then
            local pos1 = getposition(v1)
            local pos2 = getposition(v2)
            if pos1 and pos2 then
                dx, dy, dz = pos1.x - pos2.x, pos1.y - pos2.y, pos1.z - pos2.z
            else
                return 0
            end
        else
            return 0
        end
        
        return SevereLib.Math.sqrt(dx * dx + dy * dy + dz * dz)
    end,
    
    -- Obtém a distância do jogador local até um vetor ou instância
    GetDistanceFromPlayer = function(instance)
        local player = SevereLib.Player.GetLocalPlayer()
        local character = getcharacter(player)
        if not character then return 999999 end
        
        local humanoidRootPart = findfirstchild(character, "HumanoidRootPart")
        if not humanoidRootPart then return 999999 end
        
        local instancePos
        if type(instance) == "table" and instance.x and instance.y and instance.z then
            instancePos = instance
        elseif type(instance) == "number" then
            instancePos = getposition(instance)
        else
            return 999999
        end
        
        return SevereLib.Util.GetDistance(getposition(humanoidRootPart), instancePos)
    end,
    
    -- Verifica se o mouse está em uma determinada área da tela
    IsMouseInArea = function(x1, y1, x2, y2)
        local mouse = getmouseposition()
        return mouse.x >= x1 and mouse.x <= x2 and mouse.y >= y1 and mouse.y <= y2
    end,
    
    -- Conversão de valor para string formatada
    FormatNumber = function(number)
        if number >= 1000 then
            return string.format("%.1fk", number / 1000)
        else
            return tostring(number)
        end
    end
}

-- Funções relacionadas ao jogador
SevereLib.Player = {
    -- Obtém o jogador local
    GetLocalPlayer = function()
        if SevereLib.Cache.LocalPlayer then
            return SevereLib.Cache.LocalPlayer
        end
        
        local player = getlocalplayer()
        SevereLib.Cache.LocalPlayer = player
        return player
    end,
    
    -- Obtém o personagem do jogador local
    GetLocalCharacter = function()
        local player = SevereLib.Player.GetLocalPlayer()
        return getcharacter(player)
    end,
    
    -- Obtém a posição do jogador local
    GetLocalPosition = function()
        local character = SevereLib.Player.GetLocalCharacter()
        if not character then return nil end
        
        local rootPart = findfirstchild(character, "HumanoidRootPart")
        if not rootPart then return nil end
        
        return getposition(rootPart)
    end,
    
    -- Obtém a saúde do jogador local
    GetLocalHealth = function()
        local character = SevereLib.Player.GetLocalCharacter()
        if not character then return 0, 0 end
        
        local humanoid = findfirstchild(character, "Humanoid")
        if not humanoid then return 0, 0 end
        
        return gethealth(humanoid), getmaxhealth(humanoid)
    end,
    
    -- Obtém a câmera 
    GetCamera = function()
        if SevereLib.Cache.Camera then
            return SevereLib.Cache.Camera
        end
        
        local workspace = findservice(Game, "Workspace")
        local camera = findfirstchild(workspace, "Camera")
        SevereLib.Cache.Camera = camera
        return camera
    end,
    
    -- Obtém a posição da câmera
    GetCameraPosition = function()
        local camera = SevereLib.Player.GetCamera()
        if not camera then return nil end
        
        return getposition(camera)
    end
}

-- Funções relacionadas ao ESP
SevereLib.ESP = {
    Running = false,
    Objects = {},
    
    -- Cria um novo objeto de desenho
    CreateDrawingObject = function(type, properties)
        local obj = Drawing.new(type)
        if properties then
            for prop, value in pairs(properties) do
                obj[prop] = value
            end
        end
        table.insert(SevereLib.Cache.DrawingObjects, obj)
        return obj
    end,
    
    -- Remove um objeto de desenho
    RemoveDrawingObject = function(obj)
        if obj then
            obj.Visible = false
            obj:Remove()
            for i, v in pairs(SevereLib.Cache.DrawingObjects) do
                if v == obj then
                    table.remove(SevereLib.Cache.DrawingObjects, i)
                    break
                end
            end
        end
    end,
    
    -- Cria um novo objeto ESP
    CreateESPObject = function(instance, config)
        config = config or {}
        
        local espObject = {
            Instance = instance,
            Name = config.Name or getname(instance),
            Color = config.Color or SevereLib.Settings.DefaultESPColor,
            MaxDistance = config.MaxDistance or SevereLib.Settings.MaxESPDistance,
            ShowDistance = config.ShowDistance == nil and true or config.ShowDistance,
            ShowName = config.ShowName == nil and true or config.ShowName,
            ShowBox = config.ShowBox == nil and false or config.ShowBox,
            ShowTracer = config.ShowTracer == nil and false or config.ShowTracer,
            ShowHealthBar = config.ShowHealthBar == nil and false or config.ShowHealthBar,
            TextSize = config.TextSize or SevereLib.Settings.DefaultTextSize,
            Font = config.Font or SevereLib.Settings.DefaultFont,
            CircleRadius = config.CircleRadius or SevereLib.Settings.DefaultCircleRadius,
            BoxThickness = config.BoxThickness or SevereLib.Settings.DefaultBoxThickness,
            TracerThickness = config.TracerThickness or SevereLib.Settings.DefaultTracerThickness,
            TextOutlined = config.TextOutlined == nil and true or config.TextOutlined,
            Enabled = config.Enabled == nil and true or config.Enabled,
            
            -- Objetos de desenho
            Text = SevereLib.ESP.CreateDrawingObject("Text", {
                Text = "",
                Size = config.TextSize or SevereLib.Settings.DefaultTextSize,
                Center = true,
                Outline = config.TextOutlined == nil and true or config.TextOutlined,
                Color = config.Color or SevereLib.Settings.DefaultTextColor,
                Visible = false
            }),
            
            Circle = SevereLib.ESP.CreateDrawingObject("Circle", {
                Radius = config.CircleRadius or SevereLib.Settings.DefaultCircleRadius,
                NumSides = 12,
                Filled = true,
                Color = config.Color or SevereLib.Settings.DefaultCircleColor,
                Transparency = 0.8,
                Visible = false
            }),
            
            Box = nil,
            Tracer = nil,
            HealthBar = nil,
            
            -- Funções do objeto
            Update = function(self)
                if not self.Enabled or not self.Instance then
                    self:Hide()
                    return
                end
                
                local camera = SevereLib.Player.GetCamera()
                if not camera then
                    self:Hide()
                    return
                end
                
                local cameraPos = SevereLib.Player.GetCameraPosition()
                if not cameraPos then
                    self:Hide()
                    return
                end
                
                local instancePos = getposition(self.Instance)
                if not instancePos then
                    self:Hide()
                    return
                end
                
                local distance = SevereLib.Util.GetDistance(cameraPos, instancePos)
                if distance > self.MaxDistance then
                    self:Hide()
                    return
                end
                
                local screenPos, onScreen = worldtoscreenpoint({instancePos.x, instancePos.y, instancePos.z})
                if not onScreen then
                    self:Hide()
                    return
                end
                
                -- Atualiza texto
                if self.ShowName or self.ShowDistance then
                    local text = ""
                    if self.ShowName then
                        text = self.Name
                    end
                    
                    if self.ShowDistance then
                        text = text .. (self.ShowName and " [" or "") .. SevereLib.Math.floor(distance) .. "m" .. (self.ShowName and "]" or "")
                    end
                    
                    self.Text.Text = text
                    self.Text.Position = {screenPos.x, screenPos.y + 20}
                    self.Text.Visible = true
                else
                    self.Text.Visible = false
                end
                
                -- Atualiza círculo
                self.Circle.Position = {screenPos.x, screenPos.y}
                self.Circle.Visible = true
                
                -- Atualiza traçador
                if self.ShowTracer then
                    if not self.Tracer then
                        self.Tracer = SevereLib.ESP.CreateDrawingObject("Line", {
                            Thickness = self.TracerThickness,
                            Color = self.Color,
                            Visible = false
                        })
                    end
                    
                    local screenSize = getscreendimensions()
                    self.Tracer.From = {screenSize.x / 2, screenSize.y}
                    self.Tracer.To = {screenPos.x, screenPos.y}
                    self.Tracer.Visible = true
                elseif self.Tracer then
                    self.Tracer.Visible = false
                end
                
                -- Atualiza caixa (simplificado - apenas esqueleto da caixa 2D)
                if self.ShowBox then
                    if not self.Box then
                        self.Box = SevereLib.ESP.CreateDrawingObject("Square", {
                            Thickness = self.BoxThickness,
                            Color = self.Color,
                            Filled = false,
                            Visible = false
                        })
                    end
                    
                    -- Tamanho da caixa baseado na distância
                    local size = 50 * (1 / (distance * 0.05))
                    size = SevereLib.Math.clamp(size, 10, 100)
                    
                    self.Box.Size = {size, size * 1.5}
                    self.Box.Position = {screenPos.x - (size / 2), screenPos.y - (size * 1.5 / 2)}
                    self.Box.Visible = true
                elseif self.Box then
                    self.Box.Visible = false
                end
            end,
            
            Hide = function(self)
                self.Text.Visible = false
                self.Circle.Visible = false
                
                if self.Tracer then
                    self.Tracer.Visible = false
                end
                
                if self.Box then
                    self.Box.Visible = false
                end
                
                if self.HealthBar then
                    self.HealthBar.Visible = false
                end
            end,
            
            Remove = function(self)
                SevereLib.ESP.RemoveDrawingObject(self.Text)
                SevereLib.ESP.RemoveDrawingObject(self.Circle)
                
                if self.Tracer then
                    SevereLib.ESP.RemoveDrawingObject(self.Tracer)
                end
                
                if self.Box then
                    SevereLib.ESP.RemoveDrawingObject(self.Box)
                end
                
                if self.HealthBar then
                    SevereLib.ESP.RemoveDrawingObject(self.HealthBar)
                end
                
                for i, obj in pairs(SevereLib.ESP.Objects) do
                    if obj == self then
                        table.remove(SevereLib.ESP.Objects, i)
                        break
                    end
                end
            end
        }
        
        table.insert(SevereLib.ESP.Objects, espObject)
        return espObject
    end,
    
    -- Adiciona um objeto ESP
    Add = function(instance, config)
        return SevereLib.ESP.CreateESPObject(instance, config)
    end,
    
    -- Remove um objeto ESP
    Remove = function(instance)
        for i, obj in pairs(SevereLib.ESP.Objects) do
            if obj.Instance == instance then
                obj:Remove()
                break
            end
        end
    end,
    
    -- Limpa todos os objetos ESP
    Clear = function()
        for _, obj in pairs(SevereLib.ESP.Objects) do
            obj:Remove()
        end
        SevereLib.ESP.Objects = {}
    end,
    
    -- Inicia o loop de renderização do ESP
    Start = function()
        if SevereLib.ESP.Running then return end
        
        SevereLib.ESP.Running = true
        
        spawn(function()
            while SevereLib.ESP.Running do
                for _, obj in pairs(SevereLib.ESP.Objects) do
                    pcall(function()
                        obj:Update()
                    end)
                end
                wait(SevereLib.Settings.UpdateRate)
            end
        end)
    end,
    
    -- Para o loop de renderização do ESP
    Stop = function()
        SevereLib.ESP.Running = false
        for _, obj in pairs(SevereLib.ESP.Objects) do
            obj:Hide()
        end
    end,
    
    -- Configura o ESP para jogadores
    SetupPlayerESP = function(playerFolder, config)
        config = config or {}
        
        local function setupForPlayer(player)
            local character = getcharacter(player)
            if not character then return end
            
            local rootPart = findfirstchild(character, "HumanoidRootPart")
            if not rootPart then return end
            
            local playerName = getname(player)
            local displayName = getdisplayname and getdisplayname(player) or playerName
            
            SevereLib.ESP.Add(rootPart, {
                Name = displayName,
                ShowBox = config.ShowBox == nil and true or config.ShowBox,
                ShowTracer = config.ShowTracer == nil and true or config.ShowTracer,
                ShowHealthBar = config.ShowHealthBar == nil and true or config.ShowHealthBar,
                MaxDistance = config.MaxDistance or 1000,
                Color = config.Color or {255, 255, 255}
            })
        end
        
        local function onPlayerAdded(player)
            local localPlayer = SevereLib.Player.GetLocalPlayer()
            local localPlayerName = getname(localPlayer)
            
            if getname(player) ~= localPlayerName then
                setupForPlayer(player)
            end
        end
        
        for _, player in pairs(getchildren(playerFolder)) do
            onPlayerAdded(player)
        end
        
        -- Iniciar o ESP
        SevereLib.ESP.Start()
    end
}

-- Limpa todos os objetos de desenho quando o script for descarregado
SevereLib.Cleanup = function()
    SevereLib.ESP.Stop()
    SevereLib.ESP.Clear()
    
    for _, obj in pairs(SevereLib.Cache.DrawingObjects) do
        pcall(function()
            obj.Visible = false
            obj:Remove()
        end)
    end
    
    SevereLib.Cache.DrawingObjects = {}
    print("SevereLib: Cleanup completed")
end

return SevereLib 
