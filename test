--[[ 
    Severe Addon Library
    A performant utility library for Severe Lua API
    
    Features:
    - Optimized drawing functions
    - Game object helpers
    - Distance/position utilities
    - Player utilities
    - Improved error handling
]]

-- Initialize our library
local SevereLib = {
    -- Core settings
    Settings = {
        DefaultColor = {255, 255, 255},
        DefaultThickness = 1,
        DefaultRadius = 5,
        DefaultTransparency = 1,
        DefaultTextSize = 15,
        DefaultFont = 0,
        DefaultTracerOrigin = "bottom", -- bottom, top, center, mouse
        BoxTypes = {
            Corner = 1,
            Box2D = 2,
            Box3D = 3,
            None = 4
        }
    },
    
    -- Cache objects for performance
    Cache = {
        Players = {},
        Parts = {},
        Drawings = {},
        Positions = {}
    },
    
    -- Debug settings
    Debug = {
        Enabled = false,
        LogLevel = 1, -- 1=errors, 2=warnings, 3=info, 4=verbose
        AutoCleanup = true,
        DrawingCount = 0
    }
}

-- Utility functions
function SevereLib.Log(level, message)
    if not SevereLib.Debug.Enabled or level > SevereLib.Debug.LogLevel then return end
    
    local prefix = "SevereLib"
    if level == 1 then
        prefix = "SevereLib [ERROR]"
    elseif level == 2 then
        prefix = "SevereLib [WARN]"
    elseif level == 3 then
        prefix = "SevereLib [INFO]"
    elseif level == 4 then
        prefix = "SevereLib [DEBUG]"
    end
    
    print(prefix .. ": " .. message)
end

-- Geometry and math helpers
function SevereLib.CalculateDistance(pos1, pos2)
    -- Calculate 3D distance between two positions
    if not pos1 or not pos2 then return 0 end
    
    local dx = pos1.x - pos2.x
    local dy = pos1.y - pos2.y
    local dz = pos1.z - pos2.z
    
    return math.sqrt(dx * dx + dy * dy + dz * dz)
end

function SevereLib.WorldToScreen(position)
    -- Convert 3D world position to 2D screen position
    local success, screen_pos = pcall(function()
        return worldtoscreenpoint({position.x, position.y, position.z})
    end)
    
    if success and screen_pos then
        return {x = screen_pos.x, y = screen_pos.y}, true
    else
        return {x = 0, y = 0}, false
    end
end

function SevereLib.GetScreenSize()
    local dimensions = getscreendimensions()
    return {x = dimensions.x, y = dimensions.y}
end

function SevereLib.IsOnScreen(position)
    local _, isVisible = SevereLib.WorldToScreen(position)
    return isVisible
end

-- Drawing object management
function SevereLib.CreateDrawing(drawType, properties)
    if not drawType then return nil end
    
    local obj = Drawing.new(drawType)
    SevereLib.Debug.DrawingCount = SevereLib.Debug.DrawingCount + 1
    
    if properties then
        for prop, value in pairs(properties) do
            obj[prop] = value
        end
    end
    
    table.insert(SevereLib.Cache.Drawings, obj)
    return obj
end

function SevereLib.RemoveDrawing(obj)
    if not obj then return end
    
    for i, drawing in pairs(SevereLib.Cache.Drawings) do
        if drawing == obj then
            pcall(function() drawing:Remove() end)
            table.remove(SevereLib.Cache.Drawings, i)
            SevereLib.Debug.DrawingCount = SevereLib.Debug.DrawingCount - 1
            return
        end
    end
end

function SevereLib.ClearAllDrawings()
    for _, drawing in pairs(SevereLib.Cache.Drawings) do
        pcall(function() drawing:Remove() end)
    end
    
    SevereLib.Cache.Drawings = {}
    SevereLib.Debug.DrawingCount = 0
    
    -- Call Drawing.clear() as a backup to ensure all drawings are removed
    pcall(function() Drawing.clear() end)
end

-- Player and character utilities
function SevereLib.GetLocalPlayer()
    return getlocalplayer()
end

function SevereLib.GetLocalCharacter()
    local player = SevereLib.GetLocalPlayer()
    if not player then return nil end
    
    local char = nil
    pcall(function()
        char = getcharacter(player)
    end)
    
    return char
end

function SevereLib.GetLocalPosition()
    local char = SevereLib.GetLocalCharacter()
    if not char then return nil end
    
    local humanoidRootPart = nil
    pcall(function()
        humanoidRootPart = findfirstchild(char, "HumanoidRootPart")
    end)
    
    if humanoidRootPart then
        return getposition(humanoidRootPart)
    end
    
    return nil
end

function SevereLib.GetHumanoidHealth(humanoid)
    if not humanoid then return 0, 0 end
    
    local health, maxHealth = 0, 0
    pcall(function()
        health = gethealth(humanoid)
        maxHealth = getmaxhealth(humanoid)
    end)
    
    return health, maxHealth
end

-- ESP Drawing Functions
function SevereLib.DrawBox2D(position, size, color, thickness)
    -- Draw a 2D box at the given position with the given size
    local screen_pos, visible = SevereLib.WorldToScreen(position)
    if not visible then return nil end
    
    color = color or SevereLib.Settings.DefaultColor
    thickness = thickness or SevereLib.Settings.DefaultThickness
    
    local half_width = size.x / 2
    local half_height = size.y / 2
    
    local box = SevereLib.CreateDrawing("Square", {
        Size = {size.x, size.y},
        Position = {screen_pos.x - half_width, screen_pos.y - half_height},
        Color = color,
        Thickness = thickness,
        Filled = false,
        Transparency = 1,
        Visible = true
    })
    
    return box
end

function SevereLib.DrawCornerBox(position, size, color, thickness)
    -- Draw a corner box at the given position with the given size
    local screen_pos, visible = SevereLib.WorldToScreen(position)
    if not visible then return nil end
    
    color = color or SevereLib.Settings.DefaultColor
    thickness = thickness or SevereLib.Settings.DefaultThickness
    
    local half_width = size.x / 2
    local half_height = size.y / 2
    local corner_size = math.min(size.x, size.y) / 4
    
    local lines = {}
    
    -- Top left
    table.insert(lines, SevereLib.CreateDrawing("Line", {
        From = {screen_pos.x - half_width, screen_pos.y - half_height},
        To = {screen_pos.x - half_width + corner_size, screen_pos.y - half_height},
        Color = color,
        Thickness = thickness,
        Transparency = 1,
        Visible = true
    }))
    
    table.insert(lines, SevereLib.CreateDrawing("Line", {
        From = {screen_pos.x - half_width, screen_pos.y - half_height},
        To = {screen_pos.x - half_width, screen_pos.y - half_height + corner_size},
        Color = color,
        Thickness = thickness,
        Transparency = 1,
        Visible = true
    }))
    
    -- Top right
    table.insert(lines, SevereLib.CreateDrawing("Line", {
        From = {screen_pos.x + half_width, screen_pos.y - half_height},
        To = {screen_pos.x + half_width - corner_size, screen_pos.y - half_height},
        Color = color,
        Thickness = thickness,
        Transparency = 1,
        Visible = true
    }))
    
    table.insert(lines, SevereLib.CreateDrawing("Line", {
        From = {screen_pos.x + half_width, screen_pos.y - half_height},
        To = {screen_pos.x + half_width, screen_pos.y - half_height + corner_size},
        Color = color,
        Thickness = thickness,
        Transparency = 1,
        Visible = true
    }))
    
    -- Bottom left
    table.insert(lines, SevereLib.CreateDrawing("Line", {
        From = {screen_pos.x - half_width, screen_pos.y + half_height},
        To = {screen_pos.x - half_width + corner_size, screen_pos.y + half_height},
        Color = color,
        Thickness = thickness,
        Transparency = 1,
        Visible = true
    }))
    
    table.insert(lines, SevereLib.CreateDrawing("Line", {
        From = {screen_pos.x - half_width, screen_pos.y + half_height},
        To = {screen_pos.x - half_width, screen_pos.y + half_height - corner_size},
        Color = color,
        Thickness = thickness,
        Transparency = 1,
        Visible = true
    }))
    
    -- Bottom right
    table.insert(lines, SevereLib.CreateDrawing("Line", {
        From = {screen_pos.x + half_width, screen_pos.y + half_height},
        To = {screen_pos.x + half_width - corner_size, screen_pos.y + half_height},
        Color = color,
        Thickness = thickness,
        Transparency = 1,
        Visible = true
    }))
    
    table.insert(lines, SevereLib.CreateDrawing("Line", {
        From = {screen_pos.x + half_width, screen_pos.y + half_height},
        To = {screen_pos.x + half_width, screen_pos.y + half_height - corner_size},
        Color = color,
        Thickness = thickness,
        Transparency = 1,
        Visible = true
    }))
    
    return lines
end

function SevereLib.DrawBox3D(min, max, color, thickness)
    -- Draw a 3D box from min to max coordinates
    color = color or SevereLib.Settings.DefaultColor
    thickness = thickness or SevereLib.Settings.DefaultThickness
    
    local corners = {
        {min.x, min.y, min.z}, -- Bottom near left (1)
        {max.x, min.y, min.z}, -- Bottom near right (2)
        {max.x, min.y, max.z}, -- Bottom far right (3)
        {min.x, min.y, max.z}, -- Bottom far left (4)
        {min.x, max.y, min.z}, -- Top near left (5)
        {max.x, max.y, min.z}, -- Top near right (6)
        {max.x, max.y, max.z}, -- Top far right (7)
        {min.x, max.y, max.z}  -- Top far left (8)
    }
    
    local edges = {
        {1, 2}, {2, 3}, {3, 4}, {4, 1}, -- Bottom edges
        {5, 6}, {6, 7}, {7, 8}, {8, 5}, -- Top edges
        {1, 5}, {2, 6}, {3, 7}, {4, 8}  -- Vertical edges
    }
    
    local screen_corners = {}
    local visible_count = 0
    
    -- Convert corners to screen positions
    for i, corner in ipairs(corners) do
        local screen_pos, visible = SevereLib.WorldToScreen({x = corner[1], y = corner[2], z = corner[3]})
        screen_corners[i] = {screen_pos, visible}
        if visible then
            visible_count = visible_count + 1
        end
    end
    
    -- Only draw if at least some corners are visible
    if visible_count < 2 then return nil end
    
    local lines = {}
    
    -- Draw edges
    for _, edge in ipairs(edges) do
        local corner1 = screen_corners[edge[1]]
        local corner2 = screen_corners[edge[2]]
        
        -- Only draw if both corners are visible
        if corner1[2] and corner2[2] then
            table.insert(lines, SevereLib.CreateDrawing("Line", {
                From = {corner1[1].x, corner1[1].y},
                To = {corner2[1].x, corner2[1].y},
                Color = color,
                Thickness = thickness,
                Transparency = 1,
                Visible = true
            }))
        end
    end
    
    return lines
end

function SevereLib.DrawHealthBar(position, health, maxHealth, size, offset)
    -- Draw a health bar next to an ESP box
    local screen_pos, visible = SevereLib.WorldToScreen(position)
    if not visible then return nil end
    
    size = size or {5, 50}
    offset = offset or {-8, 0}
    
    -- Calculate health percentage
    local healthPercentage = math.clamp(health / maxHealth, 0, 1)
    
    -- Draw background
    local background = SevereLib.CreateDrawing("Square", {
        Position = {screen_pos.x + offset[1], screen_pos.y + offset[2] - size[2]/2},
        Size = {size[1], size[2]},
        Color = {0, 0, 0},
        Filled = true,
        Transparency = 1,
        Visible = true
    })
    
    -- Draw health fill
    local fill = SevereLib.CreateDrawing("Square", {
        Position = {screen_pos.x + offset[1], screen_pos.y + offset[2] - size[2]/2 + (size[2] * (1 - healthPercentage))},
        Size = {size[1], size[2] * healthPercentage},
        Color = {255 - 255 * healthPercentage, 255 * healthPercentage, 0},
        Filled = true,
        Transparency = 1,
        Visible = true
    })
    
    return {background, fill}
end

function SevereLib.DrawTracer(position, origin, color, thickness)
    -- Draw a tracer line from origin to position
    local screen_pos, visible = SevereLib.WorldToScreen(position)
    if not visible then return nil end
    
    color = color or SevereLib.Settings.DefaultColor
    thickness = thickness or SevereLib.Settings.DefaultThickness
    
    local screen_size = SevereLib.GetScreenSize()
    local from_x, from_y
    
    if origin == "bottom" or origin == nil then
        from_x = screen_size.x / 2
        from_y = screen_size.y
    elseif origin == "top" then
        from_x = screen_size.x / 2
        from_y = 0
    elseif origin == "center" then
        from_x = screen_size.x / 2
        from_y = screen_size.y / 2
    elseif origin == "mouse" then
        local mouse_pos = getmouseposition()
        from_x = mouse_pos.x
        from_y = mouse_pos.y
    elseif type(origin) == "table" then
        from_x = origin[1]
        from_y = origin[2]
    end
    
    local tracer = SevereLib.CreateDrawing("Line", {
        From = {from_x, from_y},
        To = {screen_pos.x, screen_pos.y},
        Color = color,
        Thickness = thickness,
        Transparency = 1,
        Visible = true
    })
    
    return tracer
end

function SevereLib.DrawText(position, text, color, size, centered, outline)
    -- Draw text at the given position
    local screen_pos, visible = SevereLib.WorldToScreen(position)
    if not visible then return nil end
    
    color = color or SevereLib.Settings.DefaultColor
    size = size or SevereLib.Settings.DefaultTextSize
    centered = centered ~= nil and centered or true
    outline = outline ~= nil and outline or true
    
    local text_obj = SevereLib.CreateDrawing("Text", {
        Text = text,
        Position = {screen_pos.x, screen_pos.y},
        Color = color,
        Size = size,
        Center = centered,
        Outline = outline,
        Transparency = 1,
        Visible = true,
        Font = SevereLib.Settings.DefaultFont
    })
    
    return text_obj
end

function SevereLib.DrawCircle(position, radius, color, segments, filled)
    -- Draw a circle at the given position
    local screen_pos, visible = SevereLib.WorldToScreen(position)
    if not visible then return nil end
    
    color = color or SevereLib.Settings.DefaultColor
    radius = radius or SevereLib.Settings.DefaultRadius
    segments = segments or 16 -- Higher for smoother circles, lower for better performance
    filled = filled ~= nil and filled or false
    
    local circle = SevereLib.CreateDrawing("Circle", {
        Position = {screen_pos.x, screen_pos.y},
        Radius = radius,
        Color = color,
        Filled = filled,
        Transparency = 1,
        NumSides = segments,
        Thickness = 1,
        Visible = true
    })
    
    return circle
end

function SevereLib.Draw3DCircle(position, radius, color, segments)
    -- Draw a 3D circle on the ground (XZ plane)
    color = color or SevereLib.Settings.DefaultColor
    radius = radius or 5
    segments = segments or 16
    
    local lines = {}
    local pi = math.pi
    
    for i = 1, segments do
        local angle1 = (2 * pi / segments) * (i - 1)
        local angle2 = (2 * pi / segments) * i
        
        local point1 = {
            x = position.x + radius * math.cos(angle1),
            y = position.y,
            z = position.z + radius * math.sin(angle1)
        }
        
        local point2 = {
            x = position.x + radius * math.cos(angle2),
            y = position.y,
            z = position.z + radius * math.sin(angle2)
        }
        
        local screen1, visible1 = SevereLib.WorldToScreen(point1)
        local screen2, visible2 = SevereLib.WorldToScreen(point2)
        
        if visible1 and visible2 then
            table.insert(lines, SevereLib.CreateDrawing("Line", {
                From = {screen1.x, screen1.y},
                To = {screen2.x, screen2.y},
                Color = color,
                Thickness = 1,
                Transparency = 1,
                Visible = true
            }))
        end
    end
    
    return lines
end

-- Combined ESP functions
function SevereLib.CreateBoxESP(position, size, options)
    -- Create a complete ESP with box, healthbar, tracers, etc.
    if not position then return nil end
    
    options = options or {}
    local esp_objects = {}
    
    -- Setup default options
    options.color = options.color or SevereLib.Settings.DefaultColor
    options.boxType = options.boxType or SevereLib.Settings.BoxTypes.Corner
    options.tracerOrigin = options.tracerOrigin or SevereLib.Settings.DefaultTracerOrigin
    options.textSize = options.textSize or SevereLib.Settings.DefaultTextSize
    
    -- Draw box based on box type
    if options.boxEnabled ~= false then
        if options.boxType == SevereLib.Settings.BoxTypes.Corner then
            esp_objects.box = SevereLib.DrawCornerBox(position, size, options.color)
        elseif options.boxType == SevereLib.Settings.BoxTypes.Box2D then
            esp_objects.box = SevereLib.DrawBox2D(position, size, options.color)
        elseif options.boxType == SevereLib.Settings.BoxTypes.Box3D then
            local min = {
                x = position.x - size.x/2,
                y = position.y - size.y/2,
                z = position.z - size.z/2
            }
            local max = {
                x = position.x + size.x/2,
                y = position.y + size.y/2,
                z = position.z + size.z/2
            }
            esp_objects.box = SevereLib.DrawBox3D(min, max, options.color)
        end
    end
    
    -- Draw health bar if health provided
    if options.healthEnabled and options.health and options.maxHealth then
        esp_objects.healthBar = SevereLib.DrawHealthBar(
            position, 
            options.health, 
            options.maxHealth, 
            options.healthBarSize, 
            options.healthBarOffset
        )
    end
    
    -- Draw tracer if enabled
    if options.tracerEnabled then
        esp_objects.tracer = SevereLib.DrawTracer(position, options.tracerOrigin, options.color)
    end
    
    -- Draw name/text if provided
    if options.textEnabled and options.text then
        local text_pos = {
            x = position.x,
            y = position.y - (size.y / 2) - 10, -- Position text above the box
            z = position.z
        }
        
        esp_objects.text = SevereLib.DrawText(text_pos, options.text, options.color, options.textSize)
    end
    
    -- Draw circle at feet if enabled
    if options.circleEnabled then
        esp_objects.circle = SevereLib.DrawCircle(
            position,
            options.circleRadius or 4,
            options.color,
            options.circleSegments,
            options.circleFilled
        )
    end
    
    -- Draw 3D ground circle if enabled
    if options.groundCircleEnabled then
        local ground_pos = {x = position.x, y = position.y - size.y/2, z = position.z}
        esp_objects.groundCircle = SevereLib.Draw3DCircle(
            ground_pos,
            options.groundRadius or 5,
            options.color,
            options.groundSegments
        )
    end
    
    return esp_objects
end

-- Cleanup and resource management
function SevereLib.Cleanup()
    SevereLib.ClearAllDrawings()
    SevereLib.Cache.Players = {}
    SevereLib.Cache.Parts = {}
    SevereLib.Cache.Positions = {}
    
    SevereLib.Log(3, "Library cleaned up successfully.")
end

-- Return the library
return SevereLib
