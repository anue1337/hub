--[[
    Severe Helper Library (SevereLib)
    Criado para facilitar o desenvolvimento de scripts com funções úteis e otimizadas
    Foco em estabilidade e performance para sistemas ESP
]]

local SevereLib = {}

-- Cache para evitar chamadas repetidas
SevereLib.Cache = {
    LocalPlayer = nil,
    Camera = nil,
    ESPObjects = {},
    DrawingObjects = {},
    PlayerCache = {}, -- Cache para rastrear jogadores e seus objetos ESP
    LastCheck = 0, -- Tempo da última verificação de limpeza
    DeadPlayers = {}, -- Cache de jogadores mortos para rápida limpeza
    PlayerCharacters = {} -- Mapeia jogadores para seus personagens para verificar mudanças
}

-- Configurações
SevereLib.Settings = {
    UpdateRate = 1/60, -- Taxa de atualização padrão para o ESP
    MaxESPDistance = 1000, -- Distância máxima para renderizar ESP
    DefaultESPColor = {255, 255, 255},
    DefaultTracerColor = {255, 0, 0},
    DefaultBoxColor = {0, 255, 0},
    DefaultTextColor = {255, 255, 255},
    DefaultCircleColor = {255, 255, 0},
    DefaultTextSize = 13,
    DefaultFont = 2, -- Plex
    DefaultCircleRadius = 3,
    DefaultBoxThickness = 1,
    DefaultTracerThickness = 1,
    DefaultTextOutlined = true,
    CleanupInterval = 1, -- Intervalo em segundos para verificar e limpar objetos ESP inválidos (reduzido)
    PlayerCheckInterval = 0.5, -- Intervalo para verificar novos jogadores (reduzido)
    DeadCheckInterval = 0.2 -- Intervalo para verificar jogadores mortos (novo)
}

-- Utilitários matemáticos
SevereLib.Math = {
    floor = math.floor,
    ceil = math.ceil,
    sqrt = math.sqrt,
    abs = math.abs,
    clamp = function(x, min, max)
        return x < min and min or (x > max and max or x)
    end
}

-- Utilitários de cores
SevereLib.Color = {
    RGB = function(r, g, b)
        return {
            r = SevereLib.Math.clamp(r, 0, 255),
            g = SevereLib.Math.clamp(g, 0, 255),
            b = SevereLib.Math.clamp(b, 0, 255)
        }
    end,
    
    Rainbow = function(speed)
        speed = speed or 1
        local time = tick() * speed
        local r = SevereLib.Math.abs(math.sin(time) * 255)
        local g = SevereLib.Math.abs(math.sin(time + 2) * 255)
        local b = SevereLib.Math.abs(math.sin(time + 4) * 255)
        return {r, g, b}
    end,
    
    Lerp = function(c1, c2, t)
        return {
            SevereLib.Math.floor(c1[1] + (c2[1] - c1[1]) * t),
            SevereLib.Math.floor(c1[2] + (c2[2] - c1[2]) * t),
            SevereLib.Math.floor(c1[3] + (c2[3] - c1[3]) * t)
        }
    end
}

-- Funções de auxiliares
SevereLib.Util = {
    -- Verifica se um objeto é descendente de outro
    IsDescendantOf = function(instance, ancestor)
        return isdescendantof(instance, ancestor)
    end,
    
    -- Pega todos os filhos de uma instância com uma determinada classe
    GetChildrenOfClass = function(parent, className)
        local results = {}
        for _, child in pairs(getchildren(parent)) do
            if getclassname(child) == className then
                table.insert(results, child)
            end
        end
        return results
    end,
    
    -- Pega todos os descendentes de uma instância
    GetDescendants = function(instance)
        local descendants = {}
        local function addDescendants(parent)
            local children = getchildren(parent)
            for _, child in pairs(children) do
                table.insert(descendants, child)
                addDescendants(child)
            end
        end
        addDescendants(instance)
        return descendants
    end,
    
    -- Pega todos os descendentes de uma instância com uma determinada classe
    GetDescendantsOfClass = function(instance, className)
        local results = {}
        local descendants = SevereLib.Util.GetDescendants(instance)
        for _, descendant in pairs(descendants) do
            if getclassname(descendant) == className then
                table.insert(results, descendant)
            end
        end
        return results
    end,
    
    -- Obtém a distância entre dois vetores
    GetDistance = function(v1, v2)
        local dx, dy, dz
        
        if type(v1) == "table" and v1.x and v1.y and v1.z then
            if type(v2) == "table" and v2.x and v2.y and v2.z then
                dx, dy, dz = v1.x - v2.x, v1.y - v2.y, v1.z - v2.z
            else
                return 0
            end
        elseif type(v1) == "number" and type(v2) == "number" then
            local pos1 = getposition(v1)
            local pos2 = getposition(v2)
            if pos1 and pos2 then
                dx, dy, dz = pos1.x - pos2.x, pos1.y - pos2.y, pos1.z - pos2.z
            else
                return 0
            end
        else
            return 0
        end
        
        return SevereLib.Math.sqrt(dx * dx + dy * dy + dz * dz)
    end,
    
    -- Obtém a distância do jogador local até um vetor ou instância
    GetDistanceFromPlayer = function(instance)
        local player = SevereLib.Player.GetLocalPlayer()
        local character = getcharacter(player)
        if not character then return 999999 end
        
        local humanoidRootPart = findfirstchild(character, "HumanoidRootPart")
        if not humanoidRootPart then return 999999 end
        
        local instancePos
        if type(instance) == "table" and instance.x and instance.y and instance.z then
            instancePos = instance
        elseif type(instance) == "number" then
            instancePos = getposition(instance)
        else
            return 999999
        end
        
        return SevereLib.Util.GetDistance(getposition(humanoidRootPart), instancePos)
    end,
    
    -- Verifica se o mouse está em uma determinada área da tela
    IsMouseInArea = function(x1, y1, x2, y2)
        local mouse = getmouseposition()
        return mouse.x >= x1 and mouse.x <= x2 and mouse.y >= y1 and mouse.y <= y2
    end,
    
    -- Conversão de valor para string formatada
    FormatNumber = function(number)
        if number >= 1000 then
            return string.format("%.1fk", number / 1000)
        else
            return tostring(number)
        end
    end,
    
    -- Verifica se um player ainda existe no jogo
    IsPlayerValid = function(player)
        local playersService = findservice(Game, "Players")
        for _, p in pairs(getchildren(playersService)) do
            if p == player then
                return true
            end
        end
        return false
    end,
    
    -- Verifica se um jogador está vivo
    IsPlayerAlive = function(player)
        local character = getcharacter(player)
        if not character then 
            return false 
        end
        
        local humanoid = findfirstchild(character, "Humanoid")
        if not humanoid then 
            return false 
        end
        
        local health = gethealth(humanoid)
        return health > 0
    end,
    
    -- Verifica se um objeto ainda existe no jogo
    IsInstanceValid = function(instance)
        if not instance then return false end
        
        local success, result = pcall(function()
            local parent = getparent(instance)
            return parent ~= nil
        end)
        
        return success and result
    end,
    
    -- Verifica se o personagem de um jogador mudou
    HasCharacterChanged = function(player)
        local oldCharacter = SevereLib.Cache.PlayerCharacters[player]
        local newCharacter = getcharacter(player)
        
        if oldCharacter ~= newCharacter then
            SevereLib.Cache.PlayerCharacters[player] = newCharacter
            return true
        end
        
        return false
    end
}

-- Funções relacionadas ao jogador
SevereLib.Player = {
    -- Obtém o jogador local
    GetLocalPlayer = function()
        if SevereLib.Cache.LocalPlayer then
            return SevereLib.Cache.LocalPlayer
        end
        
        local player = getlocalplayer()
        SevereLib.Cache.LocalPlayer = player
        return player
    end,
    
    -- Obtém o personagem do jogador local
    GetLocalCharacter = function()
        local player = SevereLib.Player.GetLocalPlayer()
        return getcharacter(player)
    end,
    
    -- Obtém a posição do jogador local
    GetLocalPosition = function()
        local character = SevereLib.Player.GetLocalCharacter()
        if not character then return nil end
        
        local rootPart = findfirstchild(character, "HumanoidRootPart")
        if not rootPart then return nil end
        
        return getposition(rootPart)
    end,
    
    -- Obtém a saúde do jogador local
    GetLocalHealth = function()
        local character = SevereLib.Player.GetLocalCharacter()
        if not character then return 0, 0 end
        
        local humanoid = findfirstchild(character, "Humanoid")
        if not humanoid then return 0, 0 end
        
        return gethealth(humanoid), getmaxhealth(humanoid)
    end,
    
    -- Obtém a câmera 
    GetCamera = function()
        if SevereLib.Cache.Camera then
            return SevereLib.Cache.Camera
        end
        
        local workspace = findservice(Game, "Workspace")
        local camera = findfirstchild(workspace, "Camera")
        SevereLib.Cache.Camera = camera
        return camera
    end,
    
    -- Obtém a posição da câmera
    GetCameraPosition = function()
        local camera = SevereLib.Player.GetCamera()
        if not camera then return nil end
        
        return getposition(camera)
    end,
    
    -- Obtém todos os jogadores não-locais
    GetAllPlayers = function()
        local players = {}
        local playersService = findservice(Game, "Players")
        local localPlayer = SevereLib.Player.GetLocalPlayer()
        local localPlayerName = getname(localPlayer)
        
        for _, player in pairs(getchildren(playersService)) do
            if getname(player) ~= localPlayerName then
                table.insert(players, player)
            end
        end
        
        return players
    end
}

-- Funções relacionadas ao ESP
SevereLib.ESP = {
    Running = false,
    Objects = {},
    PlayerObjects = {}, -- Mapeia players para seus objetos ESP
    LastPlayerCheck = 0, -- Último tempo que checamos por novos jogadores
    LastDeadCheck = 0, -- Último tempo que checamos por jogadores mortos
    
    -- Cria um novo objeto de desenho
    CreateDrawingObject = function(type, properties)
        local obj = Drawing.new(type)
        if properties then
            for prop, value in pairs(properties) do
                obj[prop] = value
            end
        end
        table.insert(SevereLib.Cache.DrawingObjects, obj)
        return obj
    end,
    
    -- Remove um objeto de desenho
    RemoveDrawingObject = function(obj)
        if obj then
            obj.Visible = false
            pcall(function() obj:Remove() end)
            for i, v in pairs(SevereLib.Cache.DrawingObjects) do
                if v == obj then
                    table.remove(SevereLib.Cache.DrawingObjects, i)
                    break
                end
            end
        end
    end,
    
    -- Cria um novo objeto ESP
    CreateESPObject = function(instance, config)
        config = config or {}
        
        local espObject = {
            Instance = instance,
            Name = config.Name or getname(instance),
            Color = config.Color or SevereLib.Settings.DefaultESPColor,
            MaxDistance = config.MaxDistance or SevereLib.Settings.MaxESPDistance,
            ShowDistance = config.ShowDistance == nil and true or config.ShowDistance,
            ShowName = config.ShowName == nil and true or config.ShowName,
            ShowBox = config.ShowBox == nil and false or config.ShowBox,
            ShowTracer = config.ShowTracer == nil and false or config.ShowTracer,
            ShowHealthBar = config.ShowHealthBar == nil and false or config.ShowHealthBar,
            TextSize = config.TextSize or SevereLib.Settings.DefaultTextSize,
            Font = config.Font or SevereLib.Settings.DefaultFont,
            CircleRadius = config.CircleRadius or SevereLib.Settings.DefaultCircleRadius,
            BoxThickness = config.BoxThickness or SevereLib.Settings.DefaultBoxThickness,
            TracerThickness = config.TracerThickness or SevereLib.Settings.DefaultTracerThickness,
            TextOutlined = config.TextOutlined == nil and true or config.TextOutlined,
            Enabled = config.Enabled == nil and true or config.Enabled,
            Player = config.Player, -- Referência ao jogador (se este ESP for de um jogador)
            LastUpdated = tick(), -- Tempo da última atualização
            
            -- Objetos de desenho
            Text = SevereLib.ESP.CreateDrawingObject("Text", {
                Text = "",
                Size = config.TextSize or SevereLib.Settings.DefaultTextSize,
                Center = true,
                Outline = config.TextOutlined == nil and true or config.TextOutlined,
                Color = config.Color or SevereLib.Settings.DefaultTextColor,
                Visible = false
            }),
            
            Circle = SevereLib.ESP.CreateDrawingObject("Circle", {
                Radius = config.CircleRadius or SevereLib.Settings.DefaultCircleRadius,
                NumSides = 12,
                Filled = true,
                Color = config.Color or SevereLib.Settings.DefaultCircleColor,
                Transparency = 0.8,
                Visible = false
            }),
            
            Box = nil,
            Tracer = nil,
            HealthBar = nil,
            
            -- Funções do objeto
            Update = function(self)
                if not self.Enabled or not self.Instance then
                    self:Hide()
                    return false -- Retornar false indica que a atualização falhou
                end
                
                -- Se este for um ESP de jogador, verificar se o jogador está morto
                if self.Player then
                    if not SevereLib.Util.IsPlayerValid(self.Player) then
                        self:Hide()
                        return false -- Jogador não existe mais
                    end
                    
                    -- Verificar se o jogador está morto
                    if not SevereLib.Util.IsPlayerAlive(self.Player) then
                        self:Hide()
                        SevereLib.Cache.DeadPlayers[self.Player] = true
                        return false -- Jogador está morto
                    end
                    
                    -- Verificar se o personagem do jogador mudou
                    if SevereLib.Util.HasCharacterChanged(self.Player) then
                        self:Hide()
                        return false -- O personagem mudou
                    end
                end
                
                -- Verificar se a instância ainda é válida
                if not SevereLib.Util.IsInstanceValid(self.Instance) then
                    self:Hide()
                    return false -- Instância não é mais válida
                end
                
                local camera = SevereLib.Player.GetCamera()
                if not camera then
                    self:Hide()
                    return false
                end
                
                local cameraPos = SevereLib.Player.GetCameraPosition()
                if not cameraPos then
                    self:Hide()
                    return false
                end
                
                local instancePos = getposition(self.Instance)
                if not instancePos then
                    self:Hide()
                    return false
                end
                
                self.LastUpdated = tick() -- Atualizar o timestamp
                
                local distance = SevereLib.Util.GetDistance(cameraPos, instancePos)
                if distance > self.MaxDistance then
                    self:Hide()
                    return true -- A instância é válida, só está fora de alcance
                end
                
                local screenPos, onScreen = worldtoscreenpoint({instancePos.x, instancePos.y, instancePos.z})
                if not onScreen then
                    self:Hide()
                    return true -- A instância é válida, só está fora da tela
                end
                
                -- Atualiza texto
                if self.ShowName or self.ShowDistance then
                    local text = ""
                    if self.ShowName then
                        text = self.Name
                    end
                    
                    if self.ShowDistance then
                        text = text .. (self.ShowName and " [" or "") .. SevereLib.Math.floor(distance) .. "m" .. (self.ShowName and "]" or "")
                    end
                    
                    self.Text.Text = text
                    self.Text.Position = {screenPos.x, screenPos.y + 20}
                    self.Text.Visible = true
                else
                    self.Text.Visible = false
                end
                
                -- Atualiza círculo
                self.Circle.Position = {screenPos.x, screenPos.y}
                self.Circle.Visible = true
                
                -- Atualiza traçador
                if self.ShowTracer then
                    if not self.Tracer then
                        self.Tracer = SevereLib.ESP.CreateDrawingObject("Line", {
                            Thickness = self.TracerThickness,
                            Color = self.Color,
                            Visible = false
                        })
                    end
                    
                    local screenSize = getscreendimensions()
                    self.Tracer.From = {screenSize.x / 2, screenSize.y}
                    self.Tracer.To = {screenPos.x, screenPos.y}
                    self.Tracer.Visible = true
                elseif self.Tracer then
                    self.Tracer.Visible = false
                end
                
                -- Atualiza caixa (simplificado - apenas esqueleto da caixa 2D)
                if self.ShowBox then
                    if not self.Box then
                        self.Box = SevereLib.ESP.CreateDrawingObject("Square", {
                            Thickness = self.BoxThickness,
                            Color = self.Color,
                            Filled = false,
                            Visible = false
                        })
                    end
                    
                    -- Tamanho da caixa baseado na distância
                    local size = 50 * (1 / (distance * 0.05))
                    size = SevereLib.Math.clamp(size, 10, 100)
                    
                    self.Box.Size = {size, size * 1.5}
                    self.Box.Position = {screenPos.x - (size / 2), screenPos.y - (size * 1.5 / 2)}
                    self.Box.Visible = true
                elseif self.Box then
                    self.Box.Visible = false
                end
                
                -- Verifica e atualiza a barra de saúde, se necessário
                if self.ShowHealthBar and self.Player then
                    local character = getcharacter(self.Player)
                    if character then
                        local humanoid = findfirstchild(character, "Humanoid")
                        if humanoid then
                            local health = gethealth(humanoid)
                            local maxHealth = getmaxhealth(humanoid)
                            
                            -- Criar a barra de saúde se não existir
                            if not self.HealthBar then
                                self.HealthBar = SevereLib.ESP.CreateDrawingObject("Square", {
                                    Thickness = 1,
                                    Filled = true,
                                    Visible = false
                                })
                            end
                            
                            -- Atualizar a barra de saúde
                            local healthRatio = health / maxHealth
                            local barColor = {
                                (1 - healthRatio) * 255,
                                healthRatio * 255,
                                0
                            }
                            
                            local barWidth = 5
                            local barHeight = size * 1.5
                            local xPos = screenPos.x + (size / 2) + 5
                            
                            self.HealthBar.Size = {barWidth, barHeight * healthRatio}
                            self.HealthBar.Position = {xPos, screenPos.y - (size * 1.5 / 2) + (barHeight * (1 - healthRatio))}
                            self.HealthBar.Color = barColor
                            self.HealthBar.Visible = true
                        elseif self.HealthBar then
                            self.HealthBar.Visible = false
                        end
                    elseif self.HealthBar then
                        self.HealthBar.Visible = false
                    end
                elseif self.HealthBar then
                    self.HealthBar.Visible = false
                end
                
                return true -- Atualização bem-sucedida
            end,
            
            Hide = function(self)
                if self.Text then self.Text.Visible = false end
                if self.Circle then self.Circle.Visible = false end
                if self.Tracer then self.Tracer.Visible = false end
                if self.Box then self.Box.Visible = false end
                if self.HealthBar then self.HealthBar.Visible = false end
            end,
            
            Remove = function(self)
                pcall(function()
                    if self.Text then SevereLib.ESP.RemoveDrawingObject(self.Text) end
                    if self.Circle then SevereLib.ESP.RemoveDrawingObject(self.Circle) end
                    if self.Tracer then SevereLib.ESP.RemoveDrawingObject(self.Tracer) end
                    if self.Box then SevereLib.ESP.RemoveDrawingObject(self.Box) end
                    if self.HealthBar then SevereLib.ESP.RemoveDrawingObject(self.HealthBar) end
                end)
                
                -- Remover da lista de objetos
                for i, obj in pairs(SevereLib.ESP.Objects) do
                    if obj == self then
                        table.remove(SevereLib.ESP.Objects, i)
                        break
                    end
                end
                
                -- Remover do mapeamento de jogadores
                if self.Player then
                    SevereLib.ESP.PlayerObjects[self.Player] = nil
                end
            end
        }
        
        table.insert(SevereLib.ESP.Objects, espObject)
        
        -- Se for um ESP de jogador, armazenar no mapeamento
        if config.Player then
            SevereLib.ESP.PlayerObjects[config.Player] = espObject
            SevereLib.Cache.PlayerCharacters[config.Player] = getcharacter(config.Player)
        end
        
        return espObject
    end,
    
    -- Adiciona um objeto ESP
    Add = function(instance, config)
        return SevereLib.ESP.CreateESPObject(instance, config)
    end,
    
    -- Remove um objeto ESP
    Remove = function(instance)
        for i, obj in pairs(SevereLib.ESP.Objects) do
            if obj.Instance == instance then
                obj:Remove()
                break
            end
        end
    end,
    
    -- Remove um objeto ESP para um jogador específico
    RemovePlayer = function(player)
        local espObject = SevereLib.ESP.PlayerObjects[player]
        if espObject then
            espObject:Remove()
            SevereLib.ESP.PlayerObjects[player] = nil
            SevereLib.Cache.DeadPlayers[player] = nil
            SevereLib.Cache.PlayerCharacters[player] = nil
        end
    end,
    
    -- Limpa todos os objetos ESP
    Clear = function()
        for _, obj in pairs(SevereLib.ESP.Objects) do
            obj:Remove()
        end
        SevereLib.ESP.Objects = {}
        SevereLib.ESP.PlayerObjects = {}
        SevereLib.Cache.DeadPlayers = {}
        SevereLib.Cache.PlayerCharacters = {}
    end,
    
    -- Verifica e limpa objetos ESP inválidos
    CleanupInvalid = function()
        local currentTime = tick()
        
        -- Verificar a cada X segundos
        if currentTime - SevereLib.Cache.LastCheck < SevereLib.Settings.CleanupInterval then
            return
        end
        
        SevereLib.Cache.LastCheck = currentTime
        
        -- Lista de objetos a remover
        local toRemove = {}
        local deadCount = 0
        
        for i, obj in pairs(SevereLib.ESP.Objects) do
            -- Verifica se a instância ainda é válida ou já foi limpa
            if not obj.Instance or not SevereLib.Util.IsInstanceValid(obj.Instance) then
                table.insert(toRemove, obj)
            end
            
            -- Verifica se o objeto não foi atualizado há muito tempo
            if currentTime - obj.LastUpdated > 5 then
                table.insert(toRemove, obj)
            end
        end
        
        -- Remover objetos inválidos
        for _, obj in pairs(toRemove) do
            obj:Remove()
        end
        
        -- Se algum objeto foi removido, fazer log
        if #toRemove > 0 then
            print("SevereLib: Removidos " .. #toRemove .. " objetos ESP inválidos")
        end
    end,
    
    -- Verifica jogadores mortos
    CheckDeadPlayers = function()
        local currentTime = tick()
        
        -- Verificar a cada X segundos
        if currentTime - SevereLib.ESP.LastDeadCheck < SevereLib.Settings.DeadCheckInterval then
            return
        end
        
        SevereLib.ESP.LastDeadCheck = currentTime
        
        -- Limpar jogadores mortos do cache que não existem mais
        for player, _ in pairs(SevereLib.Cache.DeadPlayers) do
            if not SevereLib.Util.IsPlayerValid(player) then
                SevereLib.ESP.RemovePlayer(player)
                SevereLib.Cache.DeadPlayers[player] = nil
            else
                -- Verificar se o jogador respawnou
                if SevereLib.Util.IsPlayerAlive(player) then
                    SevereLib.Cache.DeadPlayers[player] = nil
                    
                    -- Recriar o ESP para o jogador
                    if SevereLib.ESP.PlayerObjects[player] then
                        SevereLib.ESP.RemovePlayer(player)
                    end
                    
                    SevereLib.ESP.SetupPlayerESP(findservice(Game, "Players"), {})
                end
            end
        end
        
        -- Verificar jogadores vivos que morreram
        for player, espObj in pairs(SevereLib.ESP.PlayerObjects) do
            if not SevereLib.Util.IsPlayerAlive(player) then
                espObj:Hide()
                SevereLib.Cache.DeadPlayers[player] = true
            end
        end
    end,
    
    -- Verifica novos jogadores
    CheckNewPlayers = function()
        local currentTime = tick()
        
        -- Verificar a cada X segundos
        if currentTime - SevereLib.ESP.LastPlayerCheck < SevereLib.Settings.PlayerCheckInterval then
            return
        end
        
        SevereLib.ESP.LastPlayerCheck = currentTime
        
        local playersService = findservice(Game, "Players")
        local localPlayer = SevereLib.Player.GetLocalPlayer()
        
        -- Verificar jogadores novos
        for _, player in pairs(getchildren(playersService)) do
            if player ~= localPlayer and not SevereLib.ESP.PlayerObjects[player] and not SevereLib.Cache.DeadPlayers[player] then
                -- Tentar configurar ESP para este jogador
                pcall(function()
                    SevereLib.ESP.SetupForPlayer(player)
                end)
            end
        end
    end,
    
    -- Configurar ESP para um jogador específico
    SetupForPlayer = function(player, config)
        config = config or {}
        
        -- Não configurar para jogadores mortos ou já com ESP
        if SevereLib.Cache.DeadPlayers[player] or SevereLib.ESP.PlayerObjects[player] then
            return
        end
        
        local character = getcharacter(player)
        if not character then return end
        
        -- Verificar se o jogador está vivo
        if not SevereLib.Util.IsPlayerAlive(player) then
            SevereLib.Cache.DeadPlayers[player] = true
            return
        end
        
        local rootPart = findfirstchild(character, "HumanoidRootPart")
        if not rootPart then return end
        
        local playerName = getname(player)
        local displayName = getdisplayname and getdisplayname(player) or playerName
        
        -- Obter cor da equipe se disponível
        local teamColor = {255, 255, 255}
        local team = getteam and getteam(player) or nil
        
        if team then
            local teamColorObj = getteamcolour and getteamcolour(team) or nil
            if teamColorObj then
                teamColor = {teamColorObj.r * 255, teamColorObj.g * 255, teamColorObj.b * 255}
            end
        end
        
        -- Adicionar ESP ao jogador
        local espObject = SevereLib.ESP.Add(rootPart, {
            Name = displayName,
            ShowBox = config.ShowBox == nil and true or config.ShowBox,
            ShowTracer = config.ShowTracer == nil and true or config.ShowTracer,
            ShowHealthBar = config.ShowHealthBar == nil and true or config.ShowHealthBar,
            MaxDistance = config.MaxDistance or 1000,
            Color = config.Color or teamColor,
            Player = player -- Referência ao jogador para rastreamento
        })
        
        return espObject
    end,
    
    -- Inicia o loop de renderização do ESP
    Start = function()
        if SevereLib.ESP.Running then return end
        
        SevereLib.ESP.Running = true
        
        spawn(function()
            while SevereLib.ESP.Running do
                -- Verificar novos jogadores
                pcall(function()
                    SevereLib.ESP.CheckNewPlayers()
                end)
                
                -- Verificar jogadores mortos
                pcall(function()
                    SevereLib.ESP.CheckDeadPlayers()
                end)
                
                -- Atualizar objetos ESP existentes
                for _, obj in pairs(SevereLib.ESP.Objects) do
                    pcall(function()
                        obj:Update()
                    end)
                end
                
                -- Limpar objetos inválidos periodicamente
                pcall(function()
                    SevereLib.ESP.CleanupInvalid()
                end)
                
                wait(SevereLib.Settings.UpdateRate)
            end
        end)
    end,
    
    -- Para o loop de renderização do ESP
    Stop = function()
        SevereLib.ESP.Running = false
        for _, obj in pairs(SevereLib.ESP.Objects) do
            obj:Hide()
        end
    end,
    
    -- Configura o ESP para jogadores
    SetupPlayerESP = function(playerFolder, config)
        config = config or {}
        
        -- Configurar ESP para todos os jogadores atuais
        for _, player in pairs(getchildren(playerFolder)) do
            local localPlayer = SevereLib.Player.GetLocalPlayer()
            if player ~= localPlayer then
                pcall(function()
                    SevereLib.ESP.SetupForPlayer(player, config)
                end)
            end
        end
        
        -- Iniciar o ESP se ainda não estiver rodando
        if not SevereLib.ESP.Running then
            SevereLib.ESP.Start()
        end
    end,
    
    -- Atualiza o ESP para um jogador específico
    UpdatePlayerESP = function(player, config)
        local espObject = SevereLib.ESP.PlayerObjects[player]
        
        if espObject then
            -- Atualizar propriedades existentes
            if config.Color then espObject.Color = config.Color end
            if config.ShowBox ~= nil then espObject.ShowBox = config.ShowBox end
            if config.ShowTracer ~= nil then espObject.ShowTracer = config.ShowTracer end
            if config.ShowDistance ~= nil then espObject.ShowDistance = config.ShowDistance end
            if config.MaxDistance then espObject.MaxDistance = config.MaxDistance end
            if config.Name then espObject.Name = config.Name end
            
            -- Atualizar propriedades dos objetos de desenho
            if config.Color then
                espObject.Text.Color = config.Color
                espObject.Circle.Color = config.Color
                if espObject.Box then espObject.Box.Color = config.Color end
                if espObject.Tracer then espObject.Tracer.Color = config.Color end
            end
            
            if config.TextSize then
                espObject.TextSize = config.TextSize
                espObject.Text.Size = config.TextSize
            end
        end
    end
}

-- Limpa todos os objetos de desenho quando o script for descarregado
SevereLib.Cleanup = function()
    SevereLib.ESP.Stop()
    SevereLib.ESP.Clear()
    
    for _, obj in pairs(SevereLib.Cache.DrawingObjects) do
        pcall(function()
            obj.Visible = false
            obj:Remove()
        end)
    end
    
    SevereLib.Cache.DrawingObjects = {}
    SevereLib.Cache.DeadPlayers = {}
    SevereLib.Cache.PlayerCharacters = {}
    print("SevereLib: Cleanup completed")
end

return SevereLib 
