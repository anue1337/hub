--[[
    Severe Helper Library (SevereLib)
    Criado para facilitar o desenvolvimento de scripts com funções úteis e otimizadas
    Foco em estabilidade e performance para sistemas ESP
]]

-- Implementação básica do ImprovedBoxes
local ImprovedBoxes = {
    BoxTypes = {
        CORNERS = 1,
        BOX_2D = 2,
        BOX_3D = 3,
        ROUNDED = 4,
        ADAPTIVE = 5,
        CORNERS_ADVANCED = 6
    },
    Config = {
        DefaultCornerSize = 0.3
    },
    DrawBoxESP = function(instance, config)
        local objects = {}
        -- Implementação básica do DrawBoxESP
        return objects
    end,
    HideAll = function()
        -- Implementação básica do HideAll
    end
}

local SevereLib = {}

-- Cache para evitar chamadas repetidas
SevereLib.Cache = {
    LocalPlayer = nil,
    Camera = nil,
    ESPObjects = {},
    DrawingObjects = {},
    PlayerCache = {},
    LastCheck = 0,
    DeadPlayers = {},
    PlayerCharacters = {}
}

-- Configurações
SevereLib.Settings = {
    UpdateRate = 1/60,
    MaxESPDistance = 1000,
    DefaultESPColor = {255, 255, 255},
    DefaultTracerColor = {255, 0, 0},
    DefaultBoxColor = {0, 255, 0},
    DefaultTextColor = {255, 255, 255},
    DefaultCircleColor = {255, 255, 0},
    DefaultTextSize = 13,
    DefaultFont = 2,
    DefaultCircleRadius = 3,
    DefaultBoxThickness = 1,
    DefaultTracerThickness = 1,
    DefaultTextOutlined = true,
    CleanupInterval = 1,
    PlayerCheckInterval = 0.5,
    DeadCheckInterval = 0.2,
    DefaultBoxType = ImprovedBoxes.BoxTypes.CORNERS,
    DefaultBoxFilled = false,
    DefaultBoxTransparency = 1,
    DefaultBoxFillTransparency = 0.3,
    DefaultCornerSize = ImprovedBoxes.Config.DefaultCornerSize
}

-- Funções de utilidade
SevereLib.Util = {
    IsDescendantOf = function(instance, ancestor)
        return isdescendantof(instance, ancestor)
    end,
    
    GetChildrenOfClass = function(parent, className)
        local results = {}
        for _, child in pairs(getchildren(parent)) do
            if getclassname(child) == className then
                table.insert(results, child)
            end
        end
        return results
    end,
    
    GetDistance = function(v1, v2)
        local dx, dy, dz
        
        if type(v1) == "table" and v1.x and v1.y and v1.z then
            if type(v2) == "table" and v2.x and v2.y and v2.z then
                dx, dy, dz = v1.x - v2.x, v1.y - v2.y, v1.z - v2.z
            else
                return 0
            end
        elseif type(v1) == "number" and type(v2) == "number" then
            local pos1 = getposition(v1)
            local pos2 = getposition(v2)
            if pos1 and pos2 then
                dx, dy, dz = pos1.x - pos2.x, pos1.y - pos2.y, pos1.z - pos2.z
            else
                return 0
            end
        else
            return 0
        end
        
        return math.sqrt(dx * dx + dy * dy + dz * dz)
    end,
    
    GetDistanceFromPlayer = function(instance)
        local player = SevereLib.Player.GetLocalPlayer()
        local character = getcharacter(player)
        if not character then return 999999 end
        
        local humanoidRootPart = findfirstchild(character, "HumanoidRootPart")
        if not humanoidRootPart then return 999999 end
        
        local instancePos
        if type(instance) == "table" and instance.x and instance.y and instance.z then
            instancePos = instance
        elseif type(instance) == "number" then
            instancePos = getposition(instance)
        else
            return 999999
        end
        
        return SevereLib.Util.GetDistance(getposition(humanoidRootPart), instancePos)
    end,
    
    IsPlayerValid = function(player)
        local playersService = findservice(Game, "Players")
        for _, p in pairs(getchildren(playersService)) do
            if p == player then
                return true
            end
        end
        return false
    end,
    
    IsPlayerAlive = function(player)
        local character = getcharacter(player)
        if not character then 
            return false 
        end
        
        local humanoid = findfirstchild(character, "Humanoid")
        if not humanoid then 
            return false 
        end
        
        local health = gethealth(humanoid)
        return health > 0
    end,
    
    IsInstanceValid = function(instance)
        if not instance then return false end
        
        local success, result = pcall(function()
            local parent = getparent(instance)
            return parent ~= nil
        end)
        
        return success and result
    end
}

-- Funções relacionadas ao jogador
SevereLib.Player = {
    GetLocalPlayer = function()
        if SevereLib.Cache.LocalPlayer then
            return SevereLib.Cache.LocalPlayer
        end
        
        local player = getlocalplayer()
        SevereLib.Cache.LocalPlayer = player
        return player
    end,
    
    GetLocalCharacter = function()
        local player = SevereLib.Player.GetLocalPlayer()
        return getcharacter(player)
    end,
    
    GetLocalPosition = function()
        local character = SevereLib.Player.GetLocalCharacter()
        if not character then return nil end
        
        local rootPart = findfirstchild(character, "HumanoidRootPart")
        if not rootPart then return nil end
        
        return getposition(rootPart)
    end,
    
    GetCamera = function()
        if SevereLib.Cache.Camera then
            return SevereLib.Cache.Camera
        end
        
        local workspace = findservice(Game, "Workspace")
        local camera = findfirstchild(workspace, "Camera")
        SevereLib.Cache.Camera = camera
        return camera
    end
}

-- Funções relacionadas ao ESP
SevereLib.ESP = {
    Running = false,
    Objects = {},
    PlayerObjects = {},
    LastPlayerCheck = 0,
    LastDeadCheck = 0,
    
    CreateDrawingObject = function(type, properties)
        local obj = Drawing.new(type)
        if properties then
            for prop, value in pairs(properties) do
                obj[prop] = value
            end
        end
        table.insert(SevereLib.Cache.DrawingObjects, obj)
        return obj
    end,
    
    RemoveDrawingObject = function(obj)
        if obj then
            obj.Visible = false
            pcall(function() obj:Remove() end)
            for i, v in pairs(SevereLib.Cache.DrawingObjects) do
                if v == obj then
                    table.remove(SevereLib.Cache.DrawingObjects, i)
                    break
                end
            end
        end
    end,
    
    CreateESPObject = function(instance, config)
        config = config or {}
        
        local espObject = {
            Instance = instance,
            Name = config.Name or getname(instance),
            Color = config.Color or SevereLib.Settings.DefaultESPColor,
            MaxDistance = config.MaxDistance or SevereLib.Settings.MaxESPDistance,
            ShowDistance = config.ShowDistance == nil and true or config.ShowDistance,
            ShowName = config.ShowName == nil and true or config.ShowName,
            ShowBox = config.ShowBox == nil and false or config.ShowBox,
            ShowTracer = config.ShowTracer == nil and false or config.ShowTracer,
            ShowHealthBar = config.ShowHealthBar == nil and false or config.ShowHealthBar,
            TextSize = config.TextSize or SevereLib.Settings.DefaultTextSize,
            Font = config.Font or SevereLib.Settings.DefaultFont,
            CircleRadius = config.CircleRadius or SevereLib.Settings.DefaultCircleRadius,
            BoxThickness = config.BoxThickness or SevereLib.Settings.DefaultBoxThickness,
            TracerThickness = config.TracerThickness or SevereLib.Settings.DefaultTracerThickness,
            TextOutlined = config.TextOutlined == nil and true or config.TextOutlined,
            Enabled = config.Enabled == nil and true or config.Enabled,
            BoxType = config.BoxType or SevereLib.Settings.DefaultBoxType,
            BoxFilled = config.BoxFilled or SevereLib.Settings.DefaultBoxFilled,
            BoxTransparency = config.BoxTransparency or SevereLib.Settings.DefaultBoxTransparency,
            BoxFillTransparency = config.BoxFillTransparency or SevereLib.Settings.DefaultBoxFillTransparency,
            CornerSize = config.CornerSize or SevereLib.Settings.DefaultCornerSize,
            
            Text = SevereLib.ESP.CreateDrawingObject("Text", {
                Text = "",
                Size = config.TextSize or SevereLib.Settings.DefaultTextSize,
                Center = true,
                Outline = config.TextOutlined == nil and true or config.TextOutlined,
                Color = config.Color or SevereLib.Settings.DefaultTextColor,
                Visible = false
            }),
            
            Circle = SevereLib.ESP.CreateDrawingObject("Circle", {
                Radius = config.CircleRadius or SevereLib.Settings.DefaultCircleRadius,
                NumSides = 12,
                Filled = true,
                Color = config.Color or SevereLib.Settings.DefaultCircleColor,
                Transparency = 0.8,
                Visible = false
            }),
            
            Update = function(self)
                if not self.Enabled or not self.Instance then
                    self:Hide()
                    return false
                end
                
                if not SevereLib.Util.IsInstanceValid(self.Instance) then
                    self:Hide()
                    return false
                end
                
                local camera = SevereLib.Player.GetCamera()
                if not camera then
                    self:Hide()
                    return false
                end
                
                local cameraPos = getposition(camera)
                if not cameraPos then
                    self:Hide()
                    return false
                end
                
                local instancePos = getposition(self.Instance)
                if not instancePos then
                    self:Hide()
                    return false
                end
                
                local distance = SevereLib.Util.GetDistance(cameraPos, instancePos)
                if distance > self.MaxDistance then
                    self:Hide()
                    return true
                end
                
                local espObjects = ImprovedBoxes.DrawBoxESP(self.Instance, {
                    BoxType = self.BoxType,
                    Color = self.Color,
                    Thickness = self.BoxThickness,
                    Filled = self.BoxFilled,
                    Transparency = self.BoxTransparency,
                    FillTransparency = self.BoxFillTransparency,
                    HealthBar = self.ShowHealthBar,
                    NameDisplay = self.ShowName,
                    DistanceDisplay = self.ShowDistance,
                    Tracer = self.ShowTracer,
                    CornerSize = self.CornerSize
                })
                
                for _, obj in ipairs(espObjects) do
                    if not table.find(SevereLib.Cache.DrawingObjects, obj) then
                        table.insert(SevereLib.Cache.DrawingObjects, obj)
                    end
                end
                
                return true
            end,
            
            Hide = function(self)
                if self.Text then self.Text.Visible = false end
                if self.Circle then self.Circle.Visible = false end
                if self.Tracer then self.Tracer.Visible = false end
                if self.Box then self.Box.Visible = false end
                if self.HealthBar then self.HealthBar.Visible = false end
                ImprovedBoxes.HideAll()
            end,
            
            Remove = function(self)
                pcall(function()
                    if self.Text then SevereLib.ESP.RemoveDrawingObject(self.Text) end
                    if self.Circle then SevereLib.ESP.RemoveDrawingObject(self.Circle) end
                    if self.Tracer then SevereLib.ESP.RemoveDrawingObject(self.Tracer) end
                    if self.Box then SevereLib.ESP.RemoveDrawingObject(self.Box) end
                    if self.HealthBar then SevereLib.ESP.RemoveDrawingObject(self.HealthBar) end
                end)
                
                for i, obj in pairs(SevereLib.ESP.Objects) do
                    if obj == self then
                        table.remove(SevereLib.ESP.Objects, i)
                        break
                    end
                end
            end
        }
        
        table.insert(SevereLib.ESP.Objects, espObject)
        return espObject
    end,
    
    Add = function(instance, config)
        return SevereLib.ESP.CreateESPObject(instance, config)
    end,
    
    Remove = function(instance)
        for i, obj in pairs(SevereLib.ESP.Objects) do
            if obj.Instance == instance then
                obj:Remove()
                break
            end
        end
    end,
    
    Clear = function()
        for _, obj in pairs(SevereLib.ESP.Objects) do
            obj:Remove()
        end
        SevereLib.ESP.Objects = {}
        SevereLib.ESP.PlayerObjects = {}
        SevereLib.Cache.DeadPlayers = {}
        SevereLib.Cache.PlayerCharacters = {}
    end,
    
    Start = function()
        if SevereLib.ESP.Running then return end
        
        SevereLib.ESP.Running = true
        
        spawn(function()
            while SevereLib.ESP.Running do
                for _, obj in pairs(SevereLib.ESP.Objects) do
                    pcall(function()
                        obj:Update()
                    end)
                end
                wait(SevereLib.Settings.UpdateRate)
            end
        end)
    end,
    
    Stop = function()
        SevereLib.ESP.Running = false
        for _, obj in pairs(SevereLib.ESP.Objects) do
            obj:Hide()
        end
    end,
    
    UpdatePlayerESP = function(instance, config)
        for _, obj in pairs(SevereLib.ESP.Objects) do
            if obj.Instance == instance then
                if config.Color then obj.Color = config.Color end
                if config.ShowBox ~= nil then obj.ShowBox = config.ShowBox end
                if config.ShowTracer ~= nil then obj.ShowTracer = config.ShowTracer end
                if config.ShowDistance ~= nil then obj.ShowDistance = config.ShowDistance end
                if config.MaxDistance then obj.MaxDistance = config.MaxDistance end
                if config.Name then obj.Name = config.Name end
                if config.BoxType then obj.BoxType = config.BoxType end
                if config.BoxFilled ~= nil then obj.BoxFilled = config.BoxFilled end
                if config.BoxTransparency then obj.BoxTransparency = config.BoxTransparency end
                if config.BoxFillTransparency then obj.BoxFillTransparency = config.BoxFillTransparency end
                if config.CornerSize then obj.CornerSize = config.CornerSize end
                break
            end
        end
    end
}

-- Limpa todos os objetos de desenho quando o script for descarregado
SevereLib.Cleanup = function()
    SevereLib.ESP.Stop()
    SevereLib.ESP.Clear()
    
    for _, obj in pairs(SevereLib.Cache.DrawingObjects) do
        pcall(function()
            obj.Visible = false
            obj:Remove()
        end)
    end

    SevereLib.Cache.DrawingObjects = {}
    SevereLib.Cache.DeadPlayers = {}
    SevereLib.Cache.PlayerCharacters = {}
end

return SevereLib 
