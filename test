--// SevereLib - Performance-optimized utility library
--// Main focus: ESP functionality, stability and performance

local SevereLib = {
    -- Cache for frequently used values
    Cache = {
        Screen = {x = 0, y = 0},
        Game = Game,
        Workspace = nil,
        LocalPlayer = nil,
        Camera = nil,
        Mouse = nil
    },
    -- ESP Settings
    ESP = {
        Enabled = true,
        MaxDistance = 1000,
        FontSize = 13,
        FontType = 2, -- Default to Plex
        ShowDistance = true,
        ShowHealth = true,
        ShowName = true,
        BoxType = 1, -- 1 = Corners, 2 = 2D Box, 3 = 3D Box
        BoxThickness = 1,
        BoxColors = {
            Default = {255, 255, 255},
            Team = {0, 255, 0},
            Enemy = {255, 0, 0},
            Neutral = {255, 255, 0}
        },
        TracerEnabled = false,
        TracerOrigin = 1, -- 1 = Bottom Center, 2 = Mouse Position
        TracerThickness = 1
    },
    -- Drawing cache to avoid recreating objects
    Drawings = {},
    -- Active ESP objects
    ActiveESP = {}
}

-- Initialize cache
function SevereLib:Init()
    self.Cache.Screen.x, self.Cache.Screen.y = getscreendimensions()
    self.Cache.Workspace = findfirstchildofclass(Game, "Workspace")
    self.Cache.LocalPlayer = getlocalplayer()
    self.Cache.Camera = findfirstchild(self.Cache.Workspace, "Camera")
    return self
end

-- Update screen dimensions (call periodically or on screen resize)
function SevereLib:UpdateScreen()
    self.Cache.Screen.x, self.Cache.Screen.y = getscreendimensions()
end

--// Utility Functions

-- Calculate distance between two positions
function SevereLib:GetDistance(pos1, pos2)
    local dx = pos1.x - pos2.x
    local dy = pos1.y - pos2.y
    local dz = pos1.z - pos2.z
    return math.sqrt(dx * dx + dy * dy + dz * dz)
end

-- Calculate distance from local player
function SevereLib:GetDistanceFromPlayer(position)
    local character = getcharacter(self.Cache.LocalPlayer)
    if not character then return 9999 end
    
    local rootPart = findfirstchild(character, "HumanoidRootPart")
    if not rootPart then return 9999 end
    
    local playerPos = getposition(rootPart)
    return self:GetDistance(playerPos, position)
end

-- Check if mouse is in specified area
function SevereLib:IsMouseInArea(x1, y1, x2, y2)
    local mousePos = getmouseposition()
    return mousePos.x > x1 and mousePos.y > y1 and mousePos.x < x2 and mousePos.y < y2
end

-- Get part position from instance
function SevereLib:GetPartPosition(instance)
    if not instance then return nil end
    return getposition(instance)
end

-- Get part from model (with fallback)
function SevereLib:GetMainPart(model)
    if not model then return nil end
    
    -- Try getting HumanoidRootPart first (for characters)
    local rootPart = findfirstchild(model, "HumanoidRootPart")
    if rootPart then return rootPart end
    
    -- Try getting PrimaryPart
    local primaryPart = getprimarypart(model)
    if primaryPart then return primaryPart end
    
    -- Try common part names
    for _, name in pairs({"MainPart", "Head", "Torso", "LowerTorso", "HumanoidRootPart"}) do
        local part = findfirstchild(model, name)
        if part then return part end
    end
    
    -- Fallback: return first part found
    for _, child in pairs(getchildren(model)) do
        local className = getclassname(child)
        if className == "Part" or className == "MeshPart" or className == "UnionOperation" then
            return child
        end
    end
    
    return nil
end

-- Get player's team (returns nil if no team)
function SevereLib:GetPlayerTeam(player)
    if not player then return nil end
    return getteam(player)
end

-- Check if player is on same team as local player
function SevereLib:IsSameTeam(player)
    if not player then return false end
    
    local playerTeam = self:GetPlayerTeam(player)
    local localTeam = self:GetPlayerTeam(self.Cache.LocalPlayer)
    
    if not playerTeam or not localTeam then return false end
    return playerTeam == localTeam
end

-- Get player from character model
function SevereLib:GetPlayerFromCharacter(character)
    if not character then return nil end
    
    local players = findservice(Game, "Players")
    for _, player in pairs(getchildren(players)) do
        if getcharacter(player) == character then
            return player
        end
    end
    
    return nil
end

--// Drawing Functions

-- Create new drawing object with properties
function SevereLib:CreateDrawing(type, properties)
    local drawing = Drawing.new(type)
    
    if properties then
        for property, value in pairs(properties) do
            drawing[property] = value
        end
    end
    
    return drawing
end

-- Create ESP components for an object
function SevereLib:CreateESPComponents()
    return {
        Name = self:CreateDrawing("Text", {
            Size = self.ESP.FontSize,
            Font = self.ESP.FontType,
            Outline = true,
            Center = true,
            Visible = false
        }),
        Box = self:CreateDrawing("Square", {
            Thickness = self.ESP.BoxThickness,
            Filled = false,
            Visible = false
        }),
        BoxCorners = {
            TopLeft = self:CreateDrawing("Line", {Thickness = self.ESP.BoxThickness, Visible = false}),
            TopRight = self:CreateDrawing("Line", {Thickness = self.ESP.BoxThickness, Visible = false}),
            BottomLeft = self:CreateDrawing("Line", {Thickness = self.ESP.BoxThickness, Visible = false}),
            BottomRight = self:CreateDrawing("Line", {Thickness = self.ESP.BoxThickness, Visible = false})
        },
        Tracer = self:CreateDrawing("Line", {
            Thickness = self.ESP.TracerThickness,
            Visible = false
        }),
        HealthBar = {
            Outline = self:CreateDrawing("Square", {
                Thickness = 1,
                Filled = false,
                Visible = false
            }),
            Fill = self:CreateDrawing("Square", {
                Filled = true,
                Visible = false
            })
        }
    }
end

-- Update ESP components based on object data
function SevereLib:UpdateESPComponent(espData)
    if not espData or not espData.Instance or not espData.Components then return end
    
    local mainPart = espData.MainPart
    if not mainPart then return end
    
    local position = self:GetPartPosition(mainPart)
    if not position then return end
    
    -- Get distance
    local distance = self:GetDistanceFromPlayer(position)
    if distance > self.ESP.MaxDistance then
        self:HideESPComponents(espData.Components)
        return
    end
    
    -- Convert 3D position to screen position
    local screenPosition, onScreen = worldtoscreenpoint({position.x, position.y, position.z})
    if not onScreen then
        self:HideESPComponents(espData.Components)
        return
    end
    
    -- Determine color based on settings
    local color = self.ESP.BoxColors.Default
    if espData.Player then
        color = self:IsSameTeam(espData.Player) and self.ESP.BoxColors.Team or self.ESP.BoxColors.Enemy
    end
    
    -- Update components
    
    -- Name and distance text
    if self.ESP.ShowName then
        local nameText = espData.Name or getname(espData.Instance)
        if self.ESP.ShowDistance then
            nameText = nameText .. " [" .. math.floor(distance) .. "m]"
        end
        
        espData.Components.Name.Text = nameText
        espData.Components.Name.Position = {screenPosition.x, screenPosition.y - 20}
        espData.Components.Name.Color = color
        espData.Components.Name.Visible = true
    else
        espData.Components.Name.Visible = false
    end
    
    -- Box size calculation depends on distance
    local boxSize = math.max(20, 80 - (distance / 10))
    local halfSize = boxSize / 2
    
    -- Update box based on type
    if self.ESP.BoxType == 1 then
        -- Corners (4 L shapes)
        local corners = espData.Components.BoxCorners
        
        -- Hide regular box
        espData.Components.Box.Visible = false
        
        -- Top Left Corner
        corners.TopLeft.From = {screenPosition.x - halfSize, screenPosition.y - halfSize}
        corners.TopLeft.To = {screenPosition.x - halfSize + 5, screenPosition.y - halfSize}
        corners.TopLeft.Color = color
        corners.TopLeft.Visible = true
        
        -- Top Right Corner
        corners.TopRight.From = {screenPosition.x + halfSize, screenPosition.y - halfSize}
        corners.TopRight.To = {screenPosition.x + halfSize - 5, screenPosition.y - halfSize}
        corners.TopRight.Color = color
        corners.TopRight.Visible = true
        
        -- Bottom Left Corner
        corners.BottomLeft.From = {screenPosition.x - halfSize, screenPosition.y + halfSize}
        corners.BottomLeft.To = {screenPosition.x - halfSize + 5, screenPosition.y + halfSize}
        corners.BottomLeft.Color = color
        corners.BottomLeft.Visible = true
        
        -- Bottom Right Corner
        corners.BottomRight.From = {screenPosition.x + halfSize, screenPosition.y + halfSize}
        corners.BottomRight.To = {screenPosition.x + halfSize - 5, screenPosition.y + halfSize}
        corners.BottomRight.Color = color
        corners.BottomRight.Visible = true
    else
        -- Full box
        espData.Components.Box.Position = {screenPosition.x - halfSize, screenPosition.y - halfSize}
        espData.Components.Box.Size = {boxSize, boxSize}
        espData.Components.Box.Color = color
        espData.Components.Box.Visible = true
        
        -- Hide corners
        for _, corner in pairs(espData.Components.BoxCorners) do
            corner.Visible = false
        end
    end
    
    -- Tracer
    if self.ESP.TracerEnabled then
        local tracerOrigin
        if self.ESP.TracerOrigin == 1 then
            tracerOrigin = {self.Cache.Screen.x / 2, self.Cache.Screen.y}
        else
            local mousePos = getmouseposition()
            tracerOrigin = {mousePos.x, mousePos.y}
        end
        
        espData.Components.Tracer.From = tracerOrigin
        espData.Components.Tracer.To = {screenPosition.x, screenPosition.y}
        espData.Components.Tracer.Color = color
        espData.Components.Tracer.Visible = true
    else
        espData.Components.Tracer.Visible = false
    end
    
    -- Health bar (if applicable)
    if self.ESP.ShowHealth and espData.Humanoid then
        local health = gethealth(espData.Humanoid)
        local maxHealth = getmaxhealth(espData.Humanoid)
        
        if health and maxHealth then
            local healthPercentage = math.clamp(health / maxHealth, 0, 1)
            
            -- Health bar position (to the left of the box)
            local barWidth = 3
            local barHeight = boxSize
            local barX = screenPosition.x - halfSize - 5 - barWidth
            local barY = screenPosition.y - halfSize
            
            -- Outline
            espData.Components.HealthBar.Outline.Position = {barX, barY}
            espData.Components.HealthBar.Outline.Size = {barWidth, barHeight}
            espData.Components.HealthBar.Outline.Color = {0, 0, 0}
            espData.Components.HealthBar.Outline.Visible = true
            
            -- Fill
            espData.Components.HealthBar.Fill.Position = {barX, barY + barHeight * (1 - healthPercentage)}
            espData.Components.HealthBar.Fill.Size = {barWidth, barHeight * healthPercentage}
            
            -- Color gradient: red to green based on health
            local r = math.floor((1 - healthPercentage) * 255)
            local g = math.floor(healthPercentage * 255)
            espData.Components.HealthBar.Fill.Color = {r, g, 0}
            espData.Components.HealthBar.Fill.Visible = true
        else
            espData.Components.HealthBar.Outline.Visible = false
            espData.Components.HealthBar.Fill.Visible = false
        end
    else
        espData.Components.HealthBar.Outline.Visible = false
        espData.Components.HealthBar.Fill.Visible = false
    end
end

-- Hide all ESP components
function SevereLib:HideESPComponents(components)
    if not components then return end
    
    components.Name.Visible = false
    components.Box.Visible = false
    components.Tracer.Visible = false
    components.HealthBar.Outline.Visible = false
    components.HealthBar.Fill.Visible = false
    
    for _, corner in pairs(components.BoxCorners) do
        corner.Visible = false
    end
end

-- Remove ESP components (cleanup)
function SevereLib:RemoveESPComponents(components)
    if not components then return end
    
    components.Name:Remove()
    components.Box:Remove()
    components.Tracer:Remove()
    components.HealthBar.Outline:Remove()
    components.HealthBar.Fill:Remove()
    
    for _, corner in pairs(components.BoxCorners) do
        corner:Remove()
    end
end

--// ESP Functions

-- Add ESP to an object
function SevereLib:AddESP(instance, options)
    if not instance then return nil end
    
    options = options or {}
    
    -- Check if already added
    for i, esp in pairs(self.ActiveESP) do
        if esp.Instance == instance then
            return esp
        end
    end
    
    -- Create ESP data
    local espData = {
        Instance = instance,
        Name = options.CustomName or getname(instance),
        MainPart = options.MainPart or self:GetMainPart(instance),
        Components = self:CreateESPComponents(),
        Color = options.Color or self.ESP.BoxColors.Default,
        IsVisible = true
    }
    
    -- If it's a player or character, get additional info
    local className = getclassname(instance)
    if className == "Player" then
        espData.Player = instance
        espData.Character = getcharacter(instance)
        if espData.Character then
            espData.Humanoid = findfirstchild(espData.Character, "Humanoid")
            if not espData.MainPart then
                espData.MainPart = self:GetMainPart(espData.Character)
            end
        end
    elseif className == "Model" then
        espData.Player = self:GetPlayerFromCharacter(instance)
        if espData.Player then
            espData.Character = instance
            espData.Humanoid = findfirstchild(instance, "Humanoid")
        end
    end
    
    -- Add to active ESP list
    table.insert(self.ActiveESP, espData)
    return espData
end

-- Remove ESP from an object
function SevereLib:RemoveESP(instance)
    for i, esp in pairs(self.ActiveESP) do
        if esp.Instance == instance then
            self:RemoveESPComponents(esp.Components)
            table.remove(self.ActiveESP, i)
            return true
        end
    end
    return false
end

-- Update all ESP objects
function SevereLib:UpdateESP()
    if not self.ESP.Enabled then
        for _, esp in pairs(self.ActiveESP) do
            self:HideESPComponents(esp.Components)
        end
        return
    end
    
    for i, esp in pairs(self.ActiveESP) do
        -- Check if instance still exists
        if esp.Instance and (isdescendantof(esp.Instance, Game) or esp.Instance == Game) then
            -- Update ESP if visible
            if esp.IsVisible then
                self:UpdateESPComponent(esp)
            else
                self:HideESPComponents(esp.Components)
            end
        else
            -- Instance no longer exists, remove it
            self:RemoveESPComponents(esp.Components)
            table.remove(self.ActiveESP, i)
        end
    end
end

-- Toggle ESP visibility
function SevereLib:ToggleESP(enabled)
    if enabled ~= nil then
        self.ESP.Enabled = enabled
    else
        self.ESP.Enabled = not self.ESP.Enabled
    end
    
    -- Hide all components if disabled
    if not self.ESP.Enabled then
        for _, esp in pairs(self.ActiveESP) do
            self:HideESPComponents(esp.Components)
        end
    end
    
    return self.ESP.Enabled
end

-- Set ESP max render distance
function SevereLib:SetESPMaxDistance(distance)
    self.ESP.MaxDistance = distance or 1000
end

-- Clean up all ESP objects and drawings
function SevereLib:Cleanup()
    for _, esp in pairs(self.ActiveESP) do
        self:RemoveESPComponents(esp.Components)
    end
    
    self.ActiveESP = {}
    
    -- Attempt to clear all drawings
    pcall(function()
        if Drawing and Drawing.clear then
            Drawing.clear()
        end
    end)
end

-- Return the library
return SevereLib:Init() 
