-- SevereUI Library
local SevereUI = {}

-- Constants
local MouseService = findservice(Game, "MouseService")
local Colors = {
    Window = {30, 30, 30},         -- Dark background
    Border = {60, 60, 60},         -- Subtle border
    Accent = {0, 180, 255},        -- Bright blue accent
    Text = {230, 230, 230},        -- Light text
    Shadow = {15, 15, 15},         -- Shadow color
    HeaderGradient = {35, 35, 35}  -- Slightly lighter header
}

-- Core functionalities
function SevereUI.new(options)
    options = options or {}
    local window = {
        Title = options.Title or "SevereUI",
        Size = options.Size or {500, 350},
        Position = options.Position or {200, 200},
        Visible = true,
        Dragging = false,
        DragOffset = {0, 0},
        Elements = {},
        Tabs = {},
        ActiveTab = nil
    }
    
    -- Create window background
    window.Background = Drawing.new("Square")
    window.Background.Size = {window.Size[1], window.Size[2]}
    window.Background.Position = {window.Position[1], window.Position[2]}
    window.Background.Color = Colors.Window
    window.Background.Filled = true
    window.Background.Visible = window.Visible
    window.Background.Transparency = 1
    
    -- Create window shadow for depth
    window.Shadow = Drawing.new("Square")
    window.Shadow.Size = {window.Size[1] + 10, window.Size[2] + 10}
    window.Shadow.Position = {window.Position[1] - 5, window.Position[2] - 5}
    window.Shadow.Color = Colors.Shadow
    window.Shadow.Filled = true
    window.Shadow.Visible = window.Visible
    window.Shadow.Transparency = 0.5
    window.Shadow.ZIndex = -1
    
    -- Create window border
    window.Border = Drawing.new("Square")
    window.Border.Size = {window.Size[1], window.Size[2]}
    window.Border.Position = {window.Position[1], window.Position[2]}
    window.Border.Color = Colors.Border
    window.Border.Filled = false
    window.Border.Thickness = 1.5
    window.Border.Visible = window.Visible
    window.Border.Transparency = 1
    
    -- Create header bar
    window.Header = Drawing.new("Square")
    window.Header.Size = {window.Size[1], 30}
    window.Header.Position = {window.Position[1], window.Position[2]}
    window.Header.Color = Colors.HeaderGradient
    window.Header.Filled = true
    window.Header.Visible = window.Visible
    window.Header.Transparency = 1
    
    -- Create header accent line
    window.HeaderAccent = Drawing.new("Square")
    window.HeaderAccent.Size = {window.Size[1], 2}
    window.HeaderAccent.Position = {window.Position[1], window.Position[2] + 30}
    window.HeaderAccent.Color = Colors.Accent
    window.HeaderAccent.Filled = true
    window.HeaderAccent.Visible = window.Visible
    window.HeaderAccent.Transparency = 1
    
    -- Create title text
    window.TitleText = Drawing.new("Text")
    window.TitleText.Text = window.Title
    window.TitleText.Size = 16
    window.TitleText.Font = 2
    window.TitleText.Color = Colors.Text
    window.TitleText.Position = {window.Position[1] + 10, window.Position[2] + 7}
    window.TitleText.Visible = window.Visible
    window.TitleText.Outline = true
    window.TitleText.OutlineColor = {10, 10, 10}
    window.TitleText.Transparency = 1
    
    -- Create close button
    window.CloseButton = Drawing.new("Square")
    window.CloseButton.Size = {16, 16}
    window.CloseButton.Position = {window.Position[1] + window.Size[1] - 25, window.Position[2] + 7}
    window.CloseButton.Color = {220, 50, 50}
    window.CloseButton.Filled = true
    window.CloseButton.Visible = window.Visible
    window.CloseButton.Transparency = 1
    
    -- Create minimize button
    window.MinimizeButton = Drawing.new("Square")
    window.MinimizeButton.Size = {16, 16}
    window.MinimizeButton.Position = {window.Position[1] + window.Size[1] - 50, window.Position[2] + 7}
    window.MinimizeButton.Color = {50, 180, 50}
    window.MinimizeButton.Filled = true
    window.MinimizeButton.Visible = window.Visible
    window.MinimizeButton.Transparency = 1
    
    -- Create content area
    window.Content = Drawing.new("Square")
    window.Content.Size = {window.Size[1] - 20, window.Size[2] - 50}
    window.Content.Position = {window.Position[1] + 10, window.Position[2] + 40}
    window.Content.Color = {40, 40, 40}
    window.Content.Filled = true
    window.Content.Visible = window.Visible
    window.Content.Transparency = 0.7
    
    -- Window methods
    function window:UpdatePosition()
        local pos = self.Position
        self.Background.Position = {pos[1], pos[2]}
        self.Shadow.Position = {pos[1] - 5, pos[2] - 5}
        self.Border.Position = {pos[1], pos[2]}
        self.Header.Position = {pos[1], pos[2]}
        self.HeaderAccent.Position = {pos[1], pos[2] + 30}
        self.TitleText.Position = {pos[1] + 10, pos[2] + 7}
        self.CloseButton.Position = {pos[1] + self.Size[1] - 25, pos[2] + 7}
        self.MinimizeButton.Position = {pos[1] + self.Size[1] - 50, pos[2] + 7}
        self.Content.Position = {pos[1] + 10, pos[2] + 40}
    end
    
    function window:IsHovered(object)
        if not self.Visible or not object or not object.Visible then return false end
        
        local mouse = getmouseposition()
        local pos = object.Position
        local size = object.Size
        
        return mouse.x >= pos.x and mouse.x <= pos.x + size.x and 
               mouse.y >= pos.y and mouse.y <= pos.y + size.y
    end
    
    function window:SetVisible(visible)
        self.Visible = visible
        self.Background.Visible = visible
        self.Shadow.Visible = visible
        self.Border.Visible = visible
        self.Header.Visible = visible
        self.HeaderAccent.Visible = visible
        self.TitleText.Visible = visible
        self.CloseButton.Visible = visible
        self.MinimizeButton.Visible = visible
        self.Content.Visible = visible
        
        -- Update visibility of all elements
        for _, element in ipairs(self.Elements) do
            if element.SetVisible then
                element:SetVisible(visible)
            end
        end
    end
    
    function window:Close()
        self:SetVisible(false)
        -- Cleanup code if needed
    end
    
    -- Handle window interactions
    spawn(function()
        while true do
            wait()
            
            local mouse = getmouseposition()
            local mouseClicked = isleftclicked()
            local mousePressed = isleftpressed()
            
            -- Handle dragging
            if window:IsHovered(window.Header) and mouseClicked and not window.Dragging then
                window.Dragging = true
                window.DragOffset = {
                    mouse.x - window.Position[1],
                    mouse.y - window.Position[2]
                }
            elseif window.Dragging and mousePressed then
                window.Position = {
                    mouse.x - window.DragOffset[1],
                    mouse.y - window.DragOffset[2]
                }
                window:UpdatePosition()
            elseif window.Dragging and not mousePressed then
                window.Dragging = false
            end
            
            -- Handle close button
            if window:IsHovered(window.CloseButton) and mouseClicked then
                window:Close()
            end
            
            -- Handle minimize button
            if window:IsHovered(window.MinimizeButton) and mouseClicked then
                -- Toggle visibility of content, but keep header
                window.Content.Visible = not window.Content.Visible
            end
        end
    end)
    
    return window
end

-- Return the library
return SevereUI
