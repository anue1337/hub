-- AugmentUI Library
-- A modern, clean UI library for Severe

local AugmentUI = {}
local ActiveWindow = nil
local MouseService = findservice(Game, "MouseService")
local RunService = findservice(Game, "RunService")

-- Mouse tracking implementation from original Severe UI
local Mouse = {
    X = 0,
    Y = 0,
    Clicked = false,
    Pressed = false
}

-- Utility functions
local Utility = {}

function Utility.GetMouse()
    local MouseLocation = getmouselocation(MouseService)
    -- Safer approach to extract mouse position
    local mX, mY
    
    if type(MouseLocation) == "table" and MouseLocation.x ~= nil then
        mX = MouseLocation.x
        mY = MouseLocation.y
    else
        -- Fallback values if not a table
        mX = 0
        mY = 0
    end
    
    return {
        X = mX, 
        Y = mY,
        Clicked = isleftclicked(),
        Pressed = isleftpressed(),
        Released = not isleftpressed() and Utility.LastPress
    }
end

Utility.LastPress = false

function Utility.IsHovered(Object)
    if not Object or not Object.Visible then return false end
    
    local Mouse = Utility.GetMouse()
    local Position = Object.Position
    
    if not Position then return false end
    
    if Object.Size then
        return Mouse.X >= Position.x and 
               Mouse.X <= Position.x + Object.Size.x and 
               Mouse.Y >= Position.y and 
               Mouse.Y <= Position.y + Object.Size.y
    elseif Object.TextBounds then
        local Bounds = Object.TextBounds
        local X, Y = Position.x, Position.y
        
        if Object.Center then
            X = X - Bounds.x / 2
        end
        Y = Y - Bounds.y / 4
        
        return Mouse.X >= X and 
               Mouse.X <= X + Bounds.x and 
               Mouse.Y >= Y and 
               Mouse.Y <= Y + Bounds.y
    end
    
    return false
end

-- Color theme
local Theme = {
    Background = {30, 30, 40},      -- Dark background
    Accent = {120, 80, 255},        -- Purple accent
    AccentDarker = {90, 60, 220},   -- Darker purple for borders
    Text = {240, 240, 255},         -- White text
    SubText = {180, 180, 200},      -- Slightly darker text
    WindowBorder = {50, 50, 65},    -- Window border
    WindowBackground = {20, 20, 30}, -- Window background
    Shadow = {10, 10, 15}          -- Shadow color
}

local IsDragging = false
local DragOffsetX = 0
local DragOffsetY = 0
local IsVisible = true
local IsToggled = false
local HoveredButton = nil
local Running = true

-- Helper functions borrowed from Severe UI
local function SetVisibility(Object, Visible)
    if Object and Object.Visible ~= nil then Object.Visible = Visible end
end

local function SetInterfaceVisibility(UI, Visible)
    for _, Element in pairs(UI) do
        if Element.Type == "Section" then
            SetVisibility(Element.Background, Visible)
            SetVisibility(Element.Border, Visible)
            SetVisibility(Element.Title, Visible)
            SetVisibility(Element.Underline, Visible)
            Element.Visible = Visible
            if Element.Items then
                for _, Item in pairs(Element.Items) do
                    for _, Property in pairs(Item.Elements) do
                        if Property.Visible ~= nil then SetVisibility(Property, Visible) end
                    end
                    Item.Visible = Visible
                end
            end
        else
            if Element.Visible ~= nil then SetVisibility(Element, Visible) end
            if Element.Elements then
                for _, SubElement in pairs(Element.Elements) do
                    if SubElement.Visible ~= nil then SetVisibility(SubElement, Visible) end
                end
            end
        end
    end
end

function AugmentUI:ToggleVisibility()
    IsVisible = not IsVisible
    
    if ActiveWindow then
        SetVisibility(ActiveWindow.Shadow, IsVisible)
        SetVisibility(ActiveWindow.Background, IsVisible)
        SetVisibility(ActiveWindow.Border, IsVisible)
        SetVisibility(ActiveWindow.TitleBar, IsVisible)
        SetVisibility(ActiveWindow.TitleAccent, IsVisible)
        SetVisibility(ActiveWindow.Logo, IsVisible)
        SetVisibility(ActiveWindow.TitleText, IsVisible)
        SetVisibility(ActiveWindow.TabContainer, IsVisible)
        SetVisibility(ActiveWindow.TabBorder, IsVisible)
        SetVisibility(ActiveWindow.ContentArea, IsVisible)
        
        for _, Tab in pairs(ActiveWindow.Tabs) do
            SetVisibility(Tab.Button, IsVisible)
            SetVisibility(Tab.Text, IsVisible)
            SetVisibility(Tab.Indicator, IsVisible and Tab.Active)
            
            if Tab.Active then
                for _, Section in pairs(Tab.Sections) do
                    SetInterfaceVisibility({Section}, IsVisible)
                end
            else
                for _, Section in pairs(Tab.Sections) do
                    SetInterfaceVisibility({Section}, false)
                end
            end
        end
        
        if not IsVisible then
            IsDragging = false
            HoveredButton = nil
        end
    end
    
    return IsVisible
end

function AugmentUI:IsHovered(Object)
    if not Object or not Object.Visible then return false end
    
    local Position = Object.Position
    
    if not Position then return false end
    
    if Object.Size then
        return Mouse.X >= Position.x and 
               Mouse.X <= Position.x + Object.Size.x and 
               Mouse.Y >= Position.y and 
               Mouse.Y <= Position.y + Object.Size.y
    elseif Object.TextBounds then
        local Bounds = Object.TextBounds
        local X, Y = Position.x, Position.y
        
        if Object.Center then
            X = X - Bounds.x / 2
        end
        Y = Y - Bounds.y / 4
        
        return Mouse.X >= X and 
               Mouse.X <= X + Bounds.x and 
               Mouse.Y >= Y and 
               Mouse.Y <= Y + Bounds.y
    end
    
    return false
end

function AugmentUI:CreateWindow(Options)
    Options = Options or {}
    
    local WindowWidth = Options.Width or 800
    local WindowHeight = Options.Height or 500
    local WindowTitle = Options.Title or "AugmentUI"
    
    -- Safe screen dimension handling
    local ScreenWidth, ScreenHeight = 1920, 1080
    
    -- Try to determine screen dimensions safely
    local ScreenDims = getscreendimensions()
    if type(ScreenDims) == "table" and ScreenDims.x then
        ScreenWidth = ScreenDims.x
        ScreenHeight = ScreenDims.y
    elseif type(ScreenDims) == "number" then
        ScreenWidth = ScreenDims
        ScreenHeight = ScreenDims -- Default fallback
    end
    
    local WindowPosition = Options.Position or {
        x = (ScreenWidth / 2) - (WindowWidth / 2),
        y = (ScreenHeight / 2) - (WindowHeight / 2)
    }
    
    if ActiveWindow then
        AugmentUI:Unload()
    end
    
    local Window = {
        Elements = {},
        Tabs = {},
        TabButtons = {},   -- Map tabName -> Tab for easier access
        TabContents = {},  -- Store tab content separately
        ActiveTab = nil,
        Position = WindowPosition,
        Size = {x = WindowWidth, y = WindowHeight},
        Title = WindowTitle,
        Draggable = Options.Draggable ~= false
    }

    -- Create shadow
    Window.Shadow = Drawing.new("Square")
    Window.Shadow.Size = {WindowWidth + 14, WindowHeight + 14}
    Window.Shadow.Position = {WindowPosition.x - 7, WindowPosition.y - 7}
    Window.Shadow.Color = Theme.Shadow
    Window.Shadow.Filled = true
    Window.Shadow.Transparency = 0.4
    Window.Shadow.Visible = IsVisible
    table.insert(Window.Elements, Window.Shadow)

    -- Main window background
    Window.Background = Drawing.new("Square")
    Window.Background.Size = {WindowWidth, WindowHeight}
    Window.Background.Position = {WindowPosition.x, WindowPosition.y}
    Window.Background.Color = Theme.WindowBackground
    Window.Background.Filled = true
    Window.Background.Transparency = 1
    Window.Background.Visible = IsVisible
    table.insert(Window.Elements, Window.Background)
    
    -- Window border
    Window.Border = Drawing.new("Square")
    Window.Border.Size = {WindowWidth, WindowHeight}
    Window.Border.Position = {WindowPosition.x, WindowPosition.y}
    Window.Border.Color = Theme.WindowBorder
    Window.Border.Filled = false
    Window.Border.Thickness = 1
    Window.Border.Transparency = 1
    Window.Border.Visible = IsVisible
    table.insert(Window.Elements, Window.Border)
    
    -- Title bar
    Window.TitleBar = Drawing.new("Square")
    Window.TitleBar.Size = {WindowWidth, 30}
    Window.TitleBar.Position = {WindowPosition.x, WindowPosition.y}
    Window.TitleBar.Color = Theme.Background
    Window.TitleBar.Filled = true
    Window.TitleBar.Transparency = 1
    Window.TitleBar.Visible = IsVisible
    table.insert(Window.Elements, Window.TitleBar)
    
    -- Title bar accent line
    Window.TitleAccent = Drawing.new("Square")
    Window.TitleAccent.Size = {WindowWidth, 2}
    Window.TitleAccent.Position = {WindowPosition.x, WindowPosition.y + 30}
    Window.TitleAccent.Color = Theme.Accent
    Window.TitleAccent.Filled = true
    Window.TitleAccent.Transparency = 1
    Window.TitleAccent.Visible = IsVisible
    table.insert(Window.Elements, Window.TitleAccent)

    -- Logo
    Window.Logo = Drawing.new("Image")
    Window.Logo.Url = "https://cdn.nest.rip/uploads/17230644-70b2-4de4-aa2b-17e23bc47a8c.png"
    Window.Logo.Position = {WindowPosition.x + 10, WindowPosition.y + 7}
    Window.Logo.Size = {16, 16}
    Window.Logo.Visible = IsVisible
    Window.Logo.Transparency = 1
    table.insert(Window.Elements, Window.Logo)
    
    -- Title text
    Window.TitleText = Drawing.new("Text")
    Window.TitleText.Text = WindowTitle
    Window.TitleText.Position = {WindowPosition.x + 34, WindowPosition.y + 7}
    Window.TitleText.Color = Theme.Text
    Window.TitleText.Size = 14
    Window.TitleText.Font = 2
    Window.TitleText.Outline = true
    Window.TitleText.OutlineColor = {0, 0, 0}
    Window.TitleText.Visible = IsVisible
    table.insert(Window.Elements, Window.TitleText)
    
    -- Tab container
    Window.TabContainer = Drawing.new("Square")
    Window.TabContainer.Size = {180, WindowHeight - 32}
    Window.TabContainer.Position = {WindowPosition.x, WindowPosition.y + 32}
    Window.TabContainer.Color = {Theme.Background[1] - 5, Theme.Background[2] - 5, Theme.Background[3] - 5}
    Window.TabContainer.Filled = true
    Window.TabContainer.Transparency = 1
    Window.TabContainer.Visible = IsVisible
    table.insert(Window.Elements, Window.TabContainer)
    
    -- Tab container border
    Window.TabBorder = Drawing.new("Square")
    Window.TabBorder.Size = {180, WindowHeight - 32}
    Window.TabBorder.Position = {WindowPosition.x, WindowPosition.y + 32}
    Window.TabBorder.Color = Theme.WindowBorder
    Window.TabBorder.Filled = false
    Window.TabBorder.Thickness = 1
    Window.TabBorder.Transparency = 1
    Window.TabBorder.Visible = IsVisible
    table.insert(Window.Elements, Window.TabBorder)
    
    -- Content area
    Window.ContentArea = Drawing.new("Square")
    Window.ContentArea.Size = {WindowWidth - 180, WindowHeight - 32}
    Window.ContentArea.Position = {WindowPosition.x + 180, WindowPosition.y + 32}
    Window.ContentArea.Color = Theme.WindowBackground
    Window.ContentArea.Filled = true
    Window.ContentArea.Transparency = 1
    Window.ContentArea.Visible = IsVisible
    table.insert(Window.Elements, Window.ContentArea)

    function Window:UpdatePosition(X, Y)
        self.Position = {x = X, y = Y}
        
        -- Update all elements' positions
        self.Shadow.Position = {X - 7, Y - 7}
        self.Background.Position = {X, Y}
        self.Border.Position = {X, Y}
        self.TitleBar.Position = {X, Y}
        self.TitleAccent.Position = {X, Y + 30}
        self.Logo.Position = {X + 10, Y + 7}
        self.TitleText.Position = {X + 34, Y + 7}
        self.TabContainer.Position = {X, Y + 32}
        self.TabBorder.Position = {X, Y + 32}
        self.ContentArea.Position = {X + 180, Y + 32}
        
        -- Update tabs and tab content
        self:UpdateTabPositions()
    end
    
    function Window:UpdateTabPositions()
        local TabCount = #self.Tabs
        if TabCount == 0 then return end
        
        local TabContainerPos = self.TabContainer.Position
        local TabContainerWidth = self.TabContainer.Size[1]
        local TabY = TabContainerPos.y
        local TabHeight = 30
        
        for i, Tab in ipairs(self.Tabs) do
            local CurrentTabY = TabY + ((i-1) * TabHeight) + 5
            
            -- Update tab button position
            Tab.Button.Position = {TabContainerPos.x + 5, CurrentTabY}
            Tab.ButtonBorder.Position = {TabContainerPos.x + 5, CurrentTabY}
            Tab.ButtonText.Position = {TabContainerPos.x + TabContainerWidth/2, CurrentTabY + TabHeight/2 - 7}
            Tab.SelectedHighlight.Position = {TabContainerPos.x + 5, CurrentTabY}
        end
    end
    
    function Window:SelectTab(TabName)
        if not self.TabButtons[TabName] then return end
        
        self.ActiveTab = TabName
        
        for OtherTabName, OtherTab in pairs(self.TabButtons) do
            local Selected = OtherTabName == TabName
            SetVisibility(OtherTab.SelectedHighlight, Selected and IsVisible)
            
            local Content = self.TabContents[OtherTabName]
            if Content then
                Content.Visible = Selected
                SetInterfaceVisibility(Content.LeftSections, Selected and IsVisible)
                SetInterfaceVisibility(Content.RightSections, Selected and IsVisible)
            end
        end
    end

    function Window:AddTab(TabName)
        TabName = TabName or "Tab " .. (#self.Tabs + 1)
        local TabCount = #self.Tabs
        local TabY = self.Position.y + 40 + (TabCount * 30)
        
        local Tab = {
            Name = TabName,
            Elements = {},
            Sections = {},
            Active = false
        }
        
        -- Create tab button using simplified approach
        Tab.Button = Drawing.new("Square")
        Tab.Button.Size = {170, 28}
        Tab.Button.Position = {self.Position.x + 5, TabY}
        Tab.Button.Color = Theme.Background
        Tab.Button.Filled = true
        Tab.Button.Transparency = 1
        Tab.Button.Visible = IsVisible
        table.insert(Tab.Elements, Tab.Button)
        table.insert(self.Elements, Tab.Button)
        
        -- Create tab label text
        Tab.Text = Drawing.new("Text")
        Tab.Text.Text = TabName
        Tab.Text.Position = {self.Position.x + 90, TabY + 14} -- Center position
        Tab.Text.Color = Theme.SubText
        Tab.Text.Size = 14
        Tab.Text.Font = 2
        Tab.Text.Outline = true
        Tab.Text.OutlineColor = {0, 0, 0}
        Tab.Text.Center = true
        Tab.Text.Visible = IsVisible
        table.insert(Tab.Elements, Tab.Text)
        table.insert(self.Elements, Tab.Text)
        
        -- Create active indicator
        Tab.Indicator = Drawing.new("Square")
        Tab.Indicator.Size = {3, 20}
        Tab.Indicator.Position = {self.Position.x + 5, TabY + 4}
        Tab.Indicator.Color = Theme.Accent
        Tab.Indicator.Filled = true
        Tab.Indicator.Transparency = 0 -- Initially transparent until selected
        Tab.Indicator.Visible = IsVisible
        table.insert(Tab.Elements, Tab.Indicator)
        table.insert(self.Elements, Tab.Indicator)
        
        -- Tab selection function
        function Tab:Select()
            for _, OtherTab in pairs(Window.Tabs) do
                OtherTab.Active = false
                OtherTab.Text.Color = Theme.SubText
                OtherTab.Indicator.Transparency = 0
                
                -- Hide all sections from other tabs
                for _, Section in pairs(OtherTab.Sections) do
                    for _, Element in pairs(Section.Elements) do
                        if Element.Visible ~= nil then
                            Element.Visible = false
                        end
                    end
                end
            end
            
            -- Activate this tab
            self.Active = true
            self.Text.Color = Theme.Text
            self.Indicator.Transparency = 1
            
            -- Show all sections for this tab
            for _, Section in pairs(self.Sections) do
                for _, Element in pairs(Section.Elements) do
                    if Element.Visible ~= nil then
                        Element.Visible = IsVisible
                    end
                end
            end
            
            Window.ActiveTab = self.Name
        end
        
        -- Position updating function
        function Tab:UpdatePosition(X, Y)
            local TabIndex = 0
            for i, t in pairs(Window.Tabs) do
                if t == self then
                    TabIndex = i
                    break
                end
            end
            
            local TabY = Y + 40 + ((TabIndex - 1) * 30)
            self.Button.Position = {X + 5, TabY}
            self.Text.Position = {X + 90, TabY + 14}
            self.Indicator.Position = {X + 5, TabY + 4}
            
            -- Update sections if they exist
            for _, Section in pairs(self.Sections) do
                if Section.UpdatePosition then
                    Section:UpdatePosition(X, Y)
                end
            end
        end
        
        -- Section creation function
        function Tab:AddSection(SectionName, SectionSide)
            local Side = SectionSide or "Left"
            local SectionX = Side == "Left" and self.Window.Position.x + 190 or self.Window.Position.x + 400
            
            local Section = {
                Name = SectionName,
                Elements = {},
                Items = {},
                Side = Side
            }
            
            -- Section background
            Section.Container = Drawing.new("Square")
            Section.Container.Size = {200, 0}  -- Height will be adjusted as items are added
            Section.Container.Position = {SectionX, self.Window.Position.y + 42}
            Section.Container.Color = Theme.Background
            Section.Container.Filled = true
            Section.Container.Transparency = 1
            Section.Container.Visible = self.Active and IsVisible
            table.insert(Section.Elements, Section.Container)
            table.insert(self.Elements, Section.Container)
            table.insert(self.Window.Elements, Section.Container)
            
            -- Section header
            Section.Title = Drawing.new("Text")
            Section.Title.Text = SectionName
            Section.Title.Position = {SectionX + 10, self.Window.Position.y + 45}
            Section.Title.Color = Theme.Text
            Section.Title.Size = 14
            Section.Title.Font = 2
            Section.Title.Outline = true
            Section.Title.OutlineColor = {0, 0, 0}
            Section.Title.Visible = self.Active and IsVisible
            table.insert(Section.Elements, Section.Title)
            table.insert(self.Elements, Section.Title)
            table.insert(self.Window.Elements, Section.Title)
            
            -- Underline
            Section.Underline = Drawing.new("Square")
            Section.Underline.Size = {180, 1}
            Section.Underline.Position = {SectionX + 10, self.Window.Position.y + 62}
            Section.Underline.Color = Theme.Accent
            Section.Underline.Filled = true
            Section.Underline.Transparency = 1
            Section.Underline.Visible = self.Active and IsVisible
            table.insert(Section.Elements, Section.Underline)
            table.insert(self.Elements, Section.Underline)
            table.insert(self.Window.Elements, Section.Underline)
            
            -- Position update function - empty for now, implement when needed
            function Section:UpdatePosition(X, Y)
                -- Implementation similar to the existing version but simplified
            end
            
            -- Button creation function - empty for now, implement when needed
            function Section:AddButton(Options)
                -- Implementation similar to the existing version but simplified
            end
            
            -- Toggle creation function - empty for now, implement when needed
            function Section:AddToggle(Options)
                -- Implementation similar to the existing version but simplified
            end
            
            -- Slider creation function - empty for now, implement when needed
            function Section:AddSlider(Options)
                -- Implementation similar to the existing version but simplified
            end
            
            table.insert(self.Sections, Section)
            return Section
        end
        
        -- Store window reference in the tab
        Tab.Window = self
        table.insert(self.Tabs, Tab)
        
        -- Select first tab by default
        if #self.Tabs == 1 then
            Tab:Select()
        end
        
        return Tab
    end
    
    function Window:Unload()
        for _, Element in pairs(self.Elements) do
            if Element.Remove then
                Element:Remove()
            end
        end
        
        if ActiveWindow == self then
            ActiveWindow = nil
        end
        
        IsDragging = false
    end
    
    ActiveWindow = Window
    return Window
end

function AugmentUI:Unload()
    Running = false
    if ActiveWindow then
        ActiveWindow:Unload()
    end
    Drawing.clear()
end

-- Main loop for mouse update and UI interactivity
spawn(function()
    while Running do
        -- Update mouse position
        local MouseLocation = getmouselocation(MouseService)
        if type(MouseLocation) == "table" then
            Mouse.X = MouseLocation.x or 0
            Mouse.Y = MouseLocation.y or 0
        else
            -- Fallback if getmouselocation doesn't return a table
            Mouse.X = 0
            Mouse.Y = 0
        end
        
        -- Update mouse states
        Mouse.Clicked = isleftclicked()
        Mouse.Pressed = isleftpressed()
        
        -- Handle UI interaction if a window is active
        if ActiveWindow and IsVisible then
            -- Handle window dragging
            if ActiveWindow.Draggable then
                if Mouse.Pressed and AugmentUI:IsHovered(ActiveWindow.TitleBar) and not IsDragging then
                    IsDragging = true
                    DragOffsetX = Mouse.X - ActiveWindow.Position.x
                    DragOffsetY = Mouse.Y - ActiveWindow.Position.y
                elseif Mouse.Pressed and IsDragging then
                    local NewX = Mouse.X - DragOffsetX
                    local NewY = Mouse.Y - DragOffsetY
                    ActiveWindow:UpdatePosition(NewX, NewY)
                elseif not Mouse.Pressed and IsDragging then
                    IsDragging = false
                end
            end
            
            -- Handle tab selection
            if Mouse.Clicked then
                for TabName, Tab in pairs(ActiveWindow.TabButtons) do
                    if AugmentUI:IsHovered(Tab.Button) then
                        ActiveWindow:SelectTab(TabName)
                        break
                    end
                end
            end
            
            -- Further UI interaction handling can be added here
        end
        
        wait()
    end
end)

-- Set up toggle keybind (P key by default)
spawn(function()
    while Running do
        local Keys = getpressedkeys()
        for _, Key in pairs(Keys) do
            if Key == "P" then
                IsToggled = true
                break
            end
        end
        
        if IsToggled then
            AugmentUI:ToggleVisibility()
        end
        
        IsToggled = false
        wait(0.1)
    end
end)

return AugmentUI 
