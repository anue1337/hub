-- AugmentUI Library
-- A modern, clean UI library for Severe

local AugmentUI = {}
local ActiveWindow = nil
local MouseService = findservice(Game, "MouseService")
local RunService = findservice(Game, "RunService")

-- Mouse tracking implementation from original Severe UI
local Mouse = {
    X = 0,
    Y = 0,
    Clicked = false,
    Pressed = false
}

-- Utility functions
local Utility = {}

function Utility.GetMouse()
    local MouseLocation = getmouselocation(MouseService)
    -- Safer approach to extract mouse position
    local mX, mY
    
    if type(MouseLocation) == "table" and MouseLocation.x ~= nil then
        mX = MouseLocation.x
        mY = MouseLocation.y
    else
        -- Fallback values if not a table
        mX = 0
        mY = 0
    end
    
    return {
        X = mX, 
        Y = mY,
        Clicked = isleftclicked(),
        Pressed = isleftpressed(),
        Released = not isleftpressed() and Utility.LastPress
    }
end

Utility.LastPress = false

function Utility.IsHovered(Object)
    if not Object or not Object.Visible then return false end
    
    local Mouse = Utility.GetMouse()
    local Position = Object.Position
    
    if not Position then return false end
    
    if Object.Size then
        return Mouse.X >= Position.x and 
               Mouse.X <= Position.x + Object.Size.x and 
               Mouse.Y >= Position.y and 
               Mouse.Y <= Position.y + Object.Size.y
    elseif Object.TextBounds then
        local Bounds = Object.TextBounds
        local X, Y = Position.x, Position.y
        
        if Object.Center then
            X = X - Bounds.x / 2
        end
        Y = Y - Bounds.y / 4
        
        return Mouse.X >= X and 
               Mouse.X <= X + Bounds.x and 
               Mouse.Y >= Y and 
               Mouse.Y <= Y + Bounds.y
    end
    
    return false
end

-- Color theme
local Theme = {
    Background = {30, 30, 40},      -- Dark background
    Accent = {120, 80, 255},        -- Purple accent
    AccentDarker = {90, 60, 220},   -- Darker purple for borders
    Text = {240, 240, 255},         -- White text
    SubText = {180, 180, 200},      -- Slightly darker text
    WindowBorder = {50, 50, 65},    -- Window border
    WindowBackground = {20, 20, 30}, -- Window background
    Shadow = {10, 10, 15}          -- Shadow color
}

local IsDragging = false
local DragOffsetX = 0
local DragOffsetY = 0
local IsVisible = true
local IsToggled = false
local HoveredButton = nil
local Running = true

-- Helper functions borrowed from Severe UI
local function SetVisibility(Object, Visible)
    if Object and Object.Visible ~= nil then Object.Visible = Visible end
end

local function SetInterfaceVisibility(UI, Visible)
    for _, Element in pairs(UI) do
        if Element.Type == "Section" then
            SetVisibility(Element.Background, Visible)
            SetVisibility(Element.Border, Visible)
            SetVisibility(Element.Title, Visible)
            SetVisibility(Element.Underline, Visible)
            Element.Visible = Visible
            if Element.Items then
                for _, Item in pairs(Element.Items) do
                    for _, Property in pairs(Item.Elements) do
                        if Property.Visible ~= nil then SetVisibility(Property, Visible) end
                    end
                    Item.Visible = Visible
                end
            end
        else
            if Element.Visible ~= nil then SetVisibility(Element, Visible) end
            if Element.Elements then
                for _, SubElement in pairs(Element.Elements) do
                    if SubElement.Visible ~= nil then SetVisibility(SubElement, Visible) end
                end
            end
        end
    end
end

function AugmentUI:ToggleVisibility()
    IsVisible = not IsVisible
    
    if ActiveWindow then
        SetVisibility(ActiveWindow.Shadow, IsVisible)
        SetVisibility(ActiveWindow.Background, IsVisible)
        SetVisibility(ActiveWindow.Border, IsVisible)
        SetVisibility(ActiveWindow.TitleBar, IsVisible)
        SetVisibility(ActiveWindow.TitleAccent, IsVisible)
        SetVisibility(ActiveWindow.Logo, IsVisible)
        SetVisibility(ActiveWindow.TitleText, IsVisible)
        SetVisibility(ActiveWindow.TabContainer, IsVisible)
        SetVisibility(ActiveWindow.TabBorder, IsVisible)
        SetVisibility(ActiveWindow.ContentArea, IsVisible)
        
        for _, Tab in pairs(ActiveWindow.Tabs) do
            SetVisibility(Tab.Button, IsVisible)
            SetVisibility(Tab.Text, IsVisible)
            SetVisibility(Tab.Indicator, IsVisible and Tab.Active)
            
            if Tab.Active then
                for _, Section in pairs(Tab.Sections) do
                    SetInterfaceVisibility({Section}, IsVisible)
                end
            else
                for _, Section in pairs(Tab.Sections) do
                    SetInterfaceVisibility({Section}, false)
                end
            end
        end
        
        if not IsVisible then
            IsDragging = false
            HoveredButton = nil
        end
    end
    
    return IsVisible
end

function AugmentUI:IsHovered(Object)
    if not Object or not Object.Visible then return false end
    
    local Position = Object.Position
    
    if not Position then return false end
    
    if Object.Size then
        return Mouse.X >= Position.x and 
               Mouse.X <= Position.x + Object.Size.x and 
               Mouse.Y >= Position.y and 
               Mouse.Y <= Position.y + Object.Size.y
    elseif Object.TextBounds then
        local Bounds = Object.TextBounds
        local X, Y = Position.x, Position.y
        
        if Object.Center then
            X = X - Bounds.x / 2
        end
        Y = Y - Bounds.y / 4
        
        return Mouse.X >= X and 
               Mouse.X <= X + Bounds.x and 
               Mouse.Y >= Y and 
               Mouse.Y <= Y + Bounds.y
    end
    
    return false
end

function AugmentUI:CreateWindow(Options)
    Options = Options or {}
    
    local WindowWidth = Options.Width or 800
    local WindowHeight = Options.Height or 500
    local WindowTitle = Options.Title or "AugmentUI"
    
    -- Safe screen dimension handling
    local ScreenWidth, ScreenHeight = 1920, 1080
    
    -- Try to determine screen dimensions safely
    local ScreenDims = getscreendimensions()
    if type(ScreenDims) == "table" and ScreenDims.x then
        ScreenWidth = ScreenDims.x
        ScreenHeight = ScreenDims.y
    elseif type(ScreenDims) == "number" then
        ScreenWidth = ScreenDims
        ScreenHeight = ScreenDims -- Default fallback
    end
    
    local WindowPosition = Options.Position or {
        x = (ScreenWidth / 2) - (WindowWidth / 2),
        y = (ScreenHeight / 2) - (WindowHeight / 2)
    }
    
    if ActiveWindow then
        AugmentUI:Unload()
    end
    
    local Window = {
        Elements = {},
        Tabs = {},
        TabButtons = {},   -- Map tabName -> Tab for easier access
        TabContents = {},  -- Store tab content separately
        ActiveTab = nil,
        Position = WindowPosition,
        Size = {x = WindowWidth, y = WindowHeight},
        Title = WindowTitle,
        Draggable = Options.Draggable ~= false
    }

    -- Create shadow
    Window.Shadow = Drawing.new("Square")
    Window.Shadow.Size = {WindowWidth + 14, WindowHeight + 14}
    Window.Shadow.Position = {WindowPosition.x - 7, WindowPosition.y - 7}
    Window.Shadow.Color = Theme.Shadow
    Window.Shadow.Filled = true
    Window.Shadow.Transparency = 0.4
    Window.Shadow.Visible = IsVisible
    table.insert(Window.Elements, Window.Shadow)

    -- Main window background
    Window.Background = Drawing.new("Square")
    Window.Background.Size = {WindowWidth, WindowHeight}
    Window.Background.Position = {WindowPosition.x, WindowPosition.y}
    Window.Background.Color = Theme.WindowBackground
    Window.Background.Filled = true
    Window.Background.Transparency = 1
    Window.Background.Visible = IsVisible
    table.insert(Window.Elements, Window.Background)
    
    -- Window border
    Window.Border = Drawing.new("Square")
    Window.Border.Size = {WindowWidth, WindowHeight}
    Window.Border.Position = {WindowPosition.x, WindowPosition.y}
    Window.Border.Color = Theme.WindowBorder
    Window.Border.Filled = false
    Window.Border.Thickness = 1
    Window.Border.Transparency = 1
    Window.Border.Visible = IsVisible
    table.insert(Window.Elements, Window.Border)
    
    -- Title bar
    Window.TitleBar = Drawing.new("Square")
    Window.TitleBar.Size = {WindowWidth, 30}
    Window.TitleBar.Position = {WindowPosition.x, WindowPosition.y}
    Window.TitleBar.Color = Theme.Background
    Window.TitleBar.Filled = true
    Window.TitleBar.Transparency = 1
    Window.TitleBar.Visible = IsVisible
    table.insert(Window.Elements, Window.TitleBar)
    
    -- Title bar accent line
    Window.TitleAccent = Drawing.new("Square")
    Window.TitleAccent.Size = {WindowWidth, 2}
    Window.TitleAccent.Position = {WindowPosition.x, WindowPosition.y + 30}
    Window.TitleAccent.Color = Theme.Accent
    Window.TitleAccent.Filled = true
    Window.TitleAccent.Transparency = 1
    Window.TitleAccent.Visible = IsVisible
    table.insert(Window.Elements, Window.TitleAccent)

    -- Logo
    Window.Logo = Drawing.new("Image")
    Window.Logo.Url = "https://cdn.nest.rip/uploads/17230644-70b2-4de4-aa2b-17e23bc47a8c.png"
    Window.Logo.Position = {WindowPosition.x + 10, WindowPosition.y + 7}
    Window.Logo.Size = {16, 16}
    Window.Logo.Visible = IsVisible
    Window.Logo.Transparency = 1
    table.insert(Window.Elements, Window.Logo)
    
    -- Title text
    Window.TitleText = Drawing.new("Text")
    Window.TitleText.Text = WindowTitle
    Window.TitleText.Position = {WindowPosition.x + 34, WindowPosition.y + 7}
    Window.TitleText.Color = Theme.Text
    Window.TitleText.Size = 14
    Window.TitleText.Font = 2
    Window.TitleText.Outline = true
    Window.TitleText.OutlineColor = {0, 0, 0}
    Window.TitleText.Visible = IsVisible
    table.insert(Window.Elements, Window.TitleText)
    
    -- Tab container
    Window.TabContainer = Drawing.new("Square")
    Window.TabContainer.Size = {180, WindowHeight - 32}
    Window.TabContainer.Position = {WindowPosition.x, WindowPosition.y + 32}
    Window.TabContainer.Color = {Theme.Background[1] - 5, Theme.Background[2] - 5, Theme.Background[3] - 5}
    Window.TabContainer.Filled = true
    Window.TabContainer.Transparency = 1
    Window.TabContainer.Visible = IsVisible
    table.insert(Window.Elements, Window.TabContainer)
    
    -- Tab container border
    Window.TabBorder = Drawing.new("Square")
    Window.TabBorder.Size = {180, WindowHeight - 32}
    Window.TabBorder.Position = {WindowPosition.x, WindowPosition.y + 32}
    Window.TabBorder.Color = Theme.WindowBorder
    Window.TabBorder.Filled = false
    Window.TabBorder.Thickness = 1
    Window.TabBorder.Transparency = 1
    Window.TabBorder.Visible = IsVisible
    table.insert(Window.Elements, Window.TabBorder)
    
    -- Content area
    Window.ContentArea = Drawing.new("Square")
    Window.ContentArea.Size = {WindowWidth - 180, WindowHeight - 32}
    Window.ContentArea.Position = {WindowPosition.x + 180, WindowPosition.y + 32}
    Window.ContentArea.Color = Theme.WindowBackground
    Window.ContentArea.Filled = true
    Window.ContentArea.Transparency = 1
    Window.ContentArea.Visible = IsVisible
    table.insert(Window.Elements, Window.ContentArea)

    function Window:UpdatePosition(X, Y)
        self.Position = {x = X, y = Y}
        
        -- Update all elements' positions
        self.Shadow.Position = {X - 7, Y - 7}
        self.Background.Position = {X, Y}
        self.Border.Position = {X, Y}
        self.TitleBar.Position = {X, Y}
        self.TitleAccent.Position = {X, Y + 30}
        self.Logo.Position = {X + 10, Y + 7}
        self.TitleText.Position = {X + 34, Y + 7}
        self.TabContainer.Position = {X, Y + 32}
        self.TabBorder.Position = {X, Y + 32}
        self.ContentArea.Position = {X + 180, Y + 32}
        
        -- Update tabs and tab content
        self:UpdateTabPositions()
    end
    
    function Window:UpdateTabPositions()
        local TabCount = #self.Tabs
        if TabCount == 0 then return end
        
        -- Use verificações de nil para evitar erros
        if not self.TabContainer or not self.TabContainer.Position then return end
        
        local TabContainerPos = self.TabContainer.Position
        local TabContainerWidth = self.TabContainer.Size[1]
        if not TabContainerPos or not TabContainerWidth then return end
        
        local TabY = TabContainerPos.y
        local TabHeight = 30
        
        for i, Tab in ipairs(self.Tabs) do
            if Tab and Tab.Button and Tab.ButtonBorder and Tab.ButtonText and Tab.SelectedHighlight then
                local CurrentTabY = TabY + ((i-1) * TabHeight) + 5
                
                -- Update tab button position
                Tab.Button.Position = {TabContainerPos.x + 5, CurrentTabY}
                Tab.ButtonBorder.Position = {TabContainerPos.x + 5, CurrentTabY}
                Tab.ButtonText.Position = {TabContainerPos.x + TabContainerWidth/2, CurrentTabY + TabHeight/2 - 7}
                Tab.SelectedHighlight.Position = {TabContainerPos.x + 5, CurrentTabY}
            end
        end
    end
    
    function Window:SelectTab(TabName)
        if not self.TabButtons[TabName] then return end
        
        self.ActiveTab = TabName
        
        for OtherTabName, OtherTab in pairs(self.TabButtons) do
            local Selected = OtherTabName == TabName
            SetVisibility(OtherTab.SelectedHighlight, Selected and IsVisible)
            
            local Content = self.TabContents[OtherTabName]
            if Content then
                Content.Visible = Selected
                SetInterfaceVisibility(Content.LeftSections, Selected and IsVisible)
                SetInterfaceVisibility(Content.RightSections, Selected and IsVisible)
            end
        end
    end

    function Window:AddTab(TabName)
        TabName = TabName or "Tab " .. (#self.Tabs + 1)
        local TabCount = #self.Tabs
        local TabButtonX = self.Position.x + 5
        local TabButtonY = self.Position.y + 40 + (TabCount * 30)
        
        -- Create tab content storage
        local TabContent = {
            Name = TabName,
            LeftSections = {},
            RightSections = {},
            Visible = false
        }
        
        -- Create tab button
        local TabButton = Drawing.new("Square")
        TabButton.Size = {170, 28}
        TabButton.Position = {TabButtonX, TabButtonY}
        TabButton.Color = Theme.Background
        TabButton.Filled = true
        TabButton.Transparency = 1
        TabButton.Visible = IsVisible
        table.insert(self.Elements, TabButton)
        
        -- Create button border
        local TabButtonBorder = Drawing.new("Square")
        TabButtonBorder.Size = {170, 28}
        TabButtonBorder.Position = {TabButtonX, TabButtonY}
        TabButtonBorder.Color = Theme.WindowBorder
        TabButtonBorder.Filled = false
        TabButtonBorder.Thickness = 1
        TabButtonBorder.Transparency = 1
        TabButtonBorder.Visible = IsVisible
        table.insert(self.Elements, TabButtonBorder)
        
        -- Create button text
        local TabButtonText = Drawing.new("Text")
        TabButtonText.Text = TabName
        TabButtonText.Position = {TabButtonX + 85, TabButtonY + 7}
        TabButtonText.Color = Theme.Text
        TabButtonText.Size = 14
        TabButtonText.Font = 2
        TabButtonText.Outline = true
        TabButtonText.OutlineColor = {0, 0, 0}
        TabButtonText.Center = true
        TabButtonText.Transparency = 1
        TabButtonText.Visible = IsVisible
        table.insert(self.Elements, TabButtonText)
        
        -- Create selected highlight
        local SelectedHighlight = Drawing.new("Square")
        SelectedHighlight.Size = {170, 28}
        SelectedHighlight.Position = {TabButtonX, TabButtonY}
        SelectedHighlight.Color = Theme.Accent
        SelectedHighlight.Filled = true
        SelectedHighlight.Transparency = 0.2
        SelectedHighlight.Visible = false
        table.insert(self.Elements, SelectedHighlight)
        
        -- Create Tab object with all required parts
        local Tab = {
            Name = TabName,
            Button = TabButton,
            ButtonBorder = TabButtonBorder,
            ButtonText = TabButtonText,
            SelectedHighlight = SelectedHighlight,
            Content = TabContent
        }
        
        -- Add section function
        function Tab:AddSection(SectionName, SectionSide)
            local Side = SectionSide or "Left"
            local SectionCollection = Side == "Left" and TabContent.LeftSections or TabContent.RightSections
            
            local ContentAreaX = self.Window.ContentArea.Position.x
            local ContentAreaY = self.Window.ContentArea.Position.y
            local ContentWidth = self.Window.ContentArea.Size[1]
            
            -- Calculate section position
            local SectionX = ContentAreaX + (Side == "Left" and 10 or ContentWidth/2 + 5)
            local SectionY = ContentAreaY + 10
            local SectionWidth = (ContentWidth / 2) - 15
            
            -- Calculate vertical positioning based on existing sections
            local VerticalOffset = 0
            for _, ExistingSection in ipairs(SectionCollection) do
                if ExistingSection.Container and ExistingSection.Container.Size then
                    VerticalOffset = VerticalOffset + ExistingSection.Container.Size[2] + 10
                end
            end
            
            SectionY = SectionY + VerticalOffset
            
            -- Create section
            local Section = {
                Name = SectionName,
                Type = "Section",
                Window = self.Window,
                Side = Side,
                Tab = self,
                Elements = {},
                Interfaces = {},
                Visible = self == self.Window.ActiveTab
            }
            
            -- Create section background
            Section.Background = Drawing.new("Square")
            Section.Background.Size = {SectionWidth, 30} -- Initial height
            Section.Background.Position = {SectionX, SectionY}
            Section.Background.Color = Theme.Background
            Section.Background.Filled = true
            Section.Background.Transparency = 1
            Section.Background.Visible = self.Active and IsVisible
            table.insert(Section.Elements, Section.Background)
            table.insert(self.Elements, Section.Background)
            
            -- Create section border
            Section.Border = Drawing.new("Square")
            Section.Border.Size = {SectionWidth, 30}
            Section.Border.Position = {SectionX, SectionY}
            Section.Border.Color = Theme.WindowBorder
            Section.Border.Filled = false
            Section.Border.Thickness = 1
            Section.Border.Transparency = 1
            Section.Border.Visible = self.Active and IsVisible
            table.insert(Section.Elements, Section.Border)
            table.insert(self.Elements, Section.Border)
            
            -- Create section title
            Section.Title = Drawing.new("Text")
            Section.Title.Text = SectionName
            Section.Title.Position = {SectionX + 10, SectionY + 8}
            Section.Title.Color = Theme.Text
            Section.Title.Size = 14
            Section.Title.Font = 2
            Section.Title.Outline = true
            Section.Title.OutlineColor = {0, 0, 0}
            Section.Title.Visible = self.Active and IsVisible
            table.insert(Section.Elements, Section.Title)
            table.insert(self.Elements, Section.Title)
            
            -- Section helper functions (implemented later)
            -- ...
            
            table.insert(SectionCollection, Section)
            return Section
        end
        
        -- Store Tab
        table.insert(self.Tabs, Tab)
        self.TabButtons[TabName] = Tab
        self.TabContents[TabName] = TabContent
        
        Tab.Window = self -- Back reference to window
        
        -- Select first tab by default
        if #self.Tabs == 1 then
            self:SelectTab(TabName)
        end
        
        return Tab
    end
    
    function Window:Unload()
        for _, Element in pairs(self.Elements) do
            if Element.Remove then
                Element:Remove()
            end
        end
        
        if ActiveWindow == self then
            ActiveWindow = nil
        end
        
        IsDragging = false
    end
    
    ActiveWindow = Window
    return Window
end

function AugmentUI:Unload()
    Running = false
    if ActiveWindow then
        ActiveWindow:Unload()
    end
    Drawing.clear()
end

-- Main loop for mouse update and UI interactivity
spawn(function()
    while Running do
        -- Update mouse position
        local MouseLocation = getmouselocation(MouseService)
        if type(MouseLocation) == "table" then
            Mouse.X = MouseLocation.x or 0
            Mouse.Y = MouseLocation.y or 0
        else
            -- Fallback if getmouselocation doesn't return a table
            Mouse.X = 0
            Mouse.Y = 0
        end
        
        -- Update mouse states
        local WasPressed = Utility.LastPress
        Mouse.Clicked = isleftclicked()
        Mouse.Pressed = isleftpressed()
        Mouse.Released = not Mouse.Pressed and WasPressed
        Utility.LastPress = Mouse.Pressed
        
        -- Handle UI interaction if a window is active
        if ActiveWindow and IsVisible then
            -- Handle window dragging
            if ActiveWindow.Draggable then
                if Mouse.Pressed and AugmentUI:IsHovered(ActiveWindow.TitleBar) and not IsDragging then
                    IsDragging = true
                    DragOffsetX = Mouse.X - ActiveWindow.Position.x
                    DragOffsetY = Mouse.Y - ActiveWindow.Position.y
                elseif Mouse.Pressed and IsDragging then
                    local NewX = Mouse.X - DragOffsetX
                    local NewY = Mouse.Y - DragOffsetY
                    ActiveWindow:UpdatePosition(NewX, NewY)
                elseif not Mouse.Pressed and IsDragging then
                    IsDragging = false
                end
            end
            
            -- Handle tab selection
            if Mouse.Clicked and not IsDragging then
                for TabName, Tab in pairs(ActiveWindow.TabButtons) do
                    if AugmentUI:IsHovered(Tab.Button) then
                        ActiveWindow:SelectTab(TabName)
                        break
                    end
                end
                
                -- Process interactions with UI elements
                if ActiveWindow.ActiveTab then
                    local CurrentTab = ActiveWindow.TabButtons[ActiveWindow.ActiveTab]
                    if CurrentTab and CurrentTab.Content then
                        -- Check left sections
                        for _, Section in ipairs(CurrentTab.Content.LeftSections) do
                            if Section.Interfaces then
                                for _, Interface in ipairs(Section.Interfaces) do
                                    -- Handle button clicks
                                    if Interface.Type == "Button" and Interface.ButtonBackground and AugmentUI:IsHovered(Interface.ButtonBackground) then
                                        -- Visual feedback
                                        Interface.ButtonBackground.Color = Theme.Accent
                                        Interface.ButtonText.Color = {255, 255, 255}
                                        
                                        -- Execute callback
                                        spawn(Interface.Callback)
                                        
                                        -- Reset appearance after a short delay
                                        spawn(function()
                                            wait(0.1)
                                            Interface.ButtonBackground.Color = Theme.Background
                                            Interface.ButtonText.Color = Theme.Text
                                        end)
                                    -- Handle toggle clicks
                                    elseif Interface.Type == "Toggle" then
                                        local ToggleClicked = AugmentUI:IsHovered(Interface.OuterBox) or AugmentUI:IsHovered(Interface.Text)
                                        if ToggleClicked then
                                            Interface:SetState(not Interface.State)
                                        end
                                    end
                                end
                            end
                        end
                        
                        -- Check right sections
                        for _, Section in ipairs(CurrentTab.Content.RightSections) do
                            if Section.Interfaces then
                                for _, Interface in ipairs(Section.Interfaces) do
                                    -- Handle button clicks
                                    if Interface.Type == "Button" and Interface.ButtonBackground and AugmentUI:IsHovered(Interface.ButtonBackground) then
                                        -- Visual feedback
                                        Interface.ButtonBackground.Color = Theme.Accent
                                        Interface.ButtonText.Color = {255, 255, 255}
                                        
                                        -- Execute callback
                                        spawn(Interface.Callback)
                                        
                                        -- Reset appearance after a short delay
                                        spawn(function()
                                            wait(0.1)
                                            Interface.ButtonBackground.Color = Theme.Background
                                            Interface.ButtonText.Color = Theme.Text
                                        end)
                                    -- Handle toggle clicks
                                    elseif Interface.Type == "Toggle" then
                                        local ToggleClicked = AugmentUI:IsHovered(Interface.OuterBox) or AugmentUI:IsHovered(Interface.Text)
                                        if ToggleClicked then
                                            Interface:SetState(not Interface.State)
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            
            -- Handle slider dragging
            if ActiveWindow.ActiveTab then
                local CurrentTab = ActiveWindow.TabButtons[ActiveWindow.ActiveTab]
                if CurrentTab and CurrentTab.Content then
                    local function ProcessSliders(Sections)
                        for _, Section in ipairs(Sections) do
                            if Section.Interfaces then
                                for _, Interface in ipairs(Section.Interfaces) do
                                    if Interface.Type == "Slider" then
                                        -- Start dragging
                                        if AugmentUI:IsHovered(Interface.Background) and Mouse.Pressed then
                                            Interface.Dragging = true
                                        end
                                        
                                        -- Handle dragging
                                        if Interface.Dragging then
                                            if Mouse.Pressed then
                                                local SliderWidth = Interface.Background.Size[1]
                                                local RelativeX = math.clamp(Mouse.X - Interface.Background.Position.x, 0, SliderWidth)
                                                local NewValue = Interface.Min + ((RelativeX / SliderWidth) * (Interface.Max - Interface.Min))
                                                Interface:SetValue(NewValue)
                                            else
                                                Interface.Dragging = false
                                            end
                                        end
                                        
                                        -- Visual feedback
                                        if AugmentUI:IsHovered(Interface.Background) or Interface.Dragging then
                                            Interface.Border.Color = Theme.Accent
                                        else
                                            Interface.Border.Color = Theme.WindowBorder
                                        end
                                    elseif Interface.Type == "Button" then
                                        -- Button hover effect
                                        if AugmentUI:IsHovered(Interface.ButtonBackground) then
                                            Interface.ButtonBorder.Color = Theme.Accent
                                        else
                                            Interface.ButtonBorder.Color = Theme.WindowBorder
                                        end
                                    elseif Interface.Type == "Toggle" then
                                        -- Toggle hover effect
                                        if AugmentUI:IsHovered(Interface.OuterBox) or AugmentUI:IsHovered(Interface.Text) then
                                            if not Interface.State then
                                                Interface.OuterBox.Color = Theme.Accent
                                            end
                                        else
                                            if not Interface.State then
                                                Interface.OuterBox.Color = Theme.WindowBorder
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                    
                    -- Process both left and right sections
                    ProcessSliders(CurrentTab.Content.LeftSections)
                    ProcessSliders(CurrentTab.Content.RightSections)
                end
            end
        end
        
        wait()
    end
end)

-- Set up toggle keybind (P key by default)
spawn(function()
    while Running do
        local Keys = getpressedkeys()
        for _, Key in pairs(Keys) do
            if Key == "P" then
                IsToggled = true
                break
            end
        end
        
        if IsToggled then
            AugmentUI:ToggleVisibility()
        end
        
        IsToggled = false
        wait(0.1)
    end
end)

-- Section helper functions - implementando métodos de interface
-- Adicionar antes da linha "table.insert(SectionCollection, Section)"

-- Método para adicionar um botão
function Section:AddButton(Options)
    local Name = Options.Name or "Button"
    local Callback = Options.Callback or function() end
    local Height = 30
    
    -- Calcular posição Y baseada em interfaces existentes
    local InterfaceY = Section.Background.Position.y + 30
    for _, Interface in ipairs(Section.Interfaces) do
        InterfaceY = InterfaceY + Interface.Height + 5
    end
    
    local Button = {
        Type = "Button",
        Name = Name,
        Callback = Callback,
        Height = Height
    }
    
    -- Criar fundo do botão
    Button.ButtonBackground = Drawing.new("Square")
    Button.ButtonBackground.Size = {Section.Background.Size[1] - 20, Height}
    Button.ButtonBackground.Position = {Section.Background.Position.x + 10, InterfaceY}
    Button.ButtonBackground.Color = Theme.Background
    Button.ButtonBackground.Filled = true
    Button.ButtonBackground.Transparency = 1
    Button.ButtonBackground.Visible = Section.Visible and IsVisible
    
    -- Criar borda do botão
    Button.ButtonBorder = Drawing.new("Square")
    Button.ButtonBorder.Size = {Section.Background.Size[1] - 20, Height}
    Button.ButtonBorder.Position = {Section.Background.Position.x + 10, InterfaceY}
    Button.ButtonBorder.Color = Theme.WindowBorder
    Button.ButtonBorder.Filled = false
    Button.ButtonBorder.Thickness = 1
    Button.ButtonBorder.Transparency = 1
    Button.ButtonBorder.Visible = Section.Visible and IsVisible
    
    -- Criar texto do botão
    Button.ButtonText = Drawing.new("Text")
    Button.ButtonText.Text = Name
    Button.ButtonText.Position = {
        Section.Background.Position.x + Section.Background.Size[1]/2, 
        InterfaceY + Height/2 - 7
    }
    Button.ButtonText.Color = Theme.Text
    Button.ButtonText.Size = 14
    Button.ButtonText.Font = 2
    Button.ButtonText.Center = true
    Button.ButtonText.Outline = true
    Button.ButtonText.OutlineColor = {0, 0, 0}
    Button.ButtonText.Visible = Section.Visible and IsVisible
    
    -- Adicionar elementos à seção
    table.insert(Section.Elements, Button.ButtonBackground)
    table.insert(Section.Elements, Button.ButtonBorder)
    table.insert(Section.Elements, Button.ButtonText)
    table.insert(Section.Tab.Elements, Button.ButtonBackground)
    table.insert(Section.Tab.Elements, Button.ButtonBorder)
    table.insert(Section.Tab.Elements, Button.ButtonText)
    table.insert(Section.Window.Elements, Button.ButtonBackground)
    table.insert(Section.Window.Elements, Button.ButtonBorder)
    table.insert(Section.Window.Elements, Button.ButtonText)
    
    -- Atualizar tamanho da seção
    local NewHeight = (InterfaceY + Height) - Section.Background.Position.y + 10
    Section.Background.Size = {Section.Background.Size[1], NewHeight}
    Section.Border.Size = {Section.Border.Size[1], NewHeight}
    
    table.insert(Section.Interfaces, Button)
    return Button
end

-- Método para adicionar um toggle
function Section:AddToggle(Options)
    local Name = Options.Name or "Toggle"
    local Default = Options.Default or false
    local Callback = Options.Callback or function() end
    local Height = 25
    
    -- Calcular posição Y baseada em interfaces existentes
    local InterfaceY = Section.Background.Position.y + 30
    for _, Interface in ipairs(Section.Interfaces) do
        InterfaceY = InterfaceY + Interface.Height + 5
    end
    
    local Toggle = {
        Type = "Toggle",
        Name = Name,
        State = Default,
        Callback = Callback,
        Height = Height
    }
    
    -- Criar caixa externa do toggle
    Toggle.OuterBox = Drawing.new("Square")
    Toggle.OuterBox.Size = {16, 16}
    Toggle.OuterBox.Position = {Section.Background.Position.x + 10, InterfaceY + 4}
    Toggle.OuterBox.Color = Theme.WindowBorder
    Toggle.OuterBox.Filled = false
    Toggle.OuterBox.Thickness = 1
    Toggle.OuterBox.Transparency = 1
    Toggle.OuterBox.Visible = Section.Visible and IsVisible
    
    -- Criar caixa interna do toggle
    Toggle.InnerBox = Drawing.new("Square")
    Toggle.InnerBox.Size = {14, 14}
    Toggle.InnerBox.Position = {Section.Background.Position.x + 11, InterfaceY + 5}
    Toggle.InnerBox.Color = Default and Theme.Accent or Theme.Background
    Toggle.InnerBox.Filled = true
    Toggle.InnerBox.Transparency = Default and 1 or 0.5
    Toggle.InnerBox.Visible = Section.Visible and IsVisible
    
    -- Criar texto do toggle
    Toggle.Text = Drawing.new("Text")
    Toggle.Text.Text = Name
    Toggle.Text.Position = {Section.Background.Position.x + 35, InterfaceY + 5}
    Toggle.Text.Color = Theme.Text
    Toggle.Text.Size = 14
    Toggle.Text.Font = 2
    Toggle.Text.Outline = true
    Toggle.Text.OutlineColor = {0, 0, 0}
    Toggle.Text.Visible = Section.Visible and IsVisible
    
    -- Adicionar função para alterar estado
    function Toggle:SetState(NewState)
        self.State = NewState
        self.InnerBox.Color = NewState and Theme.Accent or Theme.Background
        self.InnerBox.Transparency = NewState and 1 or 0.5
        
        -- Chamar callback
        spawn(function()
            self.Callback(NewState)
        end)
    end
    
    -- Adicionar elementos à seção
    table.insert(Section.Elements, Toggle.OuterBox)
    table.insert(Section.Elements, Toggle.InnerBox)
    table.insert(Section.Elements, Toggle.Text)
    table.insert(Section.Tab.Elements, Toggle.OuterBox)
    table.insert(Section.Tab.Elements, Toggle.InnerBox)
    table.insert(Section.Tab.Elements, Toggle.Text)
    table.insert(Section.Window.Elements, Toggle.OuterBox)
    table.insert(Section.Window.Elements, Toggle.InnerBox)
    table.insert(Section.Window.Elements, Toggle.Text)
    
    -- Atualizar tamanho da seção
    local NewHeight = (InterfaceY + Height) - Section.Background.Position.y + 10
    Section.Background.Size = {Section.Background.Size[1], NewHeight}
    Section.Border.Size = {Section.Border.Size[1], NewHeight}
    
    table.insert(Section.Interfaces, Toggle)
    return Toggle
end

-- Método para adicionar um slider
function Section:AddSlider(Options)
    local Name = Options.Name or "Slider"
    local Min = Options.Min or 0
    local Max = Options.Max or 100
    local Default = math.clamp(Options.Default or ((Max - Min) / 2) + Min, Min, Max)
    local Callback = Options.Callback or function() end
    local Height = 40
    local Units = Options.Units or ""
    local Increment = Options.Increment or 1
    
    -- Calcular posição Y baseada em interfaces existentes
    local InterfaceY = Section.Background.Position.y + 30
    for _, Interface in ipairs(Section.Interfaces) do
        InterfaceY = InterfaceY + Interface.Height + 5
    end
    
    local Slider = {
        Type = "Slider",
        Name = Name,
        Min = Min,
        Max = Max,
        Value = Default,
        Units = Units,
        Increment = Increment,
        Callback = Callback,
        Height = Height,
        Dragging = false
    }
    
    -- Criar texto do slider
    Slider.Text = Drawing.new("Text")
    Slider.Text.Text = Name
    Slider.Text.Position = {Section.Background.Position.x + 10, InterfaceY}
    Slider.Text.Color = Theme.Text
    Slider.Text.Size = 14
    Slider.Text.Font = 2
    Slider.Text.Outline = true
    Slider.Text.OutlineColor = {0, 0, 0}
    Slider.Text.Visible = Section.Visible and IsVisible
    
    -- Criar fundo do slider
    Slider.Background = Drawing.new("Square")
    Slider.Background.Size = {Section.Background.Size[1] - 20, 10}
    Slider.Background.Position = {Section.Background.Position.x + 10, InterfaceY + 20}
    Slider.Background.Color = Theme.Background
    Slider.Background.Filled = true
    Slider.Background.Transparency = 1
    Slider.Background.Visible = Section.Visible and IsVisible
    
    -- Criar borda do slider
    Slider.Border = Drawing.new("Square")
    Slider.Border.Size = {Section.Background.Size[1] - 20, 10}
    Slider.Border.Position = {Section.Background.Position.x + 10, InterfaceY + 20}
    Slider.Border.Color = Theme.WindowBorder
    Slider.Border.Filled = false
    Slider.Border.Thickness = 1
    Slider.Border.Transparency = 1
    Slider.Border.Visible = Section.Visible and IsVisible
    
    -- Calcular largura do preenchimento
    local SliderWidth = Section.Background.Size[1] - 20
    local FillWidth = ((Default - Min) / (Max - Min)) * SliderWidth
    
    -- Criar preenchimento do slider
    Slider.Fill = Drawing.new("Square")
    Slider.Fill.Size = {FillWidth, 10}
    Slider.Fill.Position = {Section.Background.Position.x + 10, InterfaceY + 20}
    Slider.Fill.Color = Theme.Accent
    Slider.Fill.Filled = true
    Slider.Fill.Transparency = 0.7
    Slider.Fill.Visible = Section.Visible and IsVisible
    
    -- Criar texto do valor
    Slider.ValueText = Drawing.new("Text")
    Slider.ValueText.Text = tostring(Default) .. Units
    Slider.ValueText.Position = {
        Section.Background.Position.x + Section.Background.Size[1] - 30,
        InterfaceY
    }
    Slider.ValueText.Color = Theme.Text
    Slider.ValueText.Size = 14
    Slider.ValueText.Font = 2
    Slider.ValueText.Center = true
    Slider.ValueText.Outline = true
    Slider.ValueText.OutlineColor = {0, 0, 0}
    Slider.ValueText.Visible = Section.Visible and IsVisible
    
    -- Adicionar função para atualizar valor
    function Slider:SetValue(NewValue)
        -- Limitar valor entre Min e Max
        NewValue = math.clamp(NewValue, self.Min, self.Max)
        
        -- Aplicar incremento
        if self.Increment > 0 then
            NewValue = self.Min + (math.floor((NewValue - self.Min) / self.Increment + 0.5) * self.Increment)
        end
        
        self.Value = NewValue
        
        -- Atualizar tamanho do preenchimento
        local SliderWidth = Section.Background.Size[1] - 20
        local FillWidth = ((self.Value - self.Min) / (self.Max - self.Min)) * SliderWidth
        self.Fill.Size = {FillWidth, 10}
        
        -- Atualizar texto do valor
        if self.Increment < 1 then
            -- Formato para casas decimais
            local DecimalPlaces = math.max(0, math.ceil(math.abs(math.log10(self.Increment))))
            local Format = "%." .. DecimalPlaces .. "f%s"
            self.ValueText.Text = string.format(Format, self.Value, self.Units)
        else
            -- Formato inteiro
            self.ValueText.Text = tostring(math.floor(self.Value)) .. self.Units
        end
        
        -- Chamar callback
        spawn(function()
            self.Callback(self.Value)
        end)
    end
    
    -- Adicionar elementos à seção
    table.insert(Section.Elements, Slider.Text)
    table.insert(Section.Elements, Slider.Background)
    table.insert(Section.Elements, Slider.Border)
    table.insert(Section.Elements, Slider.Fill)
    table.insert(Section.Elements, Slider.ValueText)
    table.insert(Section.Tab.Elements, Slider.Text)
    table.insert(Section.Tab.Elements, Slider.Background)
    table.insert(Section.Tab.Elements, Slider.Border)
    table.insert(Section.Tab.Elements, Slider.Fill)
    table.insert(Section.Tab.Elements, Slider.ValueText)
    table.insert(Section.Window.Elements, Slider.Text)
    table.insert(Section.Window.Elements, Slider.Background)
    table.insert(Section.Window.Elements, Slider.Border)
    table.insert(Section.Window.Elements, Slider.Fill)
    table.insert(Section.Window.Elements, Slider.ValueText)
    
    -- Atualizar tamanho da seção
    local NewHeight = (InterfaceY + Height) - Section.Background.Position.y + 10
    Section.Background.Size = {Section.Background.Size[1], NewHeight}
    Section.Border.Size = {Section.Border.Size[1], NewHeight}
    
    table.insert(Section.Interfaces, Slider)
    return Slider
end

return AugmentUI 
