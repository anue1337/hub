-- SenseHub V2 - UI Library
-- Combines SenseHub visuals with enhanced functionality

-- Default colors (based on SenseHub)
local Colors = {
    ["WindowBg"] = {15, 15, 15},
    ["SidebarBg"] = {22, 22, 22},
    ["ContentBg"] = {18, 18, 18},
    ["SectionBg"] = {25, 25, 25},
    ["AccentColor"] = {138, 43, 226}, -- Purple accent
    ["Text"] = {220, 220, 220},
    ["TextSecondary"] = {160, 160, 160},
    ["TextDisabled"] = {90, 90, 90},
    ["Border"] = {40, 40, 40},
    ["HoverColor"] = {32, 32, 32},
    ["CheckboxEnabled"] = {138, 43, 226},
    ["SectionHeader"] = {30, 30, 30}
}

-- Mouse state tracking
local MouseService = findservice(Game, "MouseService")
local Mouse = {
    X = 0,
    Y = 0,
    Clicked = false,
    Pressed = false,
    WasClicked = false
}

-- Library state
local Library = {}
local Windows = {}
local IsDragging = false
local DraggedWindow = nil
local DragOffsetX = 0
local DragOffsetY = 0
local IsVisible = true
local IsToggled = false
local Running = true
local ZIndexCounter = 0

-- Get new z-index for window layering
local function GetNewZIndex()
    ZIndexCounter = ZIndexCounter + 1
    return ZIndexCounter
end

-- Set visibility of a drawing object
local function SetVisibility(Object, Visible)
    if Object and Object.Visible ~= nil then 
        Object.Visible = Visible and IsVisible
    end
end

-- Update mouse state
local function UpdateMouseState()
    local mouseLocation = getmouselocation(MouseService)
    if mouseLocation then
        Mouse.X = mouseLocation.x
        Mouse.Y = mouseLocation.y
    end
    Mouse.WasClicked = Mouse.Clicked
    Mouse.Clicked = isleftclicked()
    Mouse.Pressed = isleftpressed()
end

-- Check if mouse is over an area
local function IsMouseOver(x, y, width, height)
    return Mouse.X >= x and Mouse.X <= x + width and
           Mouse.Y >= y and Mouse.Y <= y + height
end

-- Main library creation function
function Library:Create(Options)
    local MenuName = Options.Name or "SenseHub V2"
    
    -- Create window function
    function Library:Window(Options)
        local WindowName = Options.Name or "Window"
        local WindowWidth = Options.Width or 900
        local WindowHeight = Options.Height or 650
        local DefaultPos = Options.Position or {150, 50}
        
        local Window = {
            Name = WindowName,
            Width = WindowWidth,
            Height = WindowHeight,
            X = DefaultPos[1],
            Y = DefaultPos[2],
            Elements = {},
            ElementY = 30,
            Padding = 8,
            Enabled = false,
            ZIndex = GetNewZIndex()
        }
        
        -- Create window background
        Window.Background = Drawing.new("Square")
        Window.Background.Size = {WindowWidth, WindowHeight}
        Window.Background.Position = {Window.X, Window.Y}
        Window.Background.Color = Colors["WindowBg"]
        Window.Background.Filled = true
        Window.Background.Transparency = 1
        Window.Background.Visible = false
        Window.Background.zIndex = Window.ZIndex
        
        -- Create window border
        Window.Border = Drawing.new("Square")
        Window.Border.Size = {WindowWidth, WindowHeight}
        Window.Border.Position = {Window.X, Window.Y}
        Window.Border.Color = Colors["Border"]
        Window.Border.Filled = false
        Window.Border.Thickness = 1
        Window.Border.Transparency = 1
        Window.Border.Visible = false
        Window.Border.zIndex = Window.ZIndex + 1
        
        -- Create sidebar
        Window.Sidebar = Drawing.new("Square")
        Window.Sidebar.Size = {120, WindowHeight}
        Window.Sidebar.Position = {Window.X, Window.Y}
        Window.Sidebar.Color = Colors["SidebarBg"]
        Window.Sidebar.Filled = true
        Window.Sidebar.Transparency = 1
        Window.Sidebar.Visible = false
        Window.Sidebar.zIndex = Window.ZIndex + 2
        
        -- Create content area
        Window.Content = Drawing.new("Square")
        Window.Content.Size = {WindowWidth - 120, WindowHeight}
        Window.Content.Position = {Window.X + 120, Window.Y}
        Window.Content.Color = Colors["ContentBg"]
        Window.Content.Filled = true
        Window.Content.Transparency = 1
        Window.Content.Visible = false
        Window.Content.zIndex = Window.ZIndex + 2

        -- Check if point is in window's draggable area
        function Window:IsInDraggableArea(X, Y)
            return X >= self.X and X <= self.X + self.Width and
                   Y >= self.Y and Y <= self.Y + 30
        end

        -- Update window position
        function Window:SetPosition(X, Y)
            self.X = X
            self.Y = Y
            
            self.Background.Position = {X, Y}
            self.Border.Position = {X, Y}
            self.Sidebar.Position = {X, Y}
            self.Content.Position = {X + 120, Y}
            
            self:UpdateElementPositions()
        end

        -- Bring window to front
        function Window:BringToFront()
            self.ZIndex = GetNewZIndex()
            self.Background.zIndex = self.ZIndex
            self.Border.zIndex = self.ZIndex + 1
            self.Sidebar.zIndex = self.ZIndex + 2
            self.Content.zIndex = self.ZIndex + 2
        end

        -- Update all element positions
        function Window:UpdateElementPositions()
            for _, Element in ipairs(self.Elements) do
                if Element.UpdatePosition then
                    Element:UpdatePosition()
                end
            end
        end

        -- Toggle window visibility
        function Window:Toggle(Enabled)
            self.Enabled = Enabled ~= nil and Enabled or not self.Enabled
            
            if self.Enabled then
                self:BringToFront()
            end
            
            SetVisibility(self.Background, self.Enabled)
            SetVisibility(self.Border, self.Enabled)
            SetVisibility(self.Sidebar, self.Enabled)
            SetVisibility(self.Content, self.Enabled)
            
            for _, Element in ipairs(self.Elements) do
                if Element.SetVisibility then
                    Element:SetVisibility(self.Enabled)
                end
            end
        end

        -- Create section
        function Window:Section(Options)
            local SectionName = Options.Name or "Section"
            local SectionX = Options.X or (self.X + 140)
            local SectionY = Options.Y or (self.Y + 20)
            local SectionWidth = Options.Width or 350
            local SectionHeight = Options.Height or 200
            
            local Section = {
                Type = "Section",
                Name = SectionName,
                X = SectionX,
                Y = SectionY,
                Width = SectionWidth,
                Height = SectionHeight,
                Elements = {},
                ElementY = SectionY + 35
            }
            
            -- Section background
            Section.Background = Drawing.new("Square")
            Section.Background.Size = {SectionWidth, SectionHeight}
            Section.Background.Position = {SectionX, SectionY}
            Section.Background.Color = Colors["SectionBg"]
            Section.Background.Filled = true
            Section.Background.Transparency = 1
            Section.Background.Visible = self.Enabled
            Section.Background.zIndex = self.ZIndex + 3
            
            -- Section border
            Section.Border = Drawing.new("Square")
            Section.Border.Size = {SectionWidth, SectionHeight}
            Section.Border.Position = {SectionX, SectionY}
            Section.Border.Color = Colors["Border"]
            Section.Border.Filled = false
            Section.Border.Thickness = 1
            Section.Border.Transparency = 1
            Section.Border.Visible = self.Enabled
            Section.Border.zIndex = self.ZIndex + 4
            
            -- Section header
            Section.Header = Drawing.new("Square")
            Section.Header.Size = {SectionWidth, 25}
            Section.Header.Position = {SectionX, SectionY}
            Section.Header.Color = Colors["SectionHeader"]
            Section.Header.Filled = true
            Section.Header.Transparency = 1
            Section.Header.Visible = self.Enabled
            Section.Header.zIndex = self.ZIndex + 4
            
            -- Section title
            Section.Title = Drawing.new("Text")
            Section.Title.Text = SectionName
            Section.Title.Position = {SectionX + 10, SectionY + 5}
            Section.Title.Color = Colors["Text"]
            Section.Title.Size = 14
            Section.Title.Font = 2
            Section.Title.Transparency = 1
            Section.Title.Visible = self.Enabled
            Section.Title.zIndex = self.ZIndex + 5

            -- Update section position
            function Section:UpdatePosition()
                self.Background.Position = {self.X, self.Y}
                self.Border.Position = {self.X, self.Y}
                self.Header.Position = {self.X, self.Y}
                self.Title.Position = {self.X + 10, self.Y + 5}
                
                for _, Element in ipairs(self.Elements) do
                    if Element.UpdatePosition then
                        Element:UpdatePosition()
                    end
                end
            end

            -- Set section visibility
            function Section:SetVisibility(Visible)
                SetVisibility(self.Background, Visible)
                SetVisibility(self.Border, Visible)
                SetVisibility(self.Header, Visible)
                SetVisibility(self.Title, Visible)
                
                for _, Element in ipairs(self.Elements) do
                    if Element.SetVisibility then
                        Element:SetVisibility(Visible)
                    end
                end
            end

            -- Create toggle
            function Section:Toggle(Options)
                local ToggleName = Options.Name or "Toggle"
                local Default = Options.Default or false
                local Callback = Options.Callback or function() end
                
                local Toggle = {
                    Type = "Toggle",
                    Name = ToggleName,
                    Value = Default,
                    Callback = Callback,
                    Y = self.ElementY
                }
                
                -- Toggle background
                Toggle.Background = Drawing.new("Square")
                Toggle.Background.Size = {16, 16}
                Toggle.Background.Position = {self.X + 10, Toggle.Y}
                Toggle.Background.Color = Colors["SectionBg"]
                Toggle.Background.Filled = true
                Toggle.Background.Transparency = 1
                Toggle.Background.Visible = Window.Enabled
                Toggle.Background.zIndex = Window.ZIndex + 5
                
                -- Toggle border
                Toggle.Border = Drawing.new("Square")
                Toggle.Border.Size = {16, 16}
                Toggle.Border.Position = {self.X + 10, Toggle.Y}
                Toggle.Border.Color = Colors["Border"]
                Toggle.Border.Filled = false
                Toggle.Border.Thickness = 1
                Toggle.Border.Transparency = 1
                Toggle.Border.Visible = Window.Enabled
                Toggle.Border.zIndex = Window.ZIndex + 6
                
                -- Toggle text
                Toggle.Text = Drawing.new("Text")
                Toggle.Text.Text = ToggleName
                Toggle.Text.Position = {self.X + 32, Toggle.Y + 1}
                Toggle.Text.Color = Colors["Text"]
                Toggle.Text.Size = 13
                Toggle.Text.Font = 2
                Toggle.Text.Transparency = 1
                Toggle.Text.Visible = Window.Enabled
                Toggle.Text.zIndex = Window.ZIndex + 6
                
                -- Toggle checkmark
                Toggle.Checkmark = Drawing.new("Text")
                Toggle.Checkmark.Text = "✓"
                Toggle.Checkmark.Position = {self.X + 12, Toggle.Y}
                Toggle.Checkmark.Color = Colors["CheckboxEnabled"]
                Toggle.Checkmark.Size = 14
                Toggle.Checkmark.Font = 2
                Toggle.Checkmark.Transparency = 1
                Toggle.Checkmark.Visible = Window.Enabled and Default
                Toggle.Checkmark.zIndex = Window.ZIndex + 7

                function Toggle:SetValue(Value)
                    self.Value = Value
                    self.Checkmark.Visible = Window.Enabled and Value
                    
                    if self.Callback then
                        spawn(function() 
                            self.Callback(Value)
                        end)
                    end
                end

                function Toggle:UpdatePosition()
                    self.Background.Position = {Section.X + 10, self.Y}
                    self.Border.Position = {Section.X + 10, self.Y}
                    self.Text.Position = {Section.X + 32, self.Y + 1}
                    self.Checkmark.Position = {Section.X + 12, self.Y}
                end

                function Toggle:SetVisibility(Visible)
                    SetVisibility(self.Background, Visible)
                    SetVisibility(self.Border, Visible)
                    SetVisibility(self.Text, Visible)
                    SetVisibility(self.Checkmark, Visible and self.Value)
                end

                table.insert(Section.Elements, Toggle)
                self.ElementY = self.ElementY + 25
                return Toggle
            end

            table.insert(self.Elements, Section)
            return Section
        end

        table.insert(Windows, Window)
        return Window
    end
    
    -- Main update loop
    spawn(function()
        while Running do
            UpdateMouseState()
            
            -- Handle window dragging
            if Mouse.Pressed then
                if not IsDragging then
                    for _, Window in ipairs(Windows) do
                        if Window.Enabled and Window:IsInDraggableArea(Mouse.X, Mouse.Y) then
                            IsDragging = true
                            DraggedWindow = Window
                            DragOffsetX = Mouse.X - Window.X
                            DragOffsetY = Mouse.Y - Window.Y
                            Window:BringToFront()
                            break
                        end
                    end
                elseif DraggedWindow then
                    DraggedWindow:SetPosition(Mouse.X - DragOffsetX, Mouse.Y - DragOffsetY)
                end
            else
                IsDragging = false
                DraggedWindow = nil
            end
            
            -- Handle toggle interactions
            for _, Window in ipairs(Windows) do
                if Window.Enabled then
                    for _, Element in ipairs(Window.Elements) do
                        if Element.Type == "Section" then
                            for _, SubElement in ipairs(Element.Elements) do
                                if SubElement.Type == "Toggle" then
                                    local ToggleX = SubElement.Background.Position.x
                                    local ToggleY = SubElement.Background.Position.y
                                    
                                    if IsMouseOver(ToggleX, ToggleY, 16, 16) then
                                        SubElement.Background.Color = Colors["HoverColor"]
                                        
                                        if Mouse.Clicked and not Mouse.WasClicked then
                                            SubElement:SetValue(not SubElement.Value)
                                        end
                                    else
                                        SubElement.Background.Color = Colors["SectionBg"]
                                    end
                                end
                            end
                        end
                    end
                end
            end
            
            wait(0.01) -- Small delay to prevent excessive CPU usage
        end
    end)
    
    return Library
end

-- Cleanup function
function Library:Unload()
    Running = false
    for _, Window in ipairs(Windows) do
        for _, Element in ipairs(Window.Elements) do
            if Element.Type == "Section" then
                for _, SubElement in ipairs(Element.Elements) do
                    if SubElement.Background then SubElement.Background:Remove() end
                    if SubElement.Border then SubElement.Border:Remove() end
                    if SubElement.Text then SubElement.Text:Remove() end
                    if SubElement.Checkmark then SubElement.Checkmark:Remove() end
                end
                if Element.Background then Element.Background:Remove() end
                if Element.Border then Element.Border:Remove() end
                if Element.Header then Element.Header:Remove() end
                if Element.Title then Element.Title:Remove() end
            end
        end
        if Window.Background then Window.Background:Remove() end
        if Window.Border then Window.Border:Remove() end
        if Window.Sidebar then Window.Sidebar:Remove() end
        if Window.Content then Window.Content:Remove() end
    end
    Windows = {}
    Drawing.clear()
end

return Library 
