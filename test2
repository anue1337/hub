local Library = {}
local Utility = {}
local Windows = {}

-- Colors (inspired by Splix and original lib)
local Colors = {
    ["Accent"] = {120, 120, 240},
    ["DarkBackground"] = {20, 20, 30},
    ["LightBackground"] = {30, 30, 45},
    ["Border"] = {45, 45, 60},
    ["Text"] = {240, 240, 240},
    ["DisabledText"] = {110, 110, 110},
    ["Selected"] = {255, 255, 255}
}

-- Utility functions
function Utility:GetMousePosition()
    return {x = getmouseposition().x, y = getmouseposition().y}
end

function Utility:IsInBounds(position, size, mousePosition)
    return mousePosition.x >= position.x and mousePosition.x <= position.x + size.x and
           mousePosition.y >= position.y and mousePosition.y <= position.y + size.y
end

-- Main UI Library
function Library:Init(options)
    options = options or {}
    local name = options.Name or "Severe UI"
    local size = options.Size or {x = 600, y = 500}
    local position = options.Position or {x = 300, y = 100}
    
    local window = {
        Name = name,
        Size = size,
        Position = position,
        Tabs = {},
        ActiveTab = nil,
        Visible = true,
        Dragging = false,
        DragOffset = {x = 0, y = 0}
    }
    
    -- Main window background
    window.Background = Drawing.new("Square")
    window.Background.Size = {size.x, size.y}
    window.Background.Position = {position.x, position.y}
    window.Background.Color = Colors.DarkBackground
    window.Background.Filled = true
    window.Background.Transparency = 1
    window.Background.Visible = true
    
    -- Window border
    window.Border = Drawing.new("Square")
    window.Border.Size = {size.x, size.y}
    window.Border.Position = {position.x, position.y}
    window.Border.Color = Colors.Border
    window.Border.Filled = false
    window.Border.Thickness = 1
    window.Border.Transparency = 1
    window.Border.Visible = true
    
    -- Window title
    window.Title = Drawing.new("Text")
    window.Title.Text = name
    window.Title.Size = 18
    window.Title.Font = 2
    window.Title.Color = Colors.Text
    window.Title.Position = {position.x + 10, position.y + 8}
    window.Title.Outline = true
    window.Title.OutlineColor = {0, 0, 0}
    window.Title.Transparency = 1
    window.Title.Visible = true
    
    -- Tab container
    window.TabContainer = Drawing.new("Square")
    window.TabContainer.Size = {size.x - 20, 25}
    window.TabContainer.Position = {position.x + 10, position.y + 35}
    window.TabContainer.Color = Colors.LightBackground
    window.TabContainer.Filled = true
    window.TabContainer.Transparency = 1
    window.TabContainer.Visible = true
    
    -- Tab container border
    window.TabBorder = Drawing.new("Square")
    window.TabBorder.Size = {size.x - 20, 25}
    window.TabBorder.Position = {position.x + 10, position.y + 35}
    window.TabBorder.Color = Colors.Border
    window.TabBorder.Filled = false
    window.TabBorder.Thickness = 1
    window.TabBorder.Transparency = 1
    window.TabBorder.Visible = true
    
    -- Content container
    window.ContentContainer = Drawing.new("Square")
    window.ContentContainer.Size = {size.x - 20, size.y - 70}
    window.ContentContainer.Position = {position.x + 10, position.y + 70}
    window.ContentContainer.Color = Colors.LightBackground
    window.ContentContainer.Filled = true
    window.ContentContainer.Transparency = 1
    window.ContentContainer.Visible = true
    
    -- Content container border
    window.ContentBorder = Drawing.new("Square")
    window.ContentBorder.Size = {size.x - 20, size.y - 70}
    window.ContentBorder.Position = {position.x + 10, position.y + 70}
    window.ContentBorder.Color = Colors.Border
    window.ContentBorder.Filled = false
    window.ContentBorder.Thickness = 1
    window.ContentBorder.Transparency = 1
    window.ContentBorder.Visible = true
    
    -- Methods
    function window:UpdatePosition(newPosition)
        self.Position = newPosition
        self.Background.Position = {newPosition.x, newPosition.y}
        self.Border.Position = {newPosition.x, newPosition.y}
        self.Title.Position = {newPosition.x + 10, newPosition.y + 8}
        self.TabContainer.Position = {newPosition.x + 10, newPosition.y + 35}
        self.TabBorder.Position = {newPosition.x + 10, newPosition.y + 35}
        self.ContentContainer.Position = {newPosition.x + 10, newPosition.y + 70}
        self.ContentBorder.Position = {newPosition.x + 10, newPosition.y + 70}
        
        -- Update tab positions
        self:UpdateTabPositions()
    end
    
    function window:UpdateTabPositions()
        local tabCount = #self.Tabs
        if tabCount == 0 then return end
        
        local tabWidth = self.TabContainer.Size[1] / tabCount
        for i, tab in ipairs(self.Tabs) do
            local tabX = self.TabContainer.Position[1] + (i - 1) * tabWidth
            tab.Button.Position = {tabX, self.TabContainer.Position[2]}
            tab.Button.Size = {tabWidth, self.TabContainer.Size[2]}
            tab.ButtonBorder.Position = {tabX, self.TabContainer.Position[2]}
            tab.ButtonBorder.Size = {tabWidth, self.TabContainer.Size[2]}
            
            -- Center the text
            local textX = tabX + (tabWidth / 2) - (tab.ButtonText.TextBounds.x / 2)
            local textY = self.TabContainer.Position[2] + (self.TabContainer.Size[2] / 2) - 8
            tab.ButtonText.Position = {textX, textY}
            
            if tab.Highlight then
                tab.Highlight.Position = {tabX, self.TabContainer.Position[2]}
                tab.Highlight.Size = {tabWidth, self.TabContainer.Size[2]}
            end
        end
    end
    
    function window:AddTab(name)
        local tab = {
            Name = name,
            Visible = false,
            Sections = {
                Left = {},
                Right = {}
            }
        }
        
        -- Tab button
        tab.Button = Drawing.new("Square")
        tab.Button.Filled = true
        tab.Button.Color = Colors.LightBackground
        tab.Button.Transparency = 1
        tab.Button.Visible = true
        
        -- Tab button border
        tab.ButtonBorder = Drawing.new("Square")
        tab.ButtonBorder.Filled = false
        tab.ButtonBorder.Color = Colors.Border
        tab.ButtonBorder.Thickness = 1
        tab.ButtonBorder.Transparency = 1
        tab.ButtonBorder.Visible = true
        
        -- Tab text
        tab.ButtonText = Drawing.new("Text")
        tab.ButtonText.Text = name
        tab.ButtonText.Size = 14
        tab.ButtonText.Font = 2
        tab.ButtonText.Color = Colors.Text
        tab.ButtonText.Outline = true
        tab.ButtonText.OutlineColor = {0, 0, 0}
        tab.ButtonText.Transparency = 1
        tab.ButtonText.Visible = true
        tab.ButtonText.Center = true
        
        -- Tab highlight (shown when tab is active)
        tab.Highlight = Drawing.new("Square")
        tab.Highlight.Filled = true
        tab.Highlight.Color = Colors.Selected
        tab.Highlight.Transparency = 0.1
        tab.Highlight.Visible = false
        
        -- Add tab to window
        table.insert(self.Tabs, tab)
        
        -- Update tab positions
        self:UpdateTabPositions()
        
        -- If this is the first tab, make it active
        if #self.Tabs == 1 then
            self:SelectTab(1)
        end
        
        -- Add section creation method to the tab
        function tab:AddSection(options)
            options = options or {}
            local name = options.Name or "Section"
            local side = options.Side or "Left"
            
            local section = {
                Name = name,
                Side = side,
                Elements = {}
            }
            
            -- We'll implement section rendering later
            
            if side == "Left" then
                table.insert(self.Sections.Left, section)
            else
                table.insert(self.Sections.Right, section)
            end
            
            return section
        end
        
        return tab
    end
    
    function window:SelectTab(index)
        if self.ActiveTab then
            self.Tabs[self.ActiveTab].Highlight.Visible = false
            -- Hide all elements from active tab (will implement later)
        end
        
        self.ActiveTab = index
        self.Tabs[index].Highlight.Visible = true
        -- Show all elements from new active tab (will implement later)
    end
    
    function window:IsHovered()
        local mouse = Utility:GetMousePosition()
        return Utility:IsInBounds(
            {x = self.Position.x, y = self.Position.y},
            {x = self.Size.x, y = self.Size.y},
            mouse
        )
    end
    
    function window:IsTabAreaHovered()
        local mouse = Utility:GetMousePosition()
        return Utility:IsInBounds(
            {x = self.TabContainer.Position[1], y = self.TabContainer.Position[2]},
            {x = self.TabContainer.Size[1], y = self.TabContainer.Size[2]},
            mouse
        )
    end
    
    function window:GetHoveredTab()
        if not self:IsTabAreaHovered() then return nil end
        
        local mouse = Utility:GetMousePosition()
        local tabWidth = self.TabContainer.Size[1] / #self.Tabs
        
        for i, tab in ipairs(self.Tabs) do
            local tabX = self.TabContainer.Position[1] + (i - 1) * tabWidth
            if mouse.x >= tabX and mouse.x < tabX + tabWidth then
                return i
            end
        end
        
        return nil
    end
    
    -- Add window to windows list
    table.insert(Windows, window)
    
    return window
end

-- Input handling loop
local isRunning = true
spawn(function()
    while isRunning do
        local mousePosition = Utility:GetMousePosition()
        local mouseClicked = isleftclicked()
        local mousePressed = isleftpressed()
        
        for _, window in ipairs(Windows) do
            if window.Visible then
                -- Dragging logic
                if mouseClicked and not window.Dragging then
                    if Utility:IsInBounds(
                        {x = window.Position.x, y = window.Position.y},
                        {x = window.Size.x, y = 35}, -- Title bar area
                        mousePosition
                    ) then
                        window.Dragging = true
                        window.DragOffset = {
                            x = mousePosition.x - window.Position.x,
                            y = mousePosition.y - window.Position.y
                        }
                    end
                end
                
                if window.Dragging then
                    if mousePressed then
                        local newPosition = {
                            x = mousePosition.x - window.DragOffset.x,
                            y = mousePosition.y - window.DragOffset.y
                        }
                        window:UpdatePosition(newPosition)
                    else
                        window.Dragging = false
                    end
                end
                
                -- Tab selection
                if mouseClicked and not window.Dragging then
                    local hoveredTab = window:GetHoveredTab()
                    if hoveredTab then
                        window:SelectTab(hoveredTab)
                    end
                end
            end
        end
        
        wait()
    end
end)

-- Clean up function
function Library:Destroy()
    isRunning = false
    
    for _, window in ipairs(Windows) do
        window.Background:Remove()
        window.Border:Remove()
        window.Title:Remove()
        window.TabContainer:Remove()
        window.TabBorder:Remove()
        window.ContentContainer:Remove()
        window.ContentBorder:Remove()
        
        for _, tab in ipairs(window.Tabs) do
            tab.Button:Remove()
            tab.ButtonBorder:Remove()
            tab.ButtonText:Remove()
            tab.Highlight:Remove()
            
            -- Will add cleanup for sections and elements later
        end
    end
    
    Windows = {}
end

return Library
