-- Custom UI Library based on Severe, SplixPrivateDrawingLibrary, and gamesneeze
-- Initial version: Window and Tabs functionality only

local UILibrary = {}
local ActiveWindow = nil
local Running = true
local IsVisible = true

-- Mouse tracking
local MouseService = findservice(Game, "MouseService")
local Mouse = {
    X = 0,
    Y = 0,
    Clicked = false,
    Pressed = false
}

-- Dragging variables
local IsDragging = false
local DragOffsetX = 0
local DragOffsetY = 0

-- UI Theme
local Colors = {
    ["Accent"] = {203, 166, 247},
    ["DarkContrast"] = {17, 17, 27},
    ["LightContrast"] = {24, 24, 37},
    ["Border"] = {49, 50, 68},
    ["Selected"] = {255, 255, 255},
    ["Text"] = {210, 210, 210},
    ["DisabledText"] = {110, 110, 110}
}

-- Utility Functions
local function SetVisibility(Object, Visible)
    if Object and Object.Visible ~= nil then 
        Object.Visible = Visible 
    end
end

local function SetTabVisibility(Tab, Visible)
    if Tab then
        SetVisibility(Tab.Button, Visible)
        SetVisibility(Tab.Border, Visible)
        SetVisibility(Tab.Text, Visible)
        SetVisibility(Tab.Highlight, Visible and Tab.Active)
        Tab.Visible = Visible
    end
end

-- Toggle the UI visibility
local function ToggleUI()
    IsVisible = not IsVisible
    if ActiveWindow then
        SetVisibility(ActiveWindow.Background, IsVisible)
        SetVisibility(ActiveWindow.Border, IsVisible)
        SetVisibility(ActiveWindow.Title, IsVisible)
        SetVisibility(ActiveWindow.TabBackground, IsVisible)
        SetVisibility(ActiveWindow.TabBorder, IsVisible)
        SetVisibility(ActiveWindow.ContentBackground, IsVisible)
        SetVisibility(ActiveWindow.ContentBorder, IsVisible)
        
        -- Toggle tabs visibility
        for _, Tab in ipairs(ActiveWindow.Tabs) do
            SetTabVisibility(Tab, IsVisible)
        end
        
        if not IsVisible then
            IsDragging = false
        end
    end
end

-- Window Creation
function UILibrary:Create(Options)
    if ActiveWindow then
        self:Unload()
    end
    
    local Window = {}
    local TitleText = Options.Name or "Custom UI"
    
    -- Create window background
    Window.Background = Drawing.new("Square")
    Window.Background.Size = {600, 500}
    Window.Background.Position = {400, 200}
    Window.Background.Color = Colors["LightContrast"]
    Window.Background.Filled = true
    Window.Background.Thickness = 1
    Window.Background.Transparency = 1
    Window.Background.Visible = IsVisible
    
    -- Create window border
    Window.Border = Drawing.new("Square")
    Window.Border.Size = Window.Background.Size
    Window.Border.Position = Window.Background.Position
    Window.Border.Color = Colors["Accent"]
    Window.Border.Filled = false
    Window.Border.Thickness = 1.25
    Window.Border.Transparency = 1
    Window.Border.Visible = IsVisible
    
    -- Create window title
    Window.Title = Drawing.new("Text")
    Window.Title.Text = TitleText
    Window.Title.Size = 16
    Window.Title.Font = 5
    Window.Title.Color = Colors["Text"]
    Window.Title.Outline = true
    Window.Title.OutlineColor = {0, 0, 0}
    Window.Title.Position = {Window.Background.Position.x + 10, Window.Background.Position.y + 5}
    Window.Title.Transparency = 1
    Window.Title.Center = false
    Window.Title.Visible = IsVisible
    
    -- Create tab background
    Window.TabBackground = Drawing.new("Square")
    Window.TabBackground.Position = {Window.Background.Position.x + 10, Window.Background.Position.y + 25}
    Window.TabBackground.Size = {Window.Background.Size.x - 20, 20}
    Window.TabBackground.Color = Colors["DarkContrast"]
    Window.TabBackground.Filled = true
    Window.TabBackground.Thickness = 1
    Window.TabBackground.Transparency = 1
    Window.TabBackground.Visible = IsVisible
    
    -- Create tab border
    Window.TabBorder = Drawing.new("Square")
    Window.TabBorder.Position = Window.TabBackground.Position
    Window.TabBorder.Size = Window.TabBackground.Size
    Window.TabBorder.Color = Colors["Border"]
    Window.TabBorder.Filled = false
    Window.TabBorder.Thickness = 1
    Window.TabBorder.Transparency = 1
    Window.TabBorder.Visible = IsVisible
    
    -- Create content background
    Window.ContentBackground = Drawing.new("Square")
    Window.ContentBackground.Position = {Window.Background.Position.x + 10, Window.Background.Position.y + 50}
    Window.ContentBackground.Size = {Window.Background.Size.x - 20, Window.Background.Size.y - 60}
    Window.ContentBackground.Color = Colors["DarkContrast"]
    Window.ContentBackground.Filled = true
    Window.ContentBackground.Thickness = 1
    Window.ContentBackground.Transparency = 1
    Window.ContentBackground.Visible = IsVisible
    
    -- Create content border
    Window.ContentBorder = Drawing.new("Square")
    Window.ContentBorder.Position = Window.ContentBackground.Position
    Window.ContentBorder.Size = Window.ContentBackground.Size
    Window.ContentBorder.Color = Colors["Border"]
    Window.ContentBorder.Filled = false
    Window.ContentBorder.Thickness = 1
    Window.ContentBorder.Transparency = 1
    Window.ContentBorder.Visible = IsVisible
    
    -- Initialize tabs
    Window.Tabs = {}
    Window.ActiveTab = nil
    
    -- Utility Functions
    function Window:IsHovered(Object)
        if not IsVisible or not Object or not Object.Visible then 
            return false 
        end
        
        local MouseX, MouseY = Mouse.X, Mouse.Y
        local ObjectPos = Object.Position
        
        if not ObjectPos then 
            return false 
        end
        
        local ObjectX, ObjectY = ObjectPos.x, ObjectPos.y
        
        if Object.Size then
            local ObjectSize = Object.Size
            local ObjectW, ObjectH = ObjectSize.x, ObjectSize.y
            return MouseX >= ObjectX and MouseX <= ObjectX + ObjectW and 
                   MouseY >= ObjectY and MouseY <= ObjectY + ObjectH
        elseif Object.TextBounds then
            local ObjectBounds = Object.TextBounds
            local ObjectW, ObjectH = ObjectBounds.x, ObjectBounds.y
            
            if Object.Center then 
                ObjectX = ObjectX - ObjectW / 2 
            end
            
            ObjectY = ObjectY - ObjectH / 4
            return MouseX >= ObjectX and MouseX <= ObjectX + ObjectW and 
                   MouseY >= ObjectY and MouseY <= ObjectY + ObjectH
        end
        
        return false
    end
    
    function Window:IsWindowHovered()
        return IsVisible and self:IsHovered(self.Background)
    end
    
    function Window:UpdatePositions()
        local BasePos = self.Background.Position
        local BaseX, BaseY = BasePos.x, BasePos.y
        
        self.Border.Position = {BaseX, BaseY}
        self.Title.Position = {BaseX + 10, BaseY + 5}
        self.TabBackground.Position = {BaseX + 10, BaseY + 25}
        self.TabBorder.Position = self.TabBackground.Position
        self.ContentBackground.Position = {BaseX + 10, BaseY + 50}
        self.ContentBorder.Position = self.ContentBackground.Position
        
        self:UpdateTabLayout()
    end
    
    function Window:UpdateTabLayout()
        local TabCount = #self.Tabs
        if TabCount == 0 then return end
        
        local TabBackgroundPos = self.TabBackground.Position
        local TabBackgroundSize = self.TabBackground.Size
        local TotalWidth = TabBackgroundSize.x
        local TabY = TabBackgroundPos.y
        local TabH = TabBackgroundSize.y
        
        local TabWidth = TotalWidth / TabCount
        
        for i, Tab in ipairs(self.Tabs) do
            local StartX = TabBackgroundPos.x + (i - 1) * TabWidth
            
            Tab.Button.Position = {StartX, TabY}
            Tab.Button.Size = {TabWidth, TabH}
            
            Tab.Border.Position = {StartX, TabY}
            Tab.Border.Size = {TabWidth, TabH}
            
            Tab.Highlight.Position = {StartX, TabY}
            Tab.Highlight.Size = {TabWidth, TabH}
            
            Tab.Text.Position = {StartX + (TabWidth / 2), TabY + (TabH / 2) - 7}
        end
    end
    
    -- Add Tab
    function Window:Tab(Options)
        local TabName = Options.Name or "Tab " .. (#self.Tabs + 1)
        
        -- Create tab button
        local TabButton = Drawing.new("Square")
        TabButton.Color = Colors["LightContrast"]
        TabButton.Filled = true
        TabButton.Thickness = 1
        TabButton.Transparency = 1
        TabButton.Visible = IsVisible
        
        -- Create tab border
        local TabBorder = Drawing.new("Square")
        TabBorder.Color = Colors["Border"]
        TabBorder.Filled = false
        TabBorder.Thickness = 1
        TabBorder.Transparency = 1
        TabBorder.Visible = IsVisible
        
        -- Create tab text
        local TabText = Drawing.new("Text")
        TabText.Text = TabName
        TabText.Size = 13
        TabText.Font = 5
        TabText.Color = Colors["Text"]
        TabText.Outline = true
        TabText.OutlineColor = {0, 0, 0}
        TabText.Transparency = 1
        TabText.Center = true
        TabText.Visible = IsVisible
        
        -- Create tab highlight
        local TabHighlight = Drawing.new("Square")
        TabHighlight.Color = Colors["Selected"]
        TabHighlight.Transparency = 0.085
        TabHighlight.Filled = true
        TabHighlight.Visible = false
        
        local Tab = {
            Name = TabName,
            Button = TabButton,
            Border = TabBorder,
            Text = TabText,
            Highlight = TabHighlight,
            Active = false,
            Visible = IsVisible
        }
        
        table.insert(self.Tabs, Tab)
        
        -- Select the first tab automatically
        if #self.Tabs == 1 then
            self:SelectTab(TabName)
        end
        
        self:UpdateTabLayout()
        
        return Tab
    end
    
    -- Select a tab
    function Window:SelectTab(TabName)
        for _, Tab in ipairs(self.Tabs) do
            local IsActive = Tab.Name == TabName
            Tab.Active = IsActive
            SetVisibility(Tab.Highlight, IsVisible and IsActive)
        end
        
        self.ActiveTab = TabName
    end
    
    -- Unload/destroy the UI
    function Window:Unload()
        Running = false
        
        -- Clean up window elements
        if self.Background then self.Background:Remove() end
        if self.Border then self.Border:Remove() end
        if self.Title then self.Title:Remove() end
        if self.TabBackground then self.TabBackground:Remove() end
        if self.TabBorder then self.TabBorder:Remove() end
        if self.ContentBackground then self.ContentBackground:Remove() end
        if self.ContentBorder then self.ContentBorder:Remove() end
        
        -- Clean up tabs
        for _, Tab in ipairs(self.Tabs) do
            if Tab.Button then Tab.Button:Remove() end
            if Tab.Border then Tab.Border:Remove() end
            if Tab.Text then Tab.Text:Remove() end
            if Tab.Highlight then Tab.Highlight:Remove() end
        end
        
        -- Reset variables
        self.Tabs = {}
        ActiveWindow = nil
    end
    
    ActiveWindow = Window
    
    -- Mouse and drag handling loop
    spawn(function()
        while Running do
            -- Update mouse position and state
            local MouseLocation = getmouselocation(MouseService)
            Mouse.X = MouseLocation.x
            Mouse.Y = MouseLocation.y
            Mouse.Clicked = isleftclicked()
            Mouse.Pressed = isleftpressed()
            
            if IsVisible and ActiveWindow then
                -- Handle window dragging
                if Mouse.Clicked and ActiveWindow:IsWindowHovered() and 
                   Mouse.Y < ActiveWindow.TabBackground.Position.y and not IsDragging then
                    IsDragging = true
                    local WindowPos = ActiveWindow.Background.Position
                    DragOffsetX = Mouse.X - WindowPos.x
                    DragOffsetY = Mouse.Y - WindowPos.y
                elseif Mouse.Pressed and IsDragging then
                    local NewX = Mouse.X - DragOffsetX
                    local NewY = Mouse.Y - DragOffsetY
                    ActiveWindow.Background.Position = {NewX, NewY}
                    ActiveWindow:UpdatePositions()
                elseif not Mouse.Pressed and IsDragging then
                    IsDragging = false
                end
                
                -- Handle tab selection
                if Mouse.Clicked and not IsDragging then
                    for _, Tab in ipairs(ActiveWindow.Tabs) do
                        if Tab.Visible and ActiveWindow:IsHovered(Tab.Button) then
                            ActiveWindow:SelectTab(Tab.Name)
                            break
                        end
                    end
                end
            end
            
            -- Check for toggle key (P)
            local Keys = getpressedkeys()
            local IsTogglePressed = false
            
            for _, K in ipairs(Keys) do
                if K == "P" then
                    IsTogglePressed = true
                    break
                end
            end
            
            if IsTogglePressed and not IsToggled then
                ToggleUI()
            end
            IsToggled = IsTogglePressed
            
            wait()
        end
    end)
    
    return Window
end

-- Unload the entire library
function UILibrary:Unload()
    if ActiveWindow then
        ActiveWindow:Unload()
    end
    
    Drawing.clear()
    Running = false
end

return UILibrary
