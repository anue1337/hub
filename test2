local Colors = {
    ["Accent"] = {120, 120, 240},
    ["DarkBackground"] = {20, 20, 30},
    ["LightBackground"] = {30, 30, 45},
    ["Border"] = {45, 45, 60},
    ["Text"] = {240, 240, 240},
    ["DisabledText"] = {110, 110, 110},
    ["Selected"] = {255, 255, 255}
}

-- Get the MouseService
local MouseService = findservice(Game, "MouseService")
local Mouse = {
    X = 0,
    Y = 0,
    Clicked = false,
    Pressed = false
}

local Library = {}
local Windows = {}
local ActiveWindow = nil
local IsVisible = true
local IsDragging = false
local DragOffset = {X = 0, Y = 0}
local Running = true

function Library:Unload()
    Running = false
    for _, window in pairs(Windows) do
        if window.Main then
            -- Clean up main window elements
            if window.Main.Background then window.Main.Background:Remove() end
            if window.Main.Border then window.Main.Border:Remove() end
            if window.Main.Title then window.Main.Title:Remove() end
            if window.Main.TabContainer then window.Main.TabContainer:Remove() end
            if window.Main.TabBorder then window.Main.TabBorder:Remove() end
            if window.Main.ContentContainer then window.Main.ContentContainer:Remove() end
            if window.Main.ContentBorder then window.Main.ContentBorder:Remove() end

            -- Clean up tabs
            if window.Tabs then
                for _, tab in pairs(window.Tabs) do
                    if tab.Button then tab.Button:Remove() end
                    if tab.ButtonBorder then tab.ButtonBorder:Remove() end
                    if tab.ButtonText then tab.ButtonText:Remove() end
                    if tab.Highlight then tab.Highlight:Remove() end
                    
                    -- Will add cleanup for sections and elements later
                end
            end
        end
    end
    
    Windows = {}
    Drawing.clear()
end

local function SetVisibility(object, visible)
    if object and object.Visible ~= nil then
        object.Visible = visible
    end
end

function Library:Create(options)
    local Window = {}
    local name = options.Name or "Severe UI"
    local size = {x = 600, y = 500}
    local position = {x = 300, y = 100}
    
    -- Main window components
    Window.Main = {}
    Window.Tabs = {}
    Window.ActiveTab = nil
    
    -- Main window background
    Window.Main.Background = Drawing.new("Square")
    Window.Main.Background.Size = {size.x, size.y}
    Window.Main.Background.Position = {position.x, position.y}
    Window.Main.Background.Color = Colors.DarkBackground
    Window.Main.Background.Filled = true
    Window.Main.Background.Thickness = 1
    Window.Main.Background.Transparency = 1
    Window.Main.Background.Visible = true
    
    -- Window border
    Window.Main.Border = Drawing.new("Square")
    Window.Main.Border.Size = {size.x, size.y}
    Window.Main.Border.Position = {position.x, position.y}
    Window.Main.Border.Color = Colors.Border
    Window.Main.Border.Filled = false
    Window.Main.Border.Thickness = 1
    Window.Main.Border.Transparency = 1
    Window.Main.Border.Visible = true
    
    -- Window title
    Window.Main.Title = Drawing.new("Text")
    Window.Main.Title.Text = name
    Window.Main.Title.Size = 18
    Window.Main.Title.Font = 2
    Window.Main.Title.Color = Colors.Text
    Window.Main.Title.Position = {position.x + 10, position.y + 8}
    Window.Main.Title.Outline = true
    Window.Main.Title.OutlineColor = {0, 0, 0}
    Window.Main.Title.Transparency = 1
    Window.Main.Title.Visible = true
    
    -- Tab container
    Window.Main.TabContainer = Drawing.new("Square")
    Window.Main.TabContainer.Size = {size.x - 20, 25}
    Window.Main.TabContainer.Position = {position.x + 10, position.y + 35}
    Window.Main.TabContainer.Color = Colors.LightBackground
    Window.Main.TabContainer.Filled = true
    Window.Main.TabContainer.Transparency = 1
    Window.Main.TabContainer.Visible = true
    
    -- Tab container border
    Window.Main.TabBorder = Drawing.new("Square")
    Window.Main.TabBorder.Size = {size.x - 20, 25}
    Window.Main.TabBorder.Position = {position.x + 10, position.y + 35}
    Window.Main.TabBorder.Color = Colors.Border
    Window.Main.TabBorder.Filled = false
    Window.Main.TabBorder.Thickness = 1
    Window.Main.TabBorder.Transparency = 1
    Window.Main.TabBorder.Visible = true
    
    -- Content container
    Window.Main.ContentContainer = Drawing.new("Square")
    Window.Main.ContentContainer.Size = {size.x - 20, size.y - 70}
    Window.Main.ContentContainer.Position = {position.x + 10, position.y + 70}
    Window.Main.ContentContainer.Color = Colors.LightBackground
    Window.Main.ContentContainer.Filled = true
    Window.Main.ContentContainer.Transparency = 1
    Window.Main.ContentContainer.Visible = true
    
    -- Content container border
    Window.Main.ContentBorder = Drawing.new("Square")
    Window.Main.ContentBorder.Size = {size.x - 20, size.y - 70}
    Window.Main.ContentBorder.Position = {position.x + 10, position.y + 70}
    Window.Main.ContentBorder.Color = Colors.Border
    Window.Main.ContentBorder.Filled = false
    Window.Main.ContentBorder.Thickness = 1
    Window.Main.ContentBorder.Transparency = 1
    Window.Main.ContentBorder.Visible = true
    
    -- Tab management methods
    function Window:UpdatePosition(newX, newY)
        local newPos = {x = newX, y = newY}
        
        -- Update main window elements
        self.Main.Background.Position = {newPos.x, newPos.y}
        self.Main.Border.Position = {newPos.x, newPos.y}
        self.Main.Title.Position = {newPos.x + 10, newPos.y + 8}
        self.Main.TabContainer.Position = {newPos.x + 10, newPos.y + 35}
        self.Main.TabBorder.Position = {newPos.x + 10, newPos.y + 35}
        self.Main.ContentContainer.Position = {newPos.x + 10, newPos.y + 70}
        self.Main.ContentBorder.Position = {newPos.x + 10, newPos.y + 70}
        
        -- Update tab positions
        self:UpdateTabs()
    end
    
    function Window:UpdateTabs()
        local tabCount = #self.Tabs
        if tabCount == 0 then return end
        
        local tabContainerWidth = self.Main.TabContainer.Size[1]
        local tabWidth = tabContainerWidth / tabCount
        local tabX = self.Main.TabContainer.Position[1]
        local tabY = self.Main.TabContainer.Position[2]
        
        for i, tab in ipairs(self.Tabs) do
            local startX = tabX + (i - 1) * tabWidth
            
            tab.Button.Position = {startX, tabY}
            tab.Button.Size = {tabWidth, self.Main.TabContainer.Size[2]}
            
            tab.ButtonBorder.Position = {startX, tabY}
            tab.ButtonBorder.Size = {tabWidth, self.Main.TabContainer.Size[2]}
            
            -- Center text
            local textX = startX + (tabWidth / 2)
            local textY = tabY + (self.Main.TabContainer.Size[2] / 2) - 8
            tab.ButtonText.Position = {textX, textY}
            tab.ButtonText.Center = true
            
            if tab.Highlight then
                tab.Highlight.Position = {startX, tabY}
                tab.Highlight.Size = {tabWidth, self.Main.TabContainer.Size[2]}
            end
        end
    end
    
    function Window:Tab(options)
        local tabName = options.Name or "Tab " .. (#self.Tabs + 1)
        
        local tab = {
            Name = tabName,
            Sections = {
                Left = {},
                Right = {}
            }
        }
        
        -- Tab button
        tab.Button = Drawing.new("Square")
        tab.Button.Filled = true
        tab.Button.Color = Colors.LightBackground
        tab.Button.Transparency = 1
        tab.Button.Visible = true
        
        -- Tab button border
        tab.ButtonBorder = Drawing.new("Square")
        tab.ButtonBorder.Filled = false
        tab.ButtonBorder.Color = Colors.Border
        tab.ButtonBorder.Thickness = 1
        tab.ButtonBorder.Transparency = 1
        tab.ButtonBorder.Visible = true
        
        -- Tab text
        tab.ButtonText = Drawing.new("Text")
        tab.ButtonText.Text = tabName
        tab.ButtonText.Size = 14
        tab.ButtonText.Font = 2
        tab.ButtonText.Color = Colors.Text
        tab.ButtonText.Outline = true
        tab.ButtonText.OutlineColor = {0, 0, 0}
        tab.ButtonText.Transparency = 1
        tab.ButtonText.Visible = true
        
        -- Tab highlight (shown when tab is active)
        tab.Highlight = Drawing.new("Square")
        tab.Highlight.Filled = true
        tab.Highlight.Color = Colors.Selected
        tab.Highlight.Transparency = 0.1
        tab.Highlight.Visible = false
        
        -- Add section creation method to the tab
        function tab:Section(options)
            local sectionName = options.Name or "Section"
            local side = options.Side or "Left"
            
            local section = {
                Name = sectionName,
                Side = side,
                Elements = {}
            }
            
            -- Section container
            section.Background = Drawing.new("Square")
            section.Background.Filled = true
            section.Background.Color = Colors.DarkBackground
            section.Background.Transparency = 1
            section.Background.Visible = true
            
            -- Section border
            section.Border = Drawing.new("Square")
            section.Border.Filled = false
            section.Border.Color = Colors.Border
            section.Border.Thickness = 1
            section.Border.Transparency = 1
            section.Border.Visible = true
            
            -- Section title
            section.Title = Drawing.new("Text")
            section.Title.Text = sectionName
            section.Title.Size = 14
            section.Title.Font = 2
            section.Title.Color = Colors.Text
            section.Title.Outline = true
            section.Title.OutlineColor = {0, 0, 0}
            section.Title.Transparency = 1
            section.Title.Visible = true
            
            -- We'll add element creation methods for the section later
            
            if side == "Left" then
                table.insert(self.Sections.Left, section)
            else
                table.insert(self.Sections.Right, section)
            end
            
            return section
        end
        
        -- Add tab to window
        table.insert(self.Tabs, tab)
        
        -- Update tab positions
        self:UpdateTabs()
        
        -- If this is the first tab, make it active
        if #self.Tabs == 1 then
            self:SelectTab(1)
        end
        
        return tab
    end
    
    function Window:SelectTab(index)
        if self.ActiveTab then
            self.Tabs[self.ActiveTab].Highlight.Visible = false
            -- Hide elements from previous active tab (will implement later)
        end
        
        self.ActiveTab = index
        self.Tabs[index].Highlight.Visible = true
        -- Show elements from new active tab (will implement later)
    end
    
    function Window:IsHovered(obj)
        if not obj then return false end
        
        local mousePos = {
            x = Mouse.X,
            y = Mouse.Y
        }
        
        local pos = obj.Position
        local size = obj.Size
        
        return mousePos.x >= pos[1] and 
               mousePos.x <= pos[1] + size[1] and 
               mousePos.y >= pos[2] and 
               mousePos.y <= pos[2] + size[2]
    end
    
    function Window:IsTabHovered(index)
        return self:IsHovered(self.Tabs[index].Button)
    end
    
    -- Add window to windows list
    table.insert(Windows, Window)
    ActiveWindow = Window
    
    return Window
end

-- Input handling loop
spawn(function()
    while Running do
        local mouseLocation = getmouselocation(MouseService)
        Mouse.X = mouseLocation.x
        Mouse.Y = mouseLocation.y
        Mouse.Clicked = isleftclicked()
        Mouse.Pressed = isleftpressed()
        
        if ActiveWindow and IsVisible then
            -- Dragging logic
            if Mouse.Clicked and not IsDragging then
                local titleBarY = ActiveWindow.Main.TabContainer.Position[2]
                if Mouse.X >= ActiveWindow.Main.Background.Position[1] and 
                   Mouse.X <= ActiveWindow.Main.Background.Position[1] + ActiveWindow.Main.Background.Size[1] and
                   Mouse.Y >= ActiveWindow.Main.Background.Position[2] and
                   Mouse.Y <= titleBarY then
                    
                    IsDragging = true
                    DragOffset.X = Mouse.X - ActiveWindow.Main.Background.Position[1]
                    DragOffset.Y = Mouse.Y - ActiveWindow.Main.Background.Position[2]
                end
            end
            
            if IsDragging then
                if Mouse.Pressed then
                    local newX = Mouse.X - DragOffset.X
                    local newY = Mouse.Y - DragOffset.Y
                    ActiveWindow:UpdatePosition(newX, newY)
                else
                    IsDragging = false
                end
            end
            
            -- Tab selection
            if Mouse.Clicked and not IsDragging then
                for i, tab in ipairs(ActiveWindow.Tabs) do
                    if ActiveWindow:IsHovered(tab.Button) then
                        ActiveWindow:SelectTab(i)
                        break
                    end
                end
            end
        end
        
        wait()
    end
end)

return Library
