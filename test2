local SevereUI = {}

local Drawing = Drawing or (getgenv and getgenv().Drawing)
local Game = game
local findservice = Game and Game.GetService or function(_, name) return Game[name] end
local MouseService = findservice(Game, "MouseService")

-- Color theme
local Theme = {
    Background = {30, 30, 40},     -- Main background color
    Accent = {203, 166, 247},      -- Accent color (purple)
    Text = {240, 240, 240},        -- Text color
    SubText = {180, 180, 190},     -- Secondary text color
    DarkContrast = {20, 20, 30},   -- Darker background color
    Border = {60, 60, 80},         -- Border color
    TabBackground = {35, 35, 45},  -- Tab background color
    TabSelected = {50, 50, 65},    -- Selected tab color
    Disabled = {90, 90, 110}       -- Disabled element color
}

-- Utility variables
local Mouse = {
    X = 0,
    Y = 0,
    Clicked = false,
    Pressed = false
}
local Windows = {}
local ActiveWindow = nil
local IsDragging = false
local DragOffsetX, DragOffsetY = 0, 0
local IsVisible = true
local Running = true
local IsToggling = false

-- Utility functions
local function SetVisibility(Object, Visible)
    if Object and Object.Visible ~= nil then Object.Visible = Visible end
end

local function CreateRoundSquare(Props)
    local Square = Drawing.new("Square")
    Square.Size = Props.Size or {100, 100}
    Square.Position = Props.Position or {0, 0}
    Square.Color = Props.Color or Theme.Background
    Square.Filled = Props.Filled ~= nil and Props.Filled or true
    Square.Thickness = Props.Thickness or 1
    Square.Transparency = Props.Transparency or 1
    Square.Visible = Props.Visible ~= nil and Props.Visible or IsVisible
    return Square
end

local function CreateText(Props)
    local Text = Drawing.new("Text")
    Text.Text = Props.Text or ""
    Text.Size = Props.Size or 14
    Text.Font = Props.Font or 5
    Text.Color = Props.Color or Theme.Text
    Text.Position = Props.Position or {0, 0}
    Text.Outline = Props.Outline ~= nil and Props.Outline or true
    Text.OutlineColor = Props.OutlineColor or {0, 0, 0}
    Text.Center = Props.Center ~= nil and Props.Center or false
    Text.Transparency = Props.Transparency or 1
    Text.Visible = Props.Visible ~= nil and Props.Visible or IsVisible
    return Text
end

local function IsPointInRect(Point, Rect)
    if not Rect.Position or not Rect.Size then return false end
    local X, Y = Point.X or Point.x, Point.Y or Point.y
    local RectX, RectY = Rect.Position.x, Rect.Position.y
    local RectW, RectH = Rect.Size.x, Rect.Size.y
    return X >= RectX and X <= RectX + RectW and Y >= RectY and Y <= RectY + RectH
end

-- Create image from URL (for logo)
local function CreateImage(Props)
    local Image = Drawing.new("Image")
    Image.Url = Props.Url or ""
    Image.Size = Props.Size or {100, 100}
    Image.Position = Props.Position or {0, 0}
    Image.Transparency = Props.Transparency or 1
    Image.Visible = Props.Visible ~= nil and Props.Visible or IsVisible
    return Image
end

-- UI Creation Functions
function SevereUI:Create(Options)
    local Window = {}
    local Name = Options.Name or "Severe UI"
    
    -- Main window components
    Window.Background = CreateRoundSquare({
        Size = {560, 500},
        Position = {350, 100},
        Color = Theme.Background,
    })
    
    Window.Border = CreateRoundSquare({
        Size = {560, 500},
        Position = {350, 100},
        Color = Theme.Accent,
        Filled = false,
        Thickness = 1.25,
    })
    
    Window.Title = CreateText({
        Text = Name,
        Size = 18,
        Position = {Window.Background.Position.x + 15, Window.Background.Position.y + 10},
        Color = Theme.Text,
    })
    
    -- Create logo (if needed)
    Window.Logo = CreateImage({
        Url = "https://cdn.nest.rip/uploads/17230644-70b2-4de4-aa2b-17e23bc47a8c.png",
        Size = {20, 20},
        Position = {Window.Background.Position.x + Window.Background.Size.x - 40, Window.Background.Position.y + 10},
    })
    
    -- Tab area
    Window.TabBar = CreateRoundSquare({
        Size = {Window.Background.Size.x - 30, 30},
        Position = {Window.Background.Position.x + 15, Window.Background.Position.y + 40},
        Color = Theme.DarkContrast,
    })
    
    Window.TabBarBorder = CreateRoundSquare({
        Size = {Window.Background.Size.x - 30, 30},
        Position = {Window.Background.Position.x + 15, Window.Background.Position.y + 40},
        Color = Theme.Border,
        Filled = false,
    })
    
    -- Content area
    Window.ContentBackground = CreateRoundSquare({
        Size = {Window.Background.Size.x - 30, Window.Background.Size.y - 85},
        Position = {Window.Background.Position.x + 15, Window.Background.Position.y + 80},
        Color = Theme.DarkContrast,
    })
    
    Window.ContentBorder = CreateRoundSquare({
        Size = {Window.Background.Size.x - 30, Window.Background.Size.y - 85},
        Position = {Window.Background.Position.x + 15, Window.Background.Position.y + 80},
        Color = Theme.Border,
        Filled = false,
    })
    
    -- Tab management
    Window.Tabs = {}
    Window.ActiveTab = nil
    
    -- Helper function to check if mouse is hovering over an element
    function Window:IsHovered(Element)
        if not IsVisible or not Element or not Element.Visible then return false end
        local MousePos = {X = Mouse.X, Y = Mouse.Y}
        return IsPointInRect(MousePos, Element)
    end
    
    -- Update positions after window moves
    function Window:UpdatePositions()
        local X, Y = self.Background.Position.x, self.Background.Position.y
        
        self.Border.Position = {X, Y}
        self.Title.Position = {X + 15, Y + 10}
        self.Logo.Position = {X + self.Background.Size.x - 40, Y + 10}
        self.TabBar.Position = {X + 15, Y + 40}
        self.TabBarBorder.Position = {X + 15, Y + 40}
        self.ContentBackground.Position = {X + 15, Y + 80}
        self.ContentBorder.Position = {X + 15, Y + 80}
        
        -- Update tab positions
        self:UpdateTabPositions()
    end
    
    -- Tab creation
    function Window:Tab(Options)
        local TabName = Options.Name or "Tab " .. (#self.Tabs + 1)
        local Tab = {}
        
        -- Calculate tab position based on existing tabs
        local TabCount = #self.Tabs
        local TabWidth = self.TabBar.Size.x / (TabCount + 1)
        local TabX = self.TabBar.Position.x + (TabCount * TabWidth)
        
        -- Tab button
        Tab.Button = CreateRoundSquare({
            Size = {TabWidth - 2, self.TabBar.Size.y},
            Position = {TabX, self.TabBar.Position.y},
            Color = Theme.TabBackground,
        })
        
        -- Selected indicator
        Tab.SelectedIndicator = CreateRoundSquare({
            Size = {TabWidth - 2, self.TabBar.Size.y},
            Position = {TabX, self.TabBar.Position.y},
            Color = Theme.TabSelected,
            Visible = false,
        })
        
        -- Tab text
        Tab.Text = CreateText({
            Text = TabName,
            Size = 14,
            Position = {TabX + (TabWidth / 2), self.TabBar.Position.y + (self.TabBar.Size.y / 2) - 7},
            Center = true,
        })
        
        -- Content
        Tab.Content = {
            LeftSections = {},
            RightSections = {},
            Visible = false
        }
        
        -- Section creation
        function Tab:Section(Options)
            local SectionName = Options.Name or "Section"
            local Side = Options.Side or "Left"
            
            local Section = {
                Name = SectionName,
                Side = Side,
                Interfaces = {},
                Visible = false
            }
            
            -- Section background and border will be created when the tab is selected
            -- to get proper positioning based on other sections
            
            -- Add section creation methods here (Button, Toggle, Slider, etc.)
            
            -- Add section to the appropriate side
            if Side == "Left" then
                table.insert(self.Content.LeftSections, Section)
            else
                table.insert(self.Content.RightSections, Section)
            end
            
            return Section
        end
        
        -- Add tab to window
        table.insert(self.Tabs, Tab)
        
        -- If this is the first tab, select it
        if #self.Tabs == 1 then
            self:SelectTab(TabName)
        end
        
        -- Update all tab positions
        self:UpdateTabPositions()
        
        return Tab
    end
    
    -- Update tab positions (called after window moves or when tabs are added)
    function Window:UpdateTabPositions()
        local TabCount = #self.Tabs
        if TabCount == 0 then return end
        
        local TabBarWidth = self.TabBar.Size.x
        local TabWidth = TabBarWidth / TabCount
        
        for i, Tab in ipairs(self.Tabs) do
            local TabX = self.TabBar.Position.x + ((i - 1) * TabWidth)
            
            Tab.Button.Position = {TabX, self.TabBar.Position.y}
            Tab.Button.Size = {TabWidth - 2, self.TabBar.Size.y}
            
            Tab.SelectedIndicator.Position = {TabX, self.TabBar.Position.y}
            Tab.SelectedIndicator.Size = {TabWidth - 2, self.TabBar.Size.y}
            
            Tab.Text.Position = {TabX + (TabWidth / 2), self.TabBar.Position.y + (self.TabBar.Size.y / 2) - 7}
        end
    end
    
    -- Select a tab
    function Window:SelectTab(TabName)
        for _, Tab in ipairs(self.Tabs) do
            local IsSelected = Tab.Text.Text == TabName
            Tab.SelectedIndicator.Visible = IsSelected and IsVisible
            Tab.Content.Visible = IsSelected
            
            -- TODO: Show/hide tab content elements
        end
        
        self.ActiveTab = TabName
    end
    
    -- Add window to the list
    table.insert(Windows, Window)
    ActiveWindow = Window
    
    return Window
end

-- Unload the UI
function SevereUI:Unload()
    Running = false
    
    for _, Window in ipairs(Windows) do
        for _, Element in pairs(Window) do
            if type(Element) == "table" and Element.Remove then
                Element:Remove()
            end
        end
    end
    
    Windows = {}
    ActiveWindow = nil
    Drawing.clear()
end

-- Mouse movement tracking
spawn(function()
    while Running do
        local MousePosition = getmouseposition()
        Mouse.X = MousePosition.x
        Mouse.Y = MousePosition.y
        Mouse.Clicked = isleftclicked()
        Mouse.Pressed = isleftpressed()
        
        -- Handle window dragging
        if ActiveWindow then
            local WindowBG = ActiveWindow.Background
            local DragAreaYMax = ActiveWindow.TabBar.Position.y
            
            -- Start dragging
            if Mouse.Clicked and not IsDragging and Mouse.Y < DragAreaYMax and 
               Mouse.X >= WindowBG.Position.x and Mouse.X <= WindowBG.Position.x + WindowBG.Size.x and
               Mouse.Y >= WindowBG.Position.y and Mouse.Y <= WindowBG.Position.y + DragAreaYMax then
                IsDragging = true
                DragOffsetX = Mouse.X - WindowBG.Position.x
                DragOffsetY = Mouse.Y - WindowBG.Position.y
            -- Continue dragging
            elseif Mouse.Pressed and IsDragging then
                local NewX = Mouse.X - DragOffsetX
                local NewY = Mouse.Y - DragOffsetY
                WindowBG.Position = {NewX, NewY}
                ActiveWindow:UpdatePositions()
            -- Stop dragging
            elseif not Mouse.Pressed and IsDragging then
                IsDragging = false
            end
            
            -- Handle tab clicks
            if Mouse.Clicked and not IsDragging then
                for _, Tab in ipairs(ActiveWindow.Tabs) do
                    if Mouse.X >= Tab.Button.Position.x and Mouse.X <= Tab.Button.Position.x + Tab.Button.Size.x and
                       Mouse.Y >= Tab.Button.Position.y and Mouse.Y <= Tab.Button.Position.y + Tab.Button.Size.y then
                        ActiveWindow:SelectTab(Tab.Text.Text)
                        break
                    end
                end
            end
        end
        
        wait()  -- Wait for next frame
    end
end)

-- Toggle UI visibility (P key)
spawn(function()
    while Running do
        local Keys = getpressedkeys()
        local PKeyPressed = false
        
        for _, Key in ipairs(Keys) do
            if Key == "P" then
                PKeyPressed = true
                break
            end
        end
        
        if PKeyPressed and not IsToggling then
            IsToggling = true
            IsVisible = not IsVisible
            
            -- Toggle visibility for all window elements
            for _, Window in ipairs(Windows) do
                for _, Element in pairs(Window) do
                    if type(Element) == "table" and Element.Visible ~= nil then
                        Element.Visible = IsVisible
                    end
                end
                
                -- Handle tab content visibility
                if Window.ActiveTab then
                    Window:SelectTab(Window.ActiveTab)
                end
            end
            
            -- Wait to prevent rapid toggling
            wait(0.2)
            IsToggling = false
        end
        
        wait()
    end
end)

return SevereUI 
