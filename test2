local Colors = {
    ["WindowBg"] = {30, 30, 30, 220},       -- Window background
    ["TitleBg"] = {37, 37, 38},             -- Title bar
    ["TitleBgActive"] = {41, 74, 122},      -- Active title bar
    ["Border"] = {70, 70, 70},              -- Window border
    ["Button"] = {66, 150, 250},            -- Button color
    ["ButtonHovered"] = {92, 176, 252},     -- Button hover
    ["SliderGrab"] = {66, 150, 250},        -- Slider handle
    ["Text"] = {255, 255, 255},             -- Text color
    ["CheckMark"] = {66, 150, 250},         -- Toggle check color
    ["FrameBg"] = {51, 51, 55},             -- Frame backgrounds
    ["FrameBgHovered"] = {66, 66, 70}       -- Frame hover backgrounds
}

local MouseService = findservice(Game, "MouseService")
local Mouse = {
    X = 0,
    Y = 0,
    Clicked = false,
    Pressed = false
}

local Library = {}
local Windows = {}
local IsDragging = false
local DraggedWindow = nil
local DragOffsetX = 0
local DragOffsetY = 0
local IsVisible = true
local IsToggled = false
local Running = true
local ZIndexCounter = 0

-- Get a new z-index whenever we need to bring a window to front
local function GetNewZIndex()
    ZIndexCounter = ZIndexCounter + 1
    return ZIndexCounter
end

function Library:Unload()
    Running = false
    for _, Window in ipairs(Windows) do
        if Window.Background then Window.Background:Remove() end
        if Window.Border then Window.Border:Remove() end
        if Window.TitleBar then Window.TitleBar:Remove() end
        if Window.TitleText then Window.TitleText:Remove() end
        if Window.CloseButton then Window.CloseButton:Remove() end
        
        if Window.Elements then
            for _, Element in ipairs(Window.Elements) do
                if Element.Type == "Button" then
                    if Element.Background then Element.Background:Remove() end
                    if Element.Text then Element.Text:Remove() end
                elseif Element.Type == "Toggle" then
                    if Element.Background then Element.Background:Remove() end
                    if Element.CheckMark then Element.CheckMark:Remove() end
                    if Element.Text then Element.Text:Remove() end
                    if Element.KeybindText then Element.KeybindText:Remove() end
                elseif Element.Type == "Slider" then
                    if Element.Background then Element.Background:Remove() end
                    if Element.Fill then Element.Fill:Remove() end
                    if Element.Grab then Element.Grab:Remove() end
                    if Element.Text then Element.Text:Remove() end
                    if Element.ValueText then Element.ValueText:Remove() end
                elseif Element.Type == "Label" then
                    if Element.Text then Element.Text:Remove() end
                elseif Element.Type == "Separator" then
                    if Element.Line then Element.Line:Remove() end
                end
            end
        end
    end
    Windows = {}
    Drawing.clear()
    Library = nil
end

local function SetVisibility(Object, Visible)
    if Object and Object.Visible ~= nil then Object.Visible = Visible end
end

function ToggleUI()
    IsVisible = not IsVisible
    for _, Window in ipairs(Windows) do
        if Window.Background then SetVisibility(Window.Background, IsVisible and Window.Enabled) end
        if Window.Border then SetVisibility(Window.Border, IsVisible and Window.Enabled) end
        if Window.TitleBar then SetVisibility(Window.TitleBar, IsVisible and Window.Enabled) end
        if Window.TitleText then SetVisibility(Window.TitleText, IsVisible and Window.Enabled) end
        if Window.CloseButton then SetVisibility(Window.CloseButton, IsVisible and Window.Enabled) end
        
        if Window.Elements and Window.Enabled then
            for _, Element in ipairs(Window.Elements) do
                if Element.Type == "Button" then
                    SetVisibility(Element.Background, IsVisible)
                    SetVisibility(Element.Text, IsVisible)
                elseif Element.Type == "Toggle" then
                    SetVisibility(Element.Background, IsVisible)
                    SetVisibility(Element.CheckMark, IsVisible and Element.Value)
                    SetVisibility(Element.Text, IsVisible)
                    if Element.KeybindText then SetVisibility(Element.KeybindText, IsVisible) end
                elseif Element.Type == "Slider" then
                    SetVisibility(Element.Background, IsVisible)
                    SetVisibility(Element.Fill, IsVisible)
                    SetVisibility(Element.Grab, IsVisible)
                    SetVisibility(Element.Text, IsVisible)
                    SetVisibility(Element.ValueText, IsVisible)
                elseif Element.Type == "Label" then
                    SetVisibility(Element.Text, IsVisible)
                elseif Element.Type == "Separator" then
                    SetVisibility(Element.Line, IsVisible)
                end
            end
        end
    end
end

-- Create the top menu bar
function Library:Create(Options)
    local MenuBarHeight = 25
    local ButtonWidth = 80
    local ButtonHeight = 20
    local Padding = 5
    local MenuX = 10
    local MenuY = 10
    
    local MenuName = Options.Name or "Severe ImGui"
    
    -- Create the tab buttons in the top corner
    local TabButtons = {}
    
    function Library:Window(Options)
        local WindowName = Options.Name or "Window"
        local WindowWidth = Options.Width or 250
        local WindowHeight = Options.Height or 300
        local DefaultPos = Options.Position or {500, 200}
        
        local Window = {
            Name = WindowName,
            Width = WindowWidth,
            Height = WindowHeight,
            X = DefaultPos[1],
            Y = DefaultPos[2],
            Elements = {},
            ElementY = 30, -- Start after title bar
            Padding = 8,
            Enabled = false,
            ZIndex = GetNewZIndex()
        }
        
        -- Create window background
        Window.Background = Drawing.new("Square")
        Window.Background.Size = {WindowWidth, WindowHeight}
        Window.Background.Position = {Window.X, Window.Y}
        Window.Background.Color = Colors["WindowBg"]
        Window.Background.Filled = true
        Window.Background.Transparency = 0.95
        Window.Background.Visible = false
        
        -- Create window border
        Window.Border = Drawing.new("Square")
        Window.Border.Size = {WindowWidth, WindowHeight}
        Window.Border.Position = {Window.X, Window.Y}
        Window.Border.Color = Colors["Border"]
        Window.Border.Filled = false
        Window.Border.Thickness = 1
        Window.Border.Transparency = 1
        Window.Border.Visible = false
        
        -- Create title bar
        Window.TitleBar = Drawing.new("Square")
        Window.TitleBar.Size = {WindowWidth, 25}
        Window.TitleBar.Position = {Window.X, Window.Y}
        Window.TitleBar.Color = Colors["TitleBgActive"]
        Window.TitleBar.Filled = true
        Window.TitleBar.Transparency = 1
        Window.TitleBar.Visible = false
        
        -- Create title text
        Window.TitleText = Drawing.new("Text")
        Window.TitleText.Text = WindowName
        Window.TitleText.Size = 14
        Window.TitleText.Font = 2
        Window.TitleText.Color = Colors["Text"]
        Window.TitleText.Position = {Window.X + 7, Window.Y + 5}
        Window.TitleText.Transparency = 1
        Window.TitleText.Visible = false
        
        -- Create close button
        Window.CloseButton = Drawing.new("Text")
        Window.CloseButton.Text = "X"
        Window.CloseButton.Size = 14
        Window.CloseButton.Font = 2
        Window.CloseButton.Color = Colors["Text"]
        Window.CloseButton.Position = {Window.X + WindowWidth - 15, Window.Y + 5}
        Window.CloseButton.Transparency = 1
        Window.CloseButton.Visible = false
        
        -- Create tab button
        local TabButton = Drawing.new("Square")
        TabButton.Size = {ButtonWidth, ButtonHeight}
        TabButton.Position = {MenuX, MenuY}
        TabButton.Color = Colors["Button"]
        TabButton.Filled = true
        TabButton.Transparency = 1
        TabButton.Visible = true
        
        local TabButtonText = Drawing.new("Text")
        TabButtonText.Text = WindowName
        TabButtonText.Size = 13
        TabButtonText.Font = 2
        TabButtonText.Color = Colors["Text"]
        TabButtonText.Position = {MenuX + (ButtonWidth / 2), MenuY + (ButtonHeight / 2) - 7}
        TabButtonText.Transparency = 1
        TabButtonText.Center = true
        TabButtonText.Visible = true
        
        MenuX = MenuX + ButtonWidth + Padding
        
        table.insert(TabButtons, {
            Button = TabButton,
            Text = TabButtonText,
            Window = Window
        })
        
        -- Check if a point is inside the window title bar (for dragging)
        function Window:IsInTitleBar(X, Y)
            local TitleBarX = self.X
            local TitleBarY = self.Y
            local TitleBarWidth = self.Width
            local TitleBarHeight = 25
            
            return X >= TitleBarX and X <= TitleBarX + TitleBarWidth and
                   Y >= TitleBarY and Y <= TitleBarY + TitleBarHeight
        end
        
        -- Check if a point is in the close button
        function Window:IsInCloseButton(X, Y)
            local ButtonX = self.X + self.Width - 20
            local ButtonY = self.Y + 5
            local ButtonWidth = 15
            local ButtonHeight = 15
            
            return X >= ButtonX and X <= ButtonX + ButtonWidth and
                   Y >= ButtonY and Y <= ButtonY + ButtonHeight
        end
        
        -- Update window position
        function Window:SetPosition(X, Y)
            self.X = X
            self.Y = Y
            
            self.Background.Position = {X, Y}
            self.Border.Position = {X, Y}
            self.TitleBar.Position = {X, Y}
            self.TitleText.Position = {X + 7, Y + 5}
            self.CloseButton.Position = {X + self.Width - 15, Y + 5}
            
            -- Update the positions of all elements
            self:UpdateElementPositions()
        end
        
        function Window:BringToFront()
            self.ZIndex = GetNewZIndex()
        end
        
        function Window:UpdateElementPositions()
            local ElementX = self.X + self.Padding
            local ElementY = self.Y + 30 -- Start after title bar
            
            for _, Element in ipairs(self.Elements) do
                if Element.Type == "Button" then
                    Element.Background.Position = {ElementX, ElementY}
                    Element.Text.Position = {ElementX + (Element.Width / 2), ElementY + (Element.Height / 2) - 7}
                    ElementY = ElementY + Element.Height + 5
                elseif Element.Type == "Toggle" then
                    Element.Background.Position = {ElementX, ElementY}
                    Element.CheckMark.Position = {ElementX + 3, ElementY + 3}
                    Element.Text.Position = {ElementX + 25, ElementY + 1}
                    if Element.KeybindText then
                        Element.KeybindText.Position = {ElementX + self.Width - 50, ElementY + 1}
                    end
                    ElementY = ElementY + 20 + 5
                elseif Element.Type == "Slider" then
                    Element.Background.Position = {ElementX, ElementY + 15}
                    Element.Fill.Position = {ElementX, ElementY + 15}
                    local GrabX = ElementX + ((Element.Value - Element.Min) / (Element.Max - Element.Min)) * Element.Width
                    Element.Grab.Position = {GrabX - 4, ElementY + 15 - 2}
                    Element.Text.Position = {ElementX, ElementY}
                    Element.ValueText.Position = {ElementX + Element.Width - 25, ElementY}
                    ElementY = ElementY + 30 + 5
                elseif Element.Type == "Label" then
                    Element.Text.Position = {ElementX, ElementY}
                    ElementY = ElementY + 20 + 2
                elseif Element.Type == "Separator" then
                    Element.Line.Position = {ElementX, ElementY + 5}
                    ElementY = ElementY + 15
                end
            end
        end
        
        function Window:Toggle(Enabled)
            self.Enabled = Enabled ~= nil and Enabled or not self.Enabled
            
            if self.Enabled then
                self:BringToFront()
            end
            
            SetVisibility(self.Background, IsVisible and self.Enabled)
            SetVisibility(self.Border, IsVisible and self.Enabled)
            SetVisibility(self.TitleBar, IsVisible and self.Enabled)
            SetVisibility(self.TitleText, IsVisible and self.Enabled)
            SetVisibility(self.CloseButton, IsVisible and self.Enabled)
            
            for _, Element in ipairs(self.Elements) do
                if Element.Type == "Button" then
                    SetVisibility(Element.Background, IsVisible and self.Enabled)
                    SetVisibility(Element.Text, IsVisible and self.Enabled)
                elseif Element.Type == "Toggle" then
                    SetVisibility(Element.Background, IsVisible and self.Enabled)
                    SetVisibility(Element.CheckMark, IsVisible and self.Enabled and Element.Value)
                    SetVisibility(Element.Text, IsVisible and self.Enabled)
                    if Element.KeybindText then
                        SetVisibility(Element.KeybindText, IsVisible and self.Enabled)
                    end
                elseif Element.Type == "Slider" then
                    SetVisibility(Element.Background, IsVisible and self.Enabled)
                    SetVisibility(Element.Fill, IsVisible and self.Enabled)
                    SetVisibility(Element.Grab, IsVisible and self.Enabled)
                    SetVisibility(Element.Text, IsVisible and self.Enabled)
                    SetVisibility(Element.ValueText, IsVisible and self.Enabled)
                elseif Element.Type == "Label" then
                    SetVisibility(Element.Text, IsVisible and self.Enabled)
                elseif Element.Type == "Separator" then
                    SetVisibility(Element.Line, IsVisible and self.Enabled)
                end
            end
        end
        
        -- Create UI elements
        function Window:Button(Options)
            local ButtonText = Options.Text or "Button"
            local Callback = Options.Callback or function() end
            local Width = Options.Width or (self.Width - (self.Padding * 2))
            local Height = Options.Height or 25
            
            local Button = {
                Type = "Button",
                Text = ButtonText,
                Callback = Callback,
                Width = Width,
                Height = Height,
                Hovered = false
            }
            
            Button.Background = Drawing.new("Square")
            Button.Background.Size = {Width, Height}
            Button.Background.Position = {self.X + self.Padding, self.Y + self.ElementY}
            Button.Background.Color = Colors["Button"]
            Button.Background.Filled = true
            Button.Background.Transparency = 1
            Button.Background.Visible = self.Enabled and IsVisible
            
            Button.Text = Drawing.new("Text")
            Button.Text.Text = ButtonText
            Button.Text.Size = 13
            Button.Text.Font = 2
            Button.Text.Color = Colors["Text"]
            Button.Text.Position = {self.X + self.Padding + (Width / 2), self.Y + self.ElementY + (Height / 2) - 7}
            Button.Text.Center = true
            Button.Text.Transparency = 1
            Button.Text.Visible = self.Enabled and IsVisible
            
            table.insert(self.Elements, Button)
            self.ElementY = self.ElementY + Height + 5
            
            return Button
        end
        
        function Window:Toggle(Options)
            local ToggleText = Options.Text or "Toggle"
            local Default = Options.Default or false
            local Callback = Options.Callback or function() end
            
            local Toggle = {
                Type = "Toggle",
                Text = ToggleText,
                Value = Default,
                Callback = Callback,
                Width = 18,
                Height = 18,
                Hovered = false
            }
            
            Toggle.Background = Drawing.new("Square")
            Toggle.Background.Size = {18, 18}
            Toggle.Background.Position = {self.X + self.Padding, self.Y + self.ElementY}
            Toggle.Background.Color = Colors["FrameBg"]
            Toggle.Background.Filled = true
            Toggle.Background.Transparency = 1
            Toggle.Background.Visible = self.Enabled and IsVisible
            
            Toggle.CheckMark = Drawing.new("Text")
            Toggle.CheckMark.Text = "✓"
            Toggle.CheckMark.Size = 13
            Toggle.CheckMark.Font = 2
            Toggle.CheckMark.Color = Colors["CheckMark"]
            Toggle.CheckMark.Position = {self.X + self.Padding + 3, self.Y + self.ElementY + 2}
            Toggle.CheckMark.Transparency = 1
            Toggle.CheckMark.Visible = self.Enabled and IsVisible and Default
            
            Toggle.Text = Drawing.new("Text")
            Toggle.Text.Text = ToggleText
            Toggle.Text.Size = 13
            Toggle.Text.Font = 2
            Toggle.Text.Color = Colors["Text"]
            Toggle.Text.Position = {self.X + self.Padding + 25, self.Y + self.ElementY + 1}
            Toggle.Text.Transparency = 1
            Toggle.Text.Visible = self.Enabled and IsVisible
            
            function Toggle:SetValue(Value)
                self.Value = Value
                self.CheckMark.Visible = Window.Enabled and IsVisible and Value
                if self.Callback then
                    spawn(function() self.Callback(Value) end)
                end
            end
            
            function Toggle:Keybind(Options)
                local Default = Options.Default
                local KeyCallback = Options.Callback or function() end
                
                self.KeybindText = Drawing.new("Text")
                self.KeybindText.Text = Default or "None"
                self.KeybindText.Size = 12
                self.KeybindText.Font = 2
                self.KeybindText.Color = Colors["Text"]
                self.KeybindText.Position = {Window.X + Window.Width - 50, Window.Y + Window.ElementY + 1}
                self.KeybindText.Transparency = 0.7
                self.KeybindText.Visible = Window.Enabled and IsVisible
                
                self.KeybindValue = Default
                self.KeybindCallback = KeyCallback
                self.Listening = false
                
                return {
                    Set = function(Key)
                        self.KeybindValue = Key
                        self.KeybindText.Text = Key or "None"
                        if self.KeybindCallback then
                            spawn(function() self.KeybindCallback(Key) end)
                        end
                    end,
                    Get = function() return self.KeybindValue end
                }
            end
            
            table.insert(self.Elements, Toggle)
            self.ElementY = self.ElementY + 20 + 5
            
            return Toggle
        end
        
        function Window:Slider(Options)
            local SliderText = Options.Text or "Slider"
            local Min = Options.Min or 0
            local Max = Options.Max or 100
            local Default = math.clamp(Options.Default or Min, Min, Max)
            local Increment = Options.Increment or 1
            local Callback = Options.Callback or function() end
            local Width = Options.Width or (self.Width - (self.Padding * 2))
            
            local Slider = {
                Type = "Slider",
                Text = SliderText,
                Min = Min,
                Max = Max,
                Value = Default,
                Increment = Increment,
                Callback = Callback,
                Width = Width,
                Height = 8,
                Hovered = false,
                Dragging = false
            }
            
            Slider.Background = Drawing.new("Square")
            Slider.Background.Size = {Width, 8}
            Slider.Background.Position = {self.X + self.Padding, self.Y + self.ElementY + 15}
            Slider.Background.Color = Colors["FrameBg"]
            Slider.Background.Filled = true
            Slider.Background.Transparency = 1
            Slider.Background.Visible = self.Enabled and IsVisible
            
            Slider.Fill = Drawing.new("Square")
            local FillWidth = ((Default - Min) / (Max - Min)) * Width
            Slider.Fill.Size = {FillWidth, 8}
            Slider.Fill.Position = {self.X + self.Padding, self.Y + self.ElementY + 15}
            Slider.Fill.Color = Colors["SliderGrab"]
            Slider.Fill.Filled = true
            Slider.Fill.Transparency = 1
            Slider.Fill.Visible = self.Enabled and IsVisible
            
            Slider.Grab = Drawing.new("Square")
            Slider.Grab.Size = {8, 12}
            Slider.Grab.Position = {self.X + self.Padding + FillWidth - 4, self.Y + self.ElementY + 15 - 2}
            Slider.Grab.Color = Colors["SliderGrab"]
            Slider.Grab.Filled = true
            Slider.Grab.Transparency = 1
            Slider.Grab.Visible = self.Enabled and IsVisible
            
            Slider.Text = Drawing.new("Text")
            Slider.Text.Text = SliderText
            Slider.Text.Size = 13
            Slider.Text.Font = 2
            Slider.Text.Color = Colors["Text"]
            Slider.Text.Position = {self.X + self.Padding, self.Y + self.ElementY}
            Slider.Text.Transparency = 1
            Slider.Text.Visible = self.Enabled and IsVisible
            
            Slider.ValueText = Drawing.new("Text")
            Slider.ValueText.Text = tostring(Default)
            Slider.ValueText.Size = 13
            Slider.ValueText.Font = 2
            Slider.ValueText.Color = Colors["Text"]
            Slider.ValueText.Position = {self.X + self.Padding + Width - 25, self.Y + self.ElementY}
            Slider.ValueText.Transparency = 1
            Slider.ValueText.Visible = self.Enabled and IsVisible
            
            function Slider:SetValue(NewValue)
                local SnappedValue = Min + (math.floor((NewValue - Min) / self.Increment + 0.5) * self.Increment)
                self.Value = math.clamp(SnappedValue, self.Min, self.Max)
                self.ValueText.Text = tostring(self.Value)
                
                local FillWidth = ((self.Value - self.Min) / (self.Max - self.Min)) * self.Width
                self.Fill.Size = {FillWidth, 8}
                self.Grab.Position = {Window.X + Window.Padding + FillWidth - 4, Window.Y + Window.ElementY + 15 - 2}
                
                if self.Callback then
                    spawn(function() self.Callback(self.Value) end)
                end
            end
            
            table.insert(self.Elements, Slider)
            self.ElementY = self.ElementY + 30 + 5
            
            return Slider
        end
        
        function Window:Label(Options)
            local LabelText = Options.Text or "Label"
            local Label = {
                Type = "Label",
                Text = LabelText
            }
            
            Label.Text = Drawing.new("Text")
            Label.Text.Text = LabelText
            Label.Text.Size = 13
            Label.Text.Font = 2
            Label.Text.Color = Colors["Text"]
            Label.Text.Position = {self.X + self.Padding, self.Y + self.ElementY}
            Label.Text.Transparency = 1
            Label.Text.Visible = self.Enabled and IsVisible
            
            table.insert(self.Elements, Label)
            self.ElementY = self.ElementY + 20 + 2
            
            return Label
        end
        
        function Window:Separator()
            local Separator = {
                Type = "Separator"
            }
            
            Separator.Line = Drawing.new("Square")
            Separator.Line.Size = {self.Width - (self.Padding * 2), 1}
            Separator.Line.Position = {self.X + self.Padding, self.Y + self.ElementY + 5}
            Separator.Line.Color = Colors["Border"]
            Separator.Line.Filled = true
            Separator.Line.Transparency = 0.5
            Separator.Line.Visible = self.Enabled and IsVisible
            
            table.insert(self.Elements, Separator)
            self.ElementY = self.ElementY + 15
            
            return Separator
        end
        
        table.insert(Windows, Window)
        return Window
    end
    
    -- Process input and update the UI
    spawn(function()
        while Running do
            local MouseLocation = getmouselocation(MouseService)
            Mouse.X = MouseLocation.x
            Mouse.Y = MouseLocation.y
            local WasClicked = Mouse.Clicked
            Mouse.Clicked = isleftclicked()
            Mouse.Pressed = isleftpressed()
            
            -- Sort windows by z-index (for proper window layering)
            table.sort(Windows, function(a, b) return a.ZIndex < b.ZIndex end)
            
            -- Handle tab button interactions
            for _, TabInfo in ipairs(TabButtons) do
                local TabButton = TabInfo.Button
                local ButtonX = TabButton.Position.x
                local ButtonY = TabButton.Position.y
                local ButtonWidth = TabButton.Size.x
                local ButtonHeight = TabButton.Size.y
                
                local IsHovered = Mouse.X >= ButtonX and Mouse.X <= ButtonX + ButtonWidth and
                                  Mouse.Y >= ButtonY and Mouse.Y <= ButtonY + ButtonHeight
                
                if IsHovered then
                    TabButton.Color = Colors["ButtonHovered"]
                    if Mouse.Clicked and not WasClicked then
                        TabInfo.Window:Toggle()
                    end
                else
                    TabButton.Color = Colors["Button"]
                end
            end
            
            -- Process active windows (back to front)
            for i = #Windows, 1, -1 do
                local Window = Windows[i]
                
                if Window.Enabled then
                    -- Handle window dragging
                    if not IsDragging and Mouse.Pressed and Window:IsInTitleBar(Mouse.X, Mouse.Y) then
                        DraggedWindow = Window
                        IsDragging = true
                        DragOffsetX = Mouse.X - Window.X
                        DragOffsetY = Mouse.Y - Window.Y
                        Window:BringToFront()
                    end
                    
                    -- Update dragged window position
                    if IsDragging and Mouse.Pressed and DraggedWindow == Window then
                        local NewX = Mouse.X - DragOffsetX
                        local NewY = Mouse.Y - DragOffsetY
                        Window:SetPosition(NewX, NewY)
                    end
                    
                    -- Handle close button
                    if Window:IsInCloseButton(Mouse.X, Mouse.Y) then
                        Window.CloseButton.Color = {255, 100, 100}
                        if Mouse.Clicked and not WasClicked then
                            Window:Toggle(false)
                        end
                    else
                        Window.CloseButton.Color = Colors["Text"]
                    end
                    
                    -- Process window elements
                    for _, Element in ipairs(Window.Elements) do
                        if Element.Type == "Button" then
                            local ButtonX = Element.Background.Position.x
                            local ButtonY = Element.Background.Position.y
                            local ButtonWidth = Element.Background.Size.x
                            local ButtonHeight = Element.Background.Size.y
                            
                            local IsHovered = Mouse.X >= ButtonX and Mouse.X <= ButtonX + ButtonWidth and
                                              Mouse.Y >= ButtonY and Mouse.Y <= ButtonY + ButtonHeight
                            
                            if IsHovered then
                                Element.Background.Color = Colors["ButtonHovered"]
                                Element.Hovered = true
                                if Mouse.Clicked and not WasClicked then
                                    spawn(Element.Callback)
                                end
                            else
                                Element.Background.Color = Colors["Button"]
                                Element.Hovered = false
                            end
                        elseif Element.Type == "Toggle" then
                            local ToggleX = Element.Background.Position.x
                            local ToggleY = Element.Background.Position.y
                            local ToggleWidth = Element.Background.Size.x
                            local ToggleHeight = Element.Background.Size.y
                            
                            local IsHovered = Mouse.X >= ToggleX and Mouse.X <= ToggleX + ToggleWidth and
                                              Mouse.Y >= ToggleY and Mouse.Y <= ToggleY + ToggleHeight
                            
                            -- Handle toggle clicks
                            if IsHovered then
                                Element.Background.Color = Colors["FrameBgHovered"]
                                Element.Hovered = true
                                if Mouse.Clicked and not WasClicked then
                                    Element:SetValue(not Element.Value)
                                end
                            else
                                Element.Background.Color = Colors["FrameBg"]
                                Element.Hovered = false
                            end
                            
                            -- Handle keybind interactions if it exists
                            if Element.KeybindText then
                                local KeybindX = Element.KeybindText.Position.x - 5
                                local KeybindY = Element.KeybindText.Position.y
                                local KeybindWidth = 40
                                local KeybindHeight = 18
                                
                                local IsKeybindHovered = Mouse.X >= KeybindX and Mouse.X <= KeybindX + KeybindWidth and
                                                         Mouse.Y >= KeybindY and Mouse.Y <= KeybindY + KeybindHeight
                                
                                if IsKeybindHovered and Mouse.Clicked and not WasClicked then
                                    Element.Listening = true
                                    Element.KeybindText.Text = "..."
                                elseif Element.Listening then
                                    local Keys = getpressedkeys()
                                    if #Keys > 0 then
                                        local Key = Keys[1]
                                        if Key == "Escape" then
                                            Element.KeybindValue = nil
                                            Element.KeybindText.Text = "None"
                                        elseif Key ~= "MouseButton1" and Key ~= "MouseButton2" then
                                            Element.KeybindValue = Key
                                            Element.KeybindText.Text = Key
                                        end
                                        Element.Listening = false
                                        if Element.KeybindCallback then
                                            spawn(function() Element.KeybindCallback(Element.KeybindValue) end)
                                        end
                                    end
                                end
                            end
                        elseif Element.Type == "Slider" then
                            local SliderX = Element.Background.Position.x
                            local SliderY = Element.Background.Position.y
                            local SliderWidth = Element.Background.Size.x
                            local SliderHeight = Element.Background.Size.y
                            
                            local GrabWidth = Element.Grab.Size.x
                            local GrabHeight = Element.Grab.Size.y
                            local GrabX = Element.Grab.Position.x
                            local GrabY = Element.Grab.Position.y
                            
                            local IsHovered = Mouse.X >= SliderX and Mouse.X <= SliderX + SliderWidth and
                                              Mouse.Y >= SliderY - 2 and Mouse.Y <= SliderY + SliderHeight + 2
                            
                            local IsGrabHovered = Mouse.X >= GrabX and Mouse.X <= GrabX + GrabWidth and
                                                  Mouse.Y >= GrabY and Mouse.Y <= GrabY + GrabHeight
                            
                            if IsHovered or IsGrabHovered then
                                Element.Background.Color = Colors["FrameBgHovered"]
                                Element.Hovered = true
                                if Mouse.Clicked and not WasClicked then
                                    Element.Dragging = true
                                end
                            else
                                Element.Background.Color = Colors["FrameBg"]
                                Element.Hovered = false
                            end
                            
                            if Element.Dragging and Mouse.Pressed then
                                local Pos = math.clamp(Mouse.X - SliderX, 0, SliderWidth)
                                local Value = Element.Min + (Pos / SliderWidth) * (Element.Max - Element.Min)
                                Element:SetValue(Value)
                            else
                                Element.Dragging = false
                            end
                        end
                    end
                    
                    -- Title bar color based on active state
                    if Window:IsInTitleBar(Mouse.X, Mouse.Y) or IsDragging and DraggedWindow == Window then
                        Window.TitleBar.Color = Colors["TitleBgActive"]
                    else
                        Window.TitleBar.Color = Colors["TitleBg"]
                    end
                end
            end
            
            -- Reset dragging state
            if not Mouse.Pressed then
                IsDragging = false
                DraggedWindow = nil
            end
            
            -- Process keybinds
            for _, Window in ipairs(Windows) do
                if Window.Elements then
                    for _, Element in ipairs(Window.Elements) do
                        if Element.Type == "Toggle" and Element.KeybindValue and not Element.Listening then
                            local Keys = getpressedkeys()
                            local KeyPressed = false
                            
                            for _, K in ipairs(Keys) do
                                if K == Element.KeybindValue then
                                    KeyPressed = true
                                    break
                                end
                            end
                            
                            if KeyPressed and not Element.LastKeyState then
                                Element:SetValue(not Element.Value)
                            end
                            
                            Element.LastKeyState = KeyPressed
                        end
                    end
                end
            end
            
            -- Toggle UI with P key
            local Keys = getpressedkeys()
            local IsPPressed = false
            
            for _, K in ipairs(Keys) do
                if K == "P" then
                    IsPPressed = true
                    break
                end
            end
            
            if IsPPressed and not IsToggled then
                ToggleUI()
            end
            IsToggled = IsPPressed
            
            wait()
        end
    end)
    
    return Library
end

return Library
