-- SimpleUI: Uma versão simplificada da UI para Severe
-- Baseado no conceito original mas com uma implementação mais simples e robusta

local SimpleUI = {}

-- Configurações globais
local MouseService = findservice(Game, "MouseService")
local ActiveWindow = nil
local IsVisible = true
local Running = true

-- Cores do tema
local Theme = {
    Background = {30, 30, 40},      -- Background escuro
    Accent = {120, 80, 255},        -- Accent roxo
    Border = {50, 50, 65},          -- Bordas da janela
    WindowBackground = {20, 20, 30}, -- Background da janela
    Text = {240, 240, 255},         -- Texto branco
    SubText = {180, 180, 200}       -- Texto secundário
}

-- Estado do mouse
local Mouse = {
    X = 0,
    Y = 0,
    Clicked = false,
    Pressed = false
}

-- Variáveis para arrastar a janela
local IsDragging = false
local DragOffsetX = 0
local DragOffsetY = 0

-- Função auxiliar para verificar se o mouse está sobre um objeto
local function IsMouseOver(Position, Size)
    if not Position or not Size then return false end
    
    return Mouse.X >= Position[1] and 
           Mouse.X <= Position[1] + Size[1] and 
           Mouse.Y >= Position[2] and 
           Mouse.Y <= Position[2] + Size[2]
end

-- Função para criar uma janela principal
function SimpleUI:CreateWindow(Title, Width, Height)
    if ActiveWindow then
        for _, Elem in pairs(ActiveWindow.Elements) do
            if Elem.Remove then Elem:Remove() end
        end
    end
    
    -- Define posição centralizada na tela
    local ScreenW, ScreenH = 1920, 1080 -- Valores padrão
    local X = (ScreenW - Width) / 2
    local Y = (ScreenH - Height) / 2
    
    local Window = {
        Title = Title or "Simple UI",
        Width = Width or 800,
        Height = Height or 500,
        X = X,
        Y = Y,
        Elements = {},
        Tabs = {},
        ActiveTab = nil
    }
    
    -- Background da janela
    Window.Background = Drawing.new("Square")
    Window.Background.Size = {Window.Width, Window.Height}
    Window.Background.Position = {Window.X, Window.Y}
    Window.Background.Color = Theme.WindowBackground
    Window.Background.Filled = true
    Window.Background.Visible = IsVisible
    table.insert(Window.Elements, Window.Background)
    
    -- Borda da janela
    Window.Border = Drawing.new("Square")
    Window.Border.Size = {Window.Width, Window.Height}
    Window.Border.Position = {Window.X, Window.Y}
    Window.Border.Color = Theme.Border
    Window.Border.Filled = false
    Window.Border.Thickness = 1
    Window.Border.Visible = IsVisible
    table.insert(Window.Elements, Window.Border)
    
    -- Barra do título
    Window.TitleBar = Drawing.new("Square")
    Window.TitleBar.Size = {Window.Width, 30}
    Window.TitleBar.Position = {Window.X, Window.Y}
    Window.TitleBar.Color = Theme.Background
    Window.TitleBar.Filled = true
    Window.TitleBar.Visible = IsVisible
    table.insert(Window.Elements, Window.TitleBar)
    
    -- Linha de destaque abaixo da barra de título
    Window.TitleLine = Drawing.new("Square")
    Window.TitleLine.Size = {Window.Width, 2}
    Window.TitleLine.Position = {Window.X, Window.Y + 30}
    Window.TitleLine.Color = Theme.Accent
    Window.TitleLine.Filled = true
    Window.TitleLine.Visible = IsVisible
    table.insert(Window.Elements, Window.TitleLine)
    
    -- Texto do título
    Window.TitleText = Drawing.new("Text")
    Window.TitleText.Text = Window.Title
    Window.TitleText.Position = {Window.X + 10, Window.Y + 8}
    Window.TitleText.Color = Theme.Text
    Window.TitleText.Size = 14
    Window.TitleText.Font = 2
    Window.TitleText.Outline = true
    Window.TitleText.Visible = IsVisible
    table.insert(Window.Elements, Window.TitleText)
    
    -- Container de abas
    Window.TabContainer = Drawing.new("Square")
    Window.TabContainer.Size = {180, Window.Height - 32}
    Window.TabContainer.Position = {Window.X, Window.Y + 32}
    Window.TabContainer.Color = {Theme.Background[1] - 5, Theme.Background[2] - 5, Theme.Background[3] - 5}
    Window.TabContainer.Filled = true
    Window.TabContainer.Visible = IsVisible
    table.insert(Window.Elements, Window.TabContainer)
    
    -- Borda do container de abas
    Window.TabBorder = Drawing.new("Square")
    Window.TabBorder.Size = {180, Window.Height - 32}
    Window.TabBorder.Position = {Window.X, Window.Y + 32}
    Window.TabBorder.Color = Theme.Border
    Window.TabBorder.Filled = false
    Window.TabBorder.Thickness = 1
    Window.TabBorder.Visible = IsVisible
    table.insert(Window.Elements, Window.TabBorder)
    
    -- Container de conteúdo
    Window.ContentArea = Drawing.new("Square")
    Window.ContentArea.Size = {Window.Width - 180, Window.Height - 32}
    Window.ContentArea.Position = {Window.X + 180, Window.Y + 32}
    Window.ContentArea.Color = Theme.WindowBackground
    Window.ContentArea.Filled = true
    Window.ContentArea.Visible = IsVisible
    table.insert(Window.Elements, Window.ContentArea)
    
    -- Função para atualizar as posições dos elementos quando a janela é movida
    function Window:UpdatePosition(NewX, NewY)
        self.X = NewX
        self.Y = NewY
        
        -- Atualiza posição dos elementos principais
        self.Background.Position = {NewX, NewY}
        self.Border.Position = {NewX, NewY}
        self.TitleBar.Position = {NewX, NewY}
        self.TitleLine.Position = {NewX, NewY + 30}
        self.TitleText.Position = {NewX + 10, NewY + 8}
        self.TabContainer.Position = {NewX, NewY + 32}
        self.TabBorder.Position = {NewX, NewY + 32}
        self.ContentArea.Position = {NewX + 180, NewY + 32}
        
        -- Atualiza posição das abas
        for _, Tab in ipairs(self.Tabs) do
            Tab:UpdatePosition()
        end
    end
    
    -- Função para adicionar uma aba
    function Window:AddTab(Name)
        local TabIndex = #self.Tabs + 1
        
        local Tab = {
            Name = Name,
            Window = self,
            Index = TabIndex,
            Elements = {},
            Sections = {},
            Active = false
        }
        
        -- Botão da aba
        Tab.Button = Drawing.new("Square")
        Tab.Button.Size = {170, 28}
        Tab.Button.Position = {self.X + 5, self.Y + 40 + ((TabIndex - 1) * 30)}
        Tab.Button.Color = Theme.Background
        Tab.Button.Filled = true
        Tab.Button.Visible = IsVisible
        table.insert(Tab.Elements, Tab.Button)
        table.insert(self.Elements, Tab.Button)
        
        -- Texto da aba
        Tab.Text = Drawing.new("Text")
        Tab.Text.Text = Name
        Tab.Text.Position = {self.X + 15, self.Y + 40 + ((TabIndex - 1) * 30) + 7}
        Tab.Text.Color = Theme.SubText
        Tab.Text.Size = 14
        Tab.Text.Font = 2
        Tab.Text.Outline = true
        Tab.Text.Visible = IsVisible
        table.insert(Tab.Elements, Tab.Text)
        table.insert(self.Elements, Tab.Text)
        
        -- Indicador de seleção
        Tab.Indicator = Drawing.new("Square")
        Tab.Indicator.Size = {3, 22}
        Tab.Indicator.Position = {self.X + 5, self.Y + 40 + ((TabIndex - 1) * 30) + 3}
        Tab.Indicator.Color = Theme.Accent
        Tab.Indicator.Filled = true
        Tab.Indicator.Transparency = 0 -- Inicialmente invisível
        Tab.Indicator.Visible = IsVisible
        table.insert(Tab.Elements, Tab.Indicator)
        table.insert(self.Elements, Tab.Indicator)
        
        -- Atualiza a posição da aba
        function Tab:UpdatePosition()
            self.Button.Position = {self.Window.X + 5, self.Window.Y + 40 + ((self.Index - 1) * 30)}
            self.Text.Position = {self.Window.X + 15, self.Window.Y + 40 + ((self.Index - 1) * 30) + 7}
            self.Indicator.Position = {self.Window.X + 5, self.Window.Y + 40 + ((self.Index - 1) * 30) + 3}
            
            -- Atualiza as seções
            for _, Section in ipairs(self.Sections) do
                Section:UpdatePosition()
            end
        end
        
        -- Define esta aba como selecionada
        function Tab:Select()
            -- Desativa todas as outras abas
            for _, OtherTab in ipairs(self.Window.Tabs) do
                OtherTab.Active = false
                OtherTab.Text.Color = Theme.SubText
                OtherTab.Indicator.Transparency = 0
                
                -- Esconde as seções das outras abas
                for _, Section in ipairs(OtherTab.Sections) do
                    Section:SetVisible(false)
                end
            end
            
            -- Ativa esta aba
            self.Active = true
            self.Text.Color = Theme.Text
            self.Indicator.Transparency = 1
            
            -- Mostra as seções desta aba
            for _, Section in ipairs(self.Sections) do
                Section:SetVisible(true)
            end
            
            self.Window.ActiveTab = self
        end
        
        -- Adiciona uma seção à aba
        function Tab:AddSection(Name, Side)
            local SidePosition = Side or "Left"
            local SectionX = SidePosition == "Left" and self.Window.X + 190 or self.Window.X + 410
            
            local Section = {
                Name = Name,
                Tab = self,
                Side = SidePosition,
                Elements = {},
                Items = {},
                Height = 30 -- Altura inicial para o cabeçalho
            }
            
            -- Background da seção
            Section.Background = Drawing.new("Square")
            Section.Background.Size = {200, Section.Height}
            Section.Background.Position = {SectionX, self.Window.Y + 42}
            Section.Background.Color = Theme.Background
            Section.Background.Filled = true
            Section.Background.Visible = self.Active and IsVisible
            table.insert(Section.Elements, Section.Background)
            table.insert(self.Elements, Section.Background)
            table.insert(self.Window.Elements, Section.Background)
            
            -- Título da seção
            Section.Title = Drawing.new("Text")
            Section.Title.Text = Name
            Section.Title.Position = {SectionX + 10, self.Window.Y + 47}
            Section.Title.Color = Theme.Text
            Section.Title.Size = 14
            Section.Title.Font = 2
            Section.Title.Outline = true
            Section.Title.Visible = self.Active and IsVisible
            table.insert(Section.Elements, Section.Title)
            table.insert(self.Elements, Section.Title)
            table.insert(self.Window.Elements, Section.Title)
            
            -- Linha separadora
            Section.Divider = Drawing.new("Square")
            Section.Divider.Size = {180, 1}
            Section.Divider.Position = {SectionX + 10, self.Window.Y + 65}
            Section.Divider.Color = Theme.Accent
            Section.Divider.Filled = true
            Section.Divider.Visible = self.Active and IsVisible
            table.insert(Section.Elements, Section.Divider)
            table.insert(self.Elements, Section.Divider)
            table.insert(self.Window.Elements, Section.Divider)
            
            -- Atualiza a posição dos elementos da seção
            function Section:UpdatePosition()
                local X = self.Side == "Left" and self.Tab.Window.X + 190 or self.Tab.Window.X + 410
                
                self.Background.Position = {X, self.Tab.Window.Y + 42}
                self.Title.Position = {X + 10, self.Tab.Window.Y + 47}
                self.Divider.Position = {X + 10, self.Tab.Window.Y + 65}
                
                -- Atualiza os itens
                local CurrentY = self.Tab.Window.Y + 75
                for _, Item in ipairs(self.Items) do
                    if Item.UpdatePosition then
                        Item:UpdatePosition(X, CurrentY)
                        CurrentY = CurrentY + Item.Height + 5
                    end
                end
            end
            
            -- Mostra ou esconde todos os elementos da seção
            function Section:SetVisible(Visible)
                for _, Element in ipairs(self.Elements) do
                    Element.Visible = Visible and IsVisible
                end
                
                for _, Item in ipairs(self.Items) do
                    for _, Element in pairs(Item.Elements) do
                        Element.Visible = Visible and IsVisible
                    end
                end
            end
            
            -- Adiciona um botão à seção
            function Section:AddButton(Options)
                local Name = Options.Name or "Button"
                local Callback = Options.Callback or function() end
                local Height = 30
                
                local ItemY = self.Tab.Window.Y + 75 + #self.Items * (Height + 5)
                
                local Button = {
                    Type = "Button",
                    Name = Name,
                    Callback = Callback,
                    Elements = {},
                    Height = Height
                }
                
                -- Background do botão
                Button.Background = Drawing.new("Square")
                Button.Background.Size = {180, Height}
                Button.Background.Position = {self.Background.Position[1] + 10, ItemY}
                Button.Background.Color = Theme.Background
                Button.Background.Filled = true
                Button.Background.Visible = self.Tab.Active and IsVisible
                table.insert(Button.Elements, Button.Background)
                
                -- Borda do botão
                Button.Border = Drawing.new("Square")
                Button.Border.Size = {180, Height}
                Button.Border.Position = {Button.Background.Position[1], Button.Background.Position[2]}
                Button.Border.Color = Theme.Border
                Button.Border.Filled = false
                Button.Border.Thickness = 1
                Button.Border.Visible = self.Tab.Active and IsVisible
                table.insert(Button.Elements, Button.Border)
                
                -- Texto do botão
                Button.Text = Drawing.new("Text")
                Button.Text.Text = Name
                Button.Text.Position = {Button.Background.Position[1] + 90, Button.Background.Position[2] + 8}
                Button.Text.Color = Theme.Text
                Button.Text.Size = 14
                Button.Text.Font = 2
                Button.Text.Center = true
                Button.Text.Outline = true
                Button.Text.Visible = self.Tab.Active and IsVisible
                table.insert(Button.Elements, Button.Text)
                
                -- Atualiza a posição do botão
                function Button:UpdatePosition(SectionX, ItemY)
                    self.Background.Position = {SectionX + 10, ItemY}
                    self.Border.Position = {SectionX + 10, ItemY}
                    self.Text.Position = {SectionX + 10 + 90, ItemY + 8}
                end
                
                -- Adiciona o botão aos itens da seção
                table.insert(self.Items, Button)
                
                -- Atualiza o tamanho da seção
                local NewHeight = 75 + (#self.Items * (Height + 5))
                self.Background.Size = {200, NewHeight}
                self.Height = NewHeight
                
                -- Registra os elementos do botão
                table.insert(self.Elements, Button.Background)
                table.insert(self.Elements, Button.Border)
                table.insert(self.Elements, Button.Text)
                table.insert(self.Tab.Elements, Button.Background)
                table.insert(self.Tab.Elements, Button.Border)
                table.insert(self.Tab.Elements, Button.Text)
                table.insert(self.Tab.Window.Elements, Button.Background)
                table.insert(self.Tab.Window.Elements, Button.Border)
                table.insert(self.Tab.Window.Elements, Button.Text)
                
                return Button
            end
            
            -- Adiciona um toggle à seção
            function Section:AddToggle(Options)
                local Name = Options.Name or "Toggle"
                local Default = Options.Default or false
                local Callback = Options.Callback or function() end
                local Height = 30
                
                local ItemY = self.Tab.Window.Y + 75 + #self.Items * (Height + 5)
                
                local Toggle = {
                    Type = "Toggle",
                    Name = Name,
                    State = Default,
                    Callback = Callback,
                    Elements = {},
                    Height = Height
                }
                
                -- Texto do toggle
                Toggle.Text = Drawing.new("Text")
                Toggle.Text.Text = Name
                Toggle.Text.Position = {self.Background.Position[1] + 40, ItemY + 8}
                Toggle.Text.Color = Theme.Text
                Toggle.Text.Size = 14
                Toggle.Text.Font = 2
                Toggle.Text.Outline = true
                Toggle.Text.Visible = self.Tab.Active and IsVisible
                table.insert(Toggle.Elements, Toggle.Text)
                
                -- Caixa do toggle
                Toggle.Box = Drawing.new("Square")
                Toggle.Box.Size = {16, 16}
                Toggle.Box.Position = {self.Background.Position[1] + 15, ItemY + 7}
                Toggle.Box.Color = Default and Theme.Accent or Theme.Background
                Toggle.Box.Filled = true
                Toggle.Box.Visible = self.Tab.Active and IsVisible
                table.insert(Toggle.Elements, Toggle.Box)
                
                -- Borda do toggle
                Toggle.Border = Drawing.new("Square")
                Toggle.Border.Size = {16, 16}
                Toggle.Border.Position = {Toggle.Box.Position[1], Toggle.Box.Position[2]}
                Toggle.Border.Color = Default and Theme.Accent or Theme.Border
                Toggle.Border.Filled = false
                Toggle.Border.Thickness = 1
                Toggle.Border.Visible = self.Tab.Active and IsVisible
                table.insert(Toggle.Elements, Toggle.Border)
                
                -- Função para atualizar a posição
                function Toggle:UpdatePosition(SectionX, ItemY)
                    self.Text.Position = {SectionX + 40, ItemY + 8}
                    self.Box.Position = {SectionX + 15, ItemY + 7}
                    self.Border.Position = {SectionX + 15, ItemY + 7}
                end
                
                -- Função para alterar o estado
                function Toggle:SetState(NewState)
                    self.State = NewState
                    self.Box.Color = self.State and Theme.Accent or Theme.Background
                    self.Border.Color = self.State and Theme.Accent or Theme.Border
                    
                    -- Executa o callback com o novo estado
                    spawn(function()
                        self.Callback(self.State)
                    end)
                end
                
                -- Adiciona o toggle aos itens da seção
                table.insert(self.Items, Toggle)
                
                -- Atualiza o tamanho da seção
                local NewHeight = 75 + (#self.Items * (Height + 5))
                self.Background.Size = {200, NewHeight}
                self.Height = NewHeight
                
                -- Registra os elementos do toggle
                table.insert(self.Elements, Toggle.Text)
                table.insert(self.Elements, Toggle.Box)
                table.insert(self.Elements, Toggle.Border)
                table.insert(self.Tab.Elements, Toggle.Text)
                table.insert(self.Tab.Elements, Toggle.Box)
                table.insert(self.Tab.Elements, Toggle.Border)
                table.insert(self.Tab.Window.Elements, Toggle.Text)
                table.insert(self.Tab.Window.Elements, Toggle.Box)
                table.insert(self.Tab.Window.Elements, Toggle.Border)
                
                return Toggle
            end
            
            -- Adiciona um slider à seção
            function Section:AddSlider(Options)
                local Name = Options.Name or "Slider"
                local Min = Options.Min or 0
                local Max = Options.Max or 100
                local Default = Options.Default or ((Max - Min) / 2) + Min
                if Default < Min then Default = Min end
                if Default > Max then Default = Max end
                
                local Units = Options.Units or ""
                local Increment = Options.Increment or 1
                local Callback = Options.Callback or function() end
                local Height = 50
                
                local ItemY = self.Tab.Window.Y + 75 + #self.Items * (Height + 5)
                
                local Slider = {
                    Type = "Slider",
                    Name = Name,
                    Value = Default,
                    Min = Min,
                    Max = Max,
                    Units = Units,
                    Increment = Increment,
                    Callback = Callback,
                    Elements = {},
                    Height = Height,
                    Dragging = false
                }
                
                -- Nome do slider
                Slider.Text = Drawing.new("Text")
                Slider.Text.Text = Name
                Slider.Text.Position = {self.Background.Position[1] + 15, ItemY}
                Slider.Text.Color = Theme.Text
                Slider.Text.Size = 14
                Slider.Text.Font = 2
                Slider.Text.Outline = true
                Slider.Text.Visible = self.Tab.Active and IsVisible
                table.insert(Slider.Elements, Slider.Text)
                
                -- Valor do slider
                Slider.ValueText = Drawing.new("Text")
                Slider.ValueText.Text = tostring(Default) .. Units
                Slider.ValueText.Position = {self.Background.Position[1] + 180, ItemY}
                Slider.ValueText.Color = Theme.Text
                Slider.ValueText.Size = 14
                Slider.ValueText.Font = 2
                Slider.ValueText.Outline = true
                Slider.ValueText.Center = true
                Slider.ValueText.Visible = self.Tab.Active and IsVisible
                table.insert(Slider.Elements, Slider.ValueText)
                
                -- Background do slider
                Slider.Background = Drawing.new("Square")
                Slider.Background.Size = {170, 10}
                Slider.Background.Position = {self.Background.Position[1] + 15, ItemY + 25}
                Slider.Background.Color = Theme.Background
                Slider.Background.Filled = true
                Slider.Background.Visible = self.Tab.Active and IsVisible
                table.insert(Slider.Elements, Slider.Background)
                
                -- Borda do slider
                Slider.Border = Drawing.new("Square")
                Slider.Border.Size = {170, 10}
                Slider.Border.Position = {Slider.Background.Position[1], Slider.Background.Position[2]}
                Slider.Border.Color = Theme.Border
                Slider.Border.Filled = false
                Slider.Border.Thickness = 1
                Slider.Border.Visible = self.Tab.Active and IsVisible
                table.insert(Slider.Elements, Slider.Border)
                
                -- Fill do slider
                local FillWidth = ((Default - Min) / (Max - Min)) * 170
                Slider.Fill = Drawing.new("Square")
                Slider.Fill.Size = {FillWidth, 10}
                Slider.Fill.Position = {Slider.Background.Position[1], Slider.Background.Position[2]}
                Slider.Fill.Color = Theme.Accent
                Slider.Fill.Filled = true
                Slider.Fill.Visible = self.Tab.Active and IsVisible
                table.insert(Slider.Elements, Slider.Fill)
                
                -- Função para atualizar a posição
                function Slider:UpdatePosition(SectionX, ItemY)
                    self.Text.Position = {SectionX + 15, ItemY}
                    self.ValueText.Position = {SectionX + 180, ItemY}
                    self.Background.Position = {SectionX + 15, ItemY + 25}
                    self.Border.Position = {SectionX + 15, ItemY + 25}
                    self.Fill.Position = {SectionX + 15, ItemY + 25}
                end
                
                -- Função para definir o valor
                function Slider:SetValue(NewValue)
                    -- Limita o valor entre Min e Max
                    if NewValue < self.Min then NewValue = self.Min end
                    if NewValue > self.Max then NewValue = self.Max end
                    
                    -- Aplica o incremento
                    if self.Increment > 0 then
                        NewValue = self.Min + math.floor((NewValue - self.Min) / self.Increment + 0.5) * self.Increment
                    end
                    
                    self.Value = NewValue
                    
                    -- Atualiza o tamanho do fill
                    local FillWidth = ((self.Value - self.Min) / (self.Max - self.Min)) * 170
                    self.Fill.Size = {FillWidth, 10}
                    
                    -- Atualiza o texto
                    if self.Increment < 1 then
                        local DecimalPlaces = math.max(0, math.ceil(math.abs(math.log10(self.Increment))))
                        local Format = "%." .. DecimalPlaces .. "f%s"
                        self.ValueText.Text = string.format(Format, self.Value, self.Units)
                    else
                        self.ValueText.Text = tostring(math.floor(self.Value)) .. self.Units
                    end
                    
                    -- Executa o callback com o novo valor
                    spawn(function()
                        self.Callback(self.Value)
                    end)
                end
                
                -- Adiciona o slider aos itens da seção
                table.insert(self.Items, Slider)
                
                -- Atualiza o tamanho da seção
                local NewHeight = 75 + (#self.Items * (Height + 5))
                self.Background.Size = {200, NewHeight}
                self.Height = NewHeight
                
                -- Registra os elementos do slider
                table.insert(self.Elements, Slider.Text)
                table.insert(self.Elements, Slider.ValueText)
                table.insert(self.Elements, Slider.Background)
                table.insert(self.Elements, Slider.Border)
                table.insert(self.Elements, Slider.Fill)
                table.insert(self.Tab.Elements, Slider.Text)
                table.insert(self.Tab.Elements, Slider.ValueText)
                table.insert(self.Tab.Elements, Slider.Background)
                table.insert(self.Tab.Elements, Slider.Border)
                table.insert(self.Tab.Elements, Slider.Fill)
                table.insert(self.Tab.Window.Elements, Slider.Text)
                table.insert(self.Tab.Window.Elements, Slider.ValueText)
                table.insert(self.Tab.Window.Elements, Slider.Background)
                table.insert(self.Tab.Window.Elements, Slider.Border)
                table.insert(self.Tab.Window.Elements, Slider.Fill)
                
                return Slider
            end
            
            -- Adiciona a seção à aba
            table.insert(self.Sections, Section)
            return Section
        end
        
        -- Adiciona a aba à janela
        table.insert(self.Tabs, Tab)
        
        -- Se for a primeira aba, seleciona-a
        if #self.Tabs == 1 then
            Tab:Select()
        end
        
        return Tab
    end
    
    -- Loop principal da UI
    spawn(function()
        while Running do
            -- Atualiza a posição do mouse
            local MouseLocation = getmouselocation(MouseService)
            if type(MouseLocation) == "table" then
                Mouse.X = MouseLocation.x or 0
                Mouse.Y = MouseLocation.y or 0
            else
                -- Fallback para valores padrão
                Mouse.X = 0
                Mouse.Y = 0
            end
            
            -- Atualiza estados do mouse
            Mouse.Clicked = isleftclicked()
            Mouse.Pressed = isleftpressed()
            
            -- Processa o arrasto da janela
            if IsMouseOver({Window.TitleBar.Position[1], Window.TitleBar.Position[2]}, Window.TitleBar.Size) and Mouse.Pressed and not IsDragging then
                IsDragging = true
                DragOffsetX = Mouse.X - Window.X
                DragOffsetY = Mouse.Y - Window.Y
            elseif IsDragging and Mouse.Pressed then
                local NewX = Mouse.X - DragOffsetX
                local NewY = Mouse.Y - DragOffsetY
                Window:UpdatePosition(NewX, NewY)
            elseif not Mouse.Pressed and IsDragging then
                IsDragging = false
            end
            
            -- Processa cliques em abas
            if Mouse.Clicked then
                for _, Tab in ipairs(Window.Tabs) do
                    if IsMouseOver({Tab.Button.Position[1], Tab.Button.Position[2]}, Tab.Button.Size) then
                        Tab:Select()
                    end
                end
                
                -- Processa botões, toggles e sliders se uma aba estiver ativa
                if Window.ActiveTab then
                    for _, Section in ipairs(Window.ActiveTab.Sections) do
                        for _, Item in ipairs(Section.Items) do
                            if Item.Type == "Button" then
                                if IsMouseOver({Item.Background.Position[1], Item.Background.Position[2]}, Item.Background.Size) then
                                    Item.Background.Color = Theme.Accent
                                    Item.Text.Color = {255, 255, 255}
                                    
                                    spawn(Item.Callback)
                                    
                                    spawn(function()
                                        wait(0.1)
                                        if Item.Background then
                                            Item.Background.Color = Theme.Background
                                            Item.Text.Color = Theme.Text
                                        end
                                    end)
                                end
                            elseif Item.Type == "Toggle" then
                                if IsMouseOver({Item.Box.Position[1], Item.Box.Position[2]}, Item.Box.Size) or IsMouseOver({Item.Text.Position[1], Item.Text.Position[2]}, {100, 20}) then
                                    Item:SetState(not Item.State)
                                end
                            end
                        end
                    end
                end
            end
            
            -- Processa o arrasto de sliders
            if Window.ActiveTab then
                for _, Section in ipairs(Window.ActiveTab.Sections) do
                    for _, Item in ipairs(Section.Items) do
                        if Item.Type == "Slider" then
                            -- Verifica se está arrastando este slider
                            if IsMouseOver({Item.Background.Position[1], Item.Background.Position[2]}, Item.Background.Size) and Mouse.Pressed or Item.Dragging then
                                Item.Dragging = true
                                
                                -- Calcula o valor com base na posição do mouse
                                local RelativeX = math.max(0, math.min(Mouse.X - Item.Background.Position[1], 170))
                                local NewValue = Item.Min + ((RelativeX / 170) * (Item.Max - Item.Min))
                                
                                Item:SetValue(NewValue)
                            elseif not Mouse.Pressed then
                                Item.Dragging = false
                            end
                            
                            -- Atualiza a aparência ao passar o mouse
                            if IsMouseOver({Item.Background.Position[1], Item.Background.Position[2]}, Item.Background.Size) or Item.Dragging then
                                Item.Border.Color = Theme.Accent
                            else
                                Item.Border.Color = Theme.Border
                            end
                        elseif Item.Type == "Button" then
                            -- Atualiza a aparência ao passar o mouse
                            if IsMouseOver({Item.Background.Position[1], Item.Background.Position[2]}, Item.Background.Size) then
                                Item.Border.Color = Theme.Accent
                            else
                                Item.Border.Color = Theme.Border
                            end
                        elseif Item.Type == "Toggle" then
                            -- Atualiza a aparência ao passar o mouse
                            if IsMouseOver({Item.Box.Position[1], Item.Box.Position[2]}, Item.Box.Size) or IsMouseOver({Item.Text.Position[1], Item.Text.Position[2]}, {100, 20}) then
                                if not Item.State then Item.Border.Color = Theme.Accent end
                            else
                                if not Item.State then Item.Border.Color = Theme.Border end
                            end
                        end
                    end
                end
            end
            
            wait()
        end
    end)
    
    -- Tecla para mostrar/esconder a UI (P)
    spawn(function()
        while Running do
            local Keys = getpressedkeys()
            for _, Key in ipairs(Keys) do
                if Key == "P" then
                    IsVisible = not IsVisible
                    
                    -- Atualiza visibilidade de todos os elementos
                    for _, Element in ipairs(Window.Elements) do
                        if Element.Visible ~= nil then
                            Element.Visible = IsVisible
                        end
                    end
                    
                    break
                end
            end
            wait(0.1)
        end
    end)
    
    ActiveWindow = Window
    return Window
end

-- Descarrega a UI
function SimpleUI:Unload()
    Running = false
    if ActiveWindow then
        for _, Element in pairs(ActiveWindow.Elements) do
            if Element.Remove then
                Element:Remove()
            end
        end
    end
    Drawing.clear()
end

-- Define a UI como visível ou não
function SimpleUI:SetVisible(Visible)
    IsVisible = Visible
    
    if ActiveWindow then
        for _, Element in pairs(ActiveWindow.Elements) do
            if Element.Visible ~= nil then
                Element.Visible = IsVisible
            end
        end
    end
end

-- Logo do SimpleUI
local Logo = {
    Url = "https://cdn.nest.rip/uploads/17230644-70b2-4de4-aa2b-17e23bc47a8c.png"
}

SimpleUI.Logo = Logo

return SimpleUI 
