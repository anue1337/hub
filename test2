local Library = {}
local Windows = {}
local ZIndexCounter = 1

-- Store UI elements for cleanup
local DrawingObjects = {}

-- Mouse utility
local function GetMousePosition()
    local MouseService = game:FindService("UserInputService")
    local mouse = getmouseposition()
    return {x = mouse.x, y = mouse.y}
end

-- Create a drawing object and store it for cleanup
local function CreateDrawingObject(type, properties)
    local Object = Drawing.new(type)
    
    -- Set all properties
    for property, value in pairs(properties or {}) do
        Object[property] = value
    end
    
    -- Store reference for cleanup
    table.insert(DrawingObjects, Object)
    
    return Object
end

-- Increment zIndex counter
local function GetNewZIndex()
    ZIndexCounter = ZIndexCounter + 1
    return ZIndexCounter
end

-- Check if a point is inside a rectangle
local function IsInRect(x, y, rectX, rectY, rectWidth, rectHeight)
    return x >= rectX and x <= rectX + rectWidth and
           y >= rectY and y <= rectY + rectHeight
end

function Library:CreateWindow(config)
    config = config or {}
    
    local Window = {
        Title = config.Title or "Severe UI",
        Size = config.Size or {400, 300},
        Position = config.Position or {100, 100},
        Padding = config.Padding or 12,
        HeaderHeight = 30,
        AccentColor = config.AccentColor or {0, 190, 255},
        BackgroundColor = config.BackgroundColor or {20, 20, 20},
        HeaderColor = config.HeaderColor or {40, 40, 40},
        TextColor = config.TextColor or {255, 255, 255},
        _children = {},
        _tabs = {},
        _activeTab = nil,
        
        -- Drag functionality
        Dragging = false,
        DragOffset = {x = 0, y = 0},
        Visible = true,
        ZIndex = GetNewZIndex()
    }
    
    -- Create window background
    Window.Background = CreateDrawingObject("Square", {
        Size = Window.Size,
        Position = Window.Position,
        Color = Window.BackgroundColor,
        Filled = true,
        Transparency = 0.95,
        Visible = true,
        ZIndex = Window.ZIndex
    })
    
    -- Create header bar
    Window.Header = CreateDrawingObject("Square", {
        Size = {Window.Size[1], Window.HeaderHeight},
        Position = Window.Position,
        Color = Window.HeaderColor,
        Filled = true,
        Transparency = 1,
        Visible = true,
        ZIndex = Window.ZIndex + 1
    })
    
    -- Create accent line
    Window.AccentLine = CreateDrawingObject("Square", {
        Size = {Window.Size[1], 2},
        Position = {Window.Position[1], Window.Position[2] + Window.HeaderHeight},
        Color = Window.AccentColor,
        Filled = true,
        Transparency = 1,
        Visible = true,
        ZIndex = Window.ZIndex + 2
    })
    
    -- Create title text
    Window.TitleText = CreateDrawingObject("Text", {
        Text = Window.Title,
        Size = 14,
        Center = true,
        Font = 2,
        Position = {Window.Position[1] + Window.Size[1]/2, Window.Position[2] + Window.HeaderHeight/2 - 7},
        Color = Window.TextColor,
        Outline = true,
        OutlineColor = {0, 0, 0},
        Visible = true,
        ZIndex = Window.ZIndex + 3
    })
    
    -- Close button
    Window.CloseButton = CreateDrawingObject("Text", {
        Text = "X",
        Size = 13,
        Position = {Window.Position[1] + Window.Size[1] - 25, Window.Position[2] + 8},
        Color = Window.TextColor,
        Outline = true,
        OutlineColor = {0, 0, 0},
        Visible = true,
        ZIndex = Window.ZIndex + 3
    })
    
    -- Update window position
    function Window:SetPosition(x, y)
        self.Position = {x, y}
        
        -- Update UI elements
        self.Background.Position = {x, y}
        self.Header.Position = {x, y}
        self.AccentLine.Position = {x, y + self.HeaderHeight}
        self.TitleText.Position = {x + self.Size[1]/2, y + self.HeaderHeight/2 - 7}
        self.CloseButton.Position = {x + self.Size[1] - 25, y + 8}
        
        -- Update children positions
        self:UpdateChildrenPositions()
    end
    
    -- Check if mouse is in header (for drag)
    function Window:IsInHeader(x, y)
        return IsInRect(x, y, self.Position[1], self.Position[2], self.Size[1], self.HeaderHeight)
    end
    
    -- Check if mouse is in close button
    function Window:IsInCloseButton(x, y)
        return IsInRect(x, y, self.CloseButton.Position.x - 5, self.CloseButton.Position.y - 5, 20, 20)
    end
    
    -- Toggle window visibility
    function Window:Toggle()
        self.Visible = not self.Visible
        self.Background.Visible = self.Visible
        self.Header.Visible = self.Visible
        self.AccentLine.Visible = self.Visible
        self.TitleText.Visible = self.Visible
        self.CloseButton.Visible = self.Visible
        
        -- Toggle visibility of children
        for _, child in ipairs(self._children) do
            if child.Visible ~= nil then
                child.Visible = self.Visible
            end
        end
    end
    
    -- Update child element positions when window moves
    function Window:UpdateChildrenPositions()
        -- For now, this is a placeholder
        -- Will be implemented as we add UI elements
    end
    
    -- Add the window to the list
    table.insert(Windows, Window)
    
    -- Start input handling for this window
    spawn(function()
        local IsPressed = false
        
        while wait() do
            -- Check if Library still exists
            if not Library then break end
            
            local Mouse = GetMousePosition()
            local Pressed = isleftpressed()
            local Clicked = isleftclicked()
            
            -- Handle dragging
            if Window:IsInHeader(Mouse.x, Mouse.y) then
                if Pressed and not IsPressed then
                    Window.Dragging = true
                    Window.DragOffset = {
                        x = Mouse.x - Window.Position[1],
                        y = Mouse.y - Window.Position[2]
                    }
                end
            end
            
            -- Update position while dragging
            if Window.Dragging and Pressed then
                Window:SetPosition(
                    Mouse.x - Window.DragOffset.x,
                    Mouse.y - Window.DragOffset.y
                )
            else
                Window.Dragging = false
            end
            
            -- Handle close button
            if Window:IsInCloseButton(Mouse.x, Mouse.y) and Clicked then
                Window:Toggle()
            end
            
            IsPressed = Pressed
        end
    end)
    
    -- Add functions for UI elements here as we develop
    function Window:AddButton(config)
        -- This would create a button element
        -- Example placeholder
    end
    
    function Window:AddToggle(config)
        -- This would create a toggle switch
        -- Example placeholder
    end
    
    function Window:AddSlider(config)
        -- This would create a slider element
        -- Example placeholder
    end
    
    return Window
end

function Library:Destroy()
    -- Clean up all drawing objects
    for _, object in ipairs(DrawingObjects) do
        if object.Remove then
            object:Remove()
        end
    end
    
    -- Clear the objects table
    DrawingObjects = {}
    
    -- Clear all windows
    Windows = {}
    
    -- Reset state
    ZIndexCounter = 1
    
    -- Indicate library is no longer valid
    Library = nil
    
    -- Also clear all drawings to be safe
    Drawing.clear()
end

return Library 
